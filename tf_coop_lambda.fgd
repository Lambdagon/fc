//============================ FGD. ===========================================
//
// Purpose: Fortress Connected definition file (.fgd) 
//
//=============================================================================
@include "base.fgd"

//
// Material Exclusions
//

@MaterialExclusion
[
	// Names of the sub-directories we don't want to load materials from
	"ambulance"
	"backpack"
	"console"
	"customcubemaps"
	"detail"
	"debug"
	"engine"
	"environment maps"
	"matsys_regressiontest"
	"hlmv"
	"hud"
	"logo"
	"maps"
	"models"
	"overviews"
	"perftest"
	"scripted"
	"shadertest"
	"sun"
	"vgui"
	"voice"
]

//
// AutoVisGroups
//

@AutoVisGroup = "Tool Brushes"
[
	"Vis Clusters"
	[
		"func_viscluster"
	]
]

@AutoVisGroup = "Custom"
[
	"AI, Choreo"
	[
		"ai_speechfilter"
		"ambient_generic"
		"bot_controller"
		"bot_generator"
		"bot_roster"
		"bot_action_point"
		"bot_hint_sentrygun"
		"entity_spawn_manager"
		"entity_spawn_point"
		"env_microphone"
		"info_node"
		"info_node_air"
		"info_node_air_hint"
		"info_node_climb"
		"info_node_hint"
		"info_node_link"
		"info_node_link_controller"
		"info_npc_spawn_destination"
		"npc_furniture"
		"npc_puppet"
		"npc_template_maker"
		"point_teleport"
		"point_template"
	]

	"Cameras"
	[
		"info_observer_point"
		"game_intro_viewpoint"
		"info_camera_link"
		"point_devshot_camera"
		"point_viewcontrol"
		"sky_camera"
	]

	"Visual"
	[
		"color_correction"
		"env_beam"
		"env_cubemap"
		"env_dustpuff"
		"env_effectscript"
		"env_entity_igniter"
		"env_entity_maker"
		"env_explosion"
		"env_fade"
		"env_fire"
		"env_firesensor"
		"env_firesource"
		"env_fog_controller"
		"env_funnel"
		"env_hudhint"
		"env_laser"
		"env_lightglow"
		"env_message"
		"env_particleperformance"
		"env_particlelight"
		"env_particlescript"
		"env_physexplosion"
		"env_physimpact"
		"env_projectedtexture"
		"env_rotorshooter"
		"env_screeneffect"
		"env_screenoverlay"
		"env_shake"
		"env_shooter"
		"env_smokestack"
		"env_smoketrail"
		"env_spark"
		"env_splash"
		"env_sprite"
		"env_sprite_oriented"
		"env_spritetail"
		"env_steam"
		"env_sun"
		"env_texturetoggle"
		"env_tonemap_controller"
		"env_viewpunch"
		"env_wind"
		"env_zoom"
		"func_fishpool"
		"gibshooter"
		"info_lighting"
		"info_lighting_relative"
		"light"
		"light_spot"
		"light_dynamic"
		"light_environment"
		"info_no_dynamic_shadow"
		//	"info_overlay"
		//	"info_overlay_transition"
		"info_particle_system"
		"info_projecteddecal"
		//	"infodecal"
		"keyframe_rope"
		"keyframe_track"
		"material_modify_control"
		"math_colorblend"
		"move_rope"
		"point_spotlight"
		"point_tesla"
		"prop_detail"
		"shadow_control"
		"vgui_screen"
		"vgui_slideshow_display"
		"water_lod_control"
		// Solids
		"color_correction_volume"
		"env_bubbles"
		"env_embers"
		"func_dustcloud"
		"func_dustmotes"
		"func_precipitation"
		"func_reflective_glass"
		"func_smokevolume"
		"trigger_wind"
	]

	"Game Logic"
	[
		"filter_activator_class"
		"filter_activator_mass_greater"
		"filter_activator_name"
		"filter_activator_tfteam"
		"filter_damage_type"
		"filter_enemy"
		"filter_multi"
		"filter_tf_player_can_cap"
		"filter_tf_damaged_by_weapon_in_slot"
		"filter_tf_bot_has_tag"
		"filter_tf_class"
		"func_ladderendpoint"
		"func_useableladder"
		"game_end"
		"game_forcerespawn"
		"game_gib_manager"
		"game_player_equip"
		"game_player_team"
		"game_ragdoll_manager"
		"game_round_win"
		"game_score"
		"game_text"
		"game_text_tf"
		"game_ui"
		"game_weapon_manager"
		"info_constraint_anchor"
		"info_hint"
		"info_intermission"
		"info_ladder_dismount"
		"info_landmark"
		"info_mass_center"
		"info_player_start"
		"info_player_teamspawn"
		"info_teleport_destination"
		"info_powerup_spawn"
		"item_powerup_crit"
		"item_powerup_uber"
		"item_ammopack_full"
		"item_ammopack_medium"
		"item_ammopack_small"
		"item_healthkit_full"
		"item_healthkit_medium"
		"item_healthkit_small"
		"item_healthkit_tiny"
		"item_healthkit_mega"
		"item_grenadepack"
		"item_teamflag"
		"item_bonuspack"
		"logic_active_autosave"
		"logic_merchant_relay"
		"logic_auto"
		"logic_autosave"
		"logic_branch"
		"logic_branch_listener"
		"logic_case"
		"logic_collision_pair"
		"logic_compare"
		"logic_lineto"
		"logic_measure_movement"
		"logic_multicompare"
		"logic_navigation"
		"logic_playerproxy"
		"logic_relay"
		"logic_timer"
		"mapobj_cart_dispenser"
		"math_colorblend"
		"math_counter"
		"math_remap"
		"move_keyframed"
		"move_track"
		"npc_furntiure"
		"npc_puppet"
		"npc_template_maker"
		"obj_dispenser"
		"obj_sentrygun"
		"obj_teleporter"
		"path_track"
		"phys_ballsocket"
		"phys_constraint"
		"phys_constraintsystem"
		"phys_convert"
		"phys_hinge"
		"phys_keepupright"
		"phys_lengthconstraint"
		"phys_magnet"
		"phys_motor"
		"phys_pulleyconstraint"
		"phys_ragdollconstraint"
		"phys_ragdollmagnet"
		"phys_slideconstraint"
		"phys_spring"
		"phys_thruster"
		"phys_torque"
		"physics_cannister"
		"point_anglesensor"
		"point_angularvelocitysensor"
		"point_bonusmaps_accessor"
		"point_clientcommand"
		"point_enable_motion_fixup"
		"point_gamestats_counter"
		"point_hurt"
		"point_intermission"
		"point_message"
		"point_playermoveconstraint"
		"point_posecontroller"
		"point_proximity_sensor"
		"point_servercommand"
		"point_teleport"
		"point_template"
		"point_velocitysensor"
		"point_viewcontrol"
		"prop_door_rotation"
		"tanktrain_ai"
		"tanktrain_aitarget"
		"team_control_point"
		"team_control_point_master"
		"team_control_point_round"
		"team_round_timer"
		"team_train_watcher"
		"test_traceline"
		"tf_gamerules"
		"tf_logic_arena"
		"tf_logic_hybrid_ctf_cp"
		"tf_logic_koth"
		"tf_logic_medieval"
		"tf_logic_multiple_escort"
		"tf_logic_training_mode"
		"tf_pumpkin_bomb"
		"tf_generic_bomb"
		"tf_logic_holiday"
		"tf_logic_competitive"
		"tf_logic_mannpower"
		"tf_logic_on_holiday"
		"tf_halloween_gift_spawn_location"
		"passtime_logic"
		"info_passtime_ball_spawn"
		"tf_teleport_location"
		"halloween_fortune_teller"
		"tf_halloween_minigame_falling_platforms"
		"tf_halloween_minigame"
		"tf_base_minigame"
		"tf_logic_minigames"
		"prop_soccer_ball"
		"halloween_zapper"
		"tf_zombie_spawner"
		"hightower_teleport_vortex"
		// Solids
		"dispenser_touch_trigger"
		"func_breakable"
		"func_breakable_surf"
		"func_capturezone"
		"func_flagdetectionzone"
		"func_conveyor"
		"func_changeclass"
		"func_door"
		"func_door_rotating"
		"func_clip_vphysics"
		"func_button"
		"func_flag_alert"
		"func_guntarget"
		"func_ladder"
		"func_movelinear"
		"func_nav_avoid"
		"func_nobuild"
		"func_croc"
		"func_suggested_build"
		"func_nogrenades"
		"func_achievement"
		"func_physbox"
		"func_platrot"
		"func_proprrespawnzone"
		"func_regenerate"
		"func_respawnflag"
		"func_respawnroom"
		"func_respawnroomvisualizer"
		"func_forcefield"
		"func_rot_button"
		"func_rotation"
		"func_tanktrain"
		"func_tfbot_hint"
		"func_trackautochange"
		"func_trackchange"
		"func_tracktrain"
		"func_traincontrols"
		"game_zone_player"
		"momentary_rot_button"
		"trigger_autosave"
		"trigger_capture_area"
		"trigger_changelevel"
		"trigger_gravity"
		"trigger_hurt"
		"trigger_impact"
		"trigger_look"
		"trigger_multiple"
		"trigger_once"
		"trigger_playermovement"
		"trigger_proximity"
		"trigger_push"
		"trigger_remove"
		"trigger_serverragdoll"
		"trigger_stun"
		"trigger_teleport"
		"trigger_transition"
		"trigger_bot_gate"
		"trigger_add_or_remove_tf_player_attributes"
		"trigger_particle"
		"trigger_ignite"
		"trigger_catapult"
		"trigger_player_respawn_override"
		"trigger_remove_tf_player_condition"
		"trigger_add_tf_player_condition"
		"trigger_passtime_ball"
		"func_passtime_no_ball_zone"
		"func_passtime_goalie_zone"
		"func_passtime_goal"
		"lfe_building_manager"
		"lfe_logic_coop"
		"lfe_logic_blucoop"
		"lfe_logic_date"
		"lfe_logic_playerteleport"
		"lfe_logic_vs"
		"lfe_logic_horde"
		"lfe_vehiclespawner"
		"lfe_weapon_custom"
		"lfe_weapon_progress"
		"lfe_team_weapon_manager"
		"filter_lfe_npc_has_squad"
	]

	"Perf"
	[
		"func_areaportal"
		"func_areaportalwindow"
		"func_occluder"
		"func_viscluster"
		"water_lod_control"
	]

	"Sound"
	[
		"ambient_generic"
		"env_microphone"
		"env_soundscape"
		"env_soundscape_proxy"
		"env_soundscape_triggerable"
		"info_target"
		"trigger_soundscape"
	]
]

//-------------------------------------------------------------------------
//
// Base Extra
//
//-------------------------------------------------------------------------

@PointClass base(Targetname) iconsprite("editor/info_node_link.vmt") line(255 255 255, nodeid, StartNode, nodeid, EndNode) = info_node_link :
	"A dynamic connection between two navigation nodes. You specify the node IDs of the start and end nodes, and then you can use entity I/O " +
	"to turn on and off the connection. This could be used to create or destroy a connection in the nodegraph because of some event in your map " +
	"(a bridge being created/destroyed, etc)."
[
    StartNode(node_dest) : "Start node ID" : : "The node ID of one end of the node connection."
    EndNode(node_dest) : "End node ID" : : "The node ID of one end of the node connection."
	initialstate(choices) : "Initial State" : 1 =
	[
		0 : "Off"
		1 : "On"
	]

	linktype(choices) : "Type of Connection" : 1 =
	[
		1 : "Ground"
		2 : "Jump"
		4 : "Fly"
		8 : "Climb"
	]
	AllowUse(string) : "Allow Pass When Off" : : "Entity or class to allow passage even when node is off"
	InvertAllow(choices) : "Invert exclusion rules" : 0 : "Allowed entity is the only entity NOT allowed when this is set to 'yes'" =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags( Flags ) =
	[
		1 : "Force human connect" : 0
		2 : "Force small_centered connect" : 0
		4 : "Force wide_human connect" : 0
		8 : "Force tiny connect" : 0
		16 : "Force wide_short connect" : 0
		32 : "Force medium connect" : 0
		64 : "Force tiny_centered connect" : 0
		128 : "Force large connect" : 0
		256 : "Force large_centered connect" : 0
		512 : "Force medium_tall connect" : 0
	]

	// Inputs
	input TurnOn(void) : "Turn the link on."
	input TurnOff(void) : "Turn the link off."
]

@PointClass wirebox(mins, maxs) base(Targetname) iconsprite("editor/info_node_link.vmt") = info_node_link_controller :
	"An entity that controls all connections between nodes that intersect the controller's volume. "+
	"This allows for mass enabling/disabling of all node connections through a volume."
[
	mins(vector) : "Mins" : "-8 -32 -36"
	maxs(vector) : "Maxs" : "8 32 36"

	initialstate(choices) : "Initial State" : 1 =
	[
		0 : "Off"
		1 : "On"
	]
	useairlinkradius(choices) : "Use Larger Radius (for air links)" : 0 : "Set this to 'Yes' if this controller is intended to control air links. "+
		"Air links connect using a larger search radius so leaving this at 'No' might miss some air links." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	AllowUse(string) : "Allow Pass When Off" : : "Entity or class to allow passage even when node is off"
	InvertAllow(choices) : "Invert exclusion rules" : 0 : "Allowed entity is the only entity NOT allowed when this is set to 'yes'" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input TurnOn(void) : "Turn the link on."
	input TurnOff(void) : "Turn the link off."
	input SetAllowed(string) : "Change the allowed pass when off"
	input SetInvert(integer) : "Change the invert exclusion rule"
]


@PointClass base(Targetname) iconsprite("editor/logic_autosave.vmt") = logic_autosave :
	"An entity that is used to force an autosave. Mostly useless in LF:E."
[
	NewLevelUnit(choices) : "Force New Level Unit" : 0 : "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	MinimumHitPoints(integer): "Minimum Hit Points" : 0 : "Don't save dangerous when player has less than this many hitpoints."
	MinHitPointsToCommit(integer) : "Minimum Hit Points to Commit" : 0 : "Minimum hitpoints required to commit to save. The save will be made if you have at least Minimum Hit Points, but when the autosave timer expires, the autosave is only kept if you have at least Min Hitpoints to Commit."

	// Inputs
	input Save(void) : "Force an autosave."
	input SaveDangerous(float) : "Force an autosave as autosavedangerous.sav. If the player is alive after the passed number of seconds it replaces the standard auto save."
	input SetMinHitpointsThreshold(integer) : "Set MinimumHitPoints to this."
]

@PointClass color(0 0 255) size(-1 -1 -64, 1 1 -8) sidelist(sides) iconsprite("editor/env_cubemap.vmt") = env_cubemap : 
	"An entity that creates a sample point for the Cubic Environment Map."
[
	cubemapsize(choices) : "Cubemap Size" : 0 =
	[
		0 : "Default"
		1 : "1x1"
		2 : "2x2"
		3 : "4x4"
		4 : "8x8"
		5 : "16x16"
		6 : "32x32"
		7 : "64x64"
		8 : "128x128"
		9 : "256x256"
		10 : "512x512"
		11 : "1024x1024"
		12 : "2048x2048"
		13 : "4096x4096"
	]
	sides(sidelist) : "Brush faces": : "(Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Use CTRL while clicking to add or remove from the selection."
]

@PointClass base(BaseSpeaker) iconsprite("editor/env_speaker.vmt") = env_speaker : "Announcement Speaker"
[
]

@PointClass base(Targetname) iconsprite("editor/env_hudhint") = env_hudhint : 
	"An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command."
[
	spawnflags(flags) =
	[
		1: "All Players" : 0
	]

	message(string) : "Hint Text (localized)" : "" : "This should be set to match the desired HUD hint entry in the hl2\resource\valve_english.txt."

	// Inputs
	input ShowHudHint(void) : "Shows the hint message."
	input HideHudHint(void) : "Hides the hint message."
]

@PointClass base(Angles) size(-8 -8 -8, 8 8 8) = sky_camera : //iconsprite("editor-puddy/sky_camera")//the reason on why not use the iconsprite is because it scales with the scale keyvalue :(
	"An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be."
[
	scale(integer) : "3D Skybox scale" : 16 : "Scale of the skybox."
	fogenable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogblend(choices) : "Fog Blend" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	use_angles(choices) : "Use Angles for Fog Dir" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Dir" : "1 0 0"
	fogstart(string) : "Fog Start" : "500.0" : "Distance at which the skybox fog should start."
	fogend(string) : "Fog End" : "2000.0" : "Distance at which the skybox fog should be fully opaque."
]

@PointClass halfgridsnap base(TwoObjectPhysics) iconsprite("editor/phys_hinge") = phys_hinge : 
	"A physically simulated hinge. Use the helper to define the axis of rotation."
[
	hingefriction(float) : "Friction" : "0" : "Resistance/friction in the hinge"
	hingeaxis(vecline) : "Hinge Axis"
	SystemLoadScale(float) : "Load Scale" : "1" : "Scale of the load connected to this hinge (1=just the objects directly connected)"
	
	// Inputs
	input SetAngularVelocity(float) : "Set angular velocity around the hinge (motor) in deg/sec"
	

	
	//// Episodic only -- for now.
	
	minSoundThreshold(float) : "Minimum Sound Velocity" : "6" : "When travelling below this many units/sec, will not play any sound."
	maxSoundThreshold(float) : "Full Sound Velocity" : "80" : "When travelling at this speed or above, will play sound at full volume."
	slidesoundfwd(sound) : "Travel sound (forward)" : "" : "Play this sound when travelling forward on helper axis"
	slidesoundback(sound) : "Travel sound (backward)" : "" : "Play this sound when travelling backward on helper axis"
	
	reversalsoundthresholdSmall(float) : "Reversal sound threshold (small)" : "0" : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound." 
	reversalsoundthresholdMedium(float) : "Reversal sound threshold (medium)" : "0" : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound."
	reversalsoundthresholdLarge(float) : "Reversal sound threshold (large)" : "0" : "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound."
	
	reversalsoundSmall(sound) : "Reversal sound (small)" : "" : "Play this sound when making a hard reverse over the small threshold but less than medium"
	reversalsoundMedium(sound) : "Reversal sound (medium)" : "" : "Play this sound when making a hard reverse over the medium threshold but less than large"
	reversalsoundLarge(sound) : "Reversal sound (large)" : "" : "Play this sound when making a hard reverse over the large threshold"
]

@PointClass base(Targetname) iconsprite("editor/logic_branch_listener")= logic_branch_listener :
	"Contains a list of logic_branch entities and fires outputs when the state of any of the logic_branches changes.\n\n"+
	"This entity is used to fire an event when a set of conditions are all satisfied."
[
	Branch01(target_destination) : "Logic Branch 01" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch02(target_destination) : "Logic Branch 02" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch03(target_destination) : "Logic Branch 03" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch04(target_destination) : "Logic Branch 04" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch05(target_destination) : "Logic Branch 05" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch06(target_destination) : "Logic Branch 06" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch07(target_destination) : "Logic Branch 07" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch08(target_destination) : "Logic Branch 08" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch09(target_destination) : "Logic Branch 09" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch10(target_destination) : "Logic Branch 10" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch11(target_destination) : "Logic Branch 11" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch12(target_destination) : "Logic Branch 12" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch13(target_destination) : "Logic Branch 13" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch14(target_destination) : "Logic Branch 14" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch15(target_destination) : "Logic Branch 15" : : "The name of one or more logic_branches (wildcards allowed)."
	Branch16(target_destination) : "Logic Branch 16" : : "The name of one or more logic_branches (wildcards allowed)."

	input Test(void) : "Tests the state of all the logic_branches in the list and fires the appropriate output."

	output OnAllTrue(void) : "Fired when all the logic_branches in the list become true."
	output OnAllFalse(void) : "Fired when all the logic_branches in the list become false."
	output OnMixed(void) : "Fired when one of the logic branches in the list changes, but some are true and some are false."
]

@BaseClass = DamageTypeP
[
	damagetype(choices) : "Damage Type" : 0 : "Damage types can be combined to have more than one effect. Simply add the numeric values for the desired types together and use the resulting number. (16 [train] + 64 [blast] = 80: gibbing train death)" =
	[
		0 : "GENERIC"
		1 : "Crush"
		2 : "Bullet"
		4 : "Slash"
		8 : "Burn"
		16 : "Train"
		32 : "Fall"
		64 : "Blast (turn gibs)"
		128 : "Club"
		256 : "Shock"
		512 : "Sonic"
		1024 : "Energy Beam"
		2048 : "Physics Force"
		4096 : "Never Gib"
		8192 : "Always Gib"
		16384: "Drown (blue faded)"
		32768: "Paralyze"
		65536 : "Sawblade"
		131072 : "Poison"
		262144 : "Radiation"
		524288 : "Drowning recovery"
		1048576 : "Critical"
		2097152 : "Slow burning"
		4194304 : "Slowfreeze"
		8388608 : "Gravity Gun"
		16777216 : "Ignite (no after-burn damage)"
		33554432 : "Airboat"
		67108864 : "Dissolve"
		134217728 : "Underwater is Invincible"
		268435456 : "Being on fire"
		536870912 : "Shotguns"
	]
]

@BaseClass = Targetname 
[ 
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	effects(string) : "Effect flags" : "0" : "For configuring visual effects."
	//gravity(string) : "Gravity" : "1" : "1 = normal 0 = no gravity"
	
	// Inputs
	input Kill(void) : "Removes this entity from the world."
	input KillHierarchy(void) : "Removes this entity and all its children from the world."
	input AddOutput(string) : "Adds an entity I/O connection to this entity. Format: <output name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fire (-1 == infinite)>. Very dangerous, use with care."
	input FireUser1(void) : "Causes this entity's OnUser1 output to be fired."
	input FireUser2(void) : "Causes this entity's OnUser2 output to be fired."
	input FireUser3(void) : "Causes this entity's OnUser3 output to be fired."
	input FireUser4(void) : "Causes this entity's OnUser4 output to be fired."

	input SetMoveType(integer) : "Changes the entity's Move Type."
	// MOVETYPE_NONE, MOVETYPE_ISOMETRIC, MOVETYPE_WALK, MOVETYPE_STEP, MOVETYPE_FLY, MOVETYPE_FLYGRAVITY, MOVETYPE_VPHYSICS, 
	// MOVETYPE_PUSH, MOVETYPE_NOCLIP, MOVETYPE_LADDER, MOVETYPE_OBSERVER, MOVETYPE_CUSTOM

	// Outputs
	output OnUser1(void) : "Fired in response to FireUser1 input."
	output OnUser2(void) : "Fired in response to FireUser2 input."
	output OnUser3(void) : "Fired in response to FireUser3 input."
	output OnUser4(void) : "Fired in response to FireUser4 input."
]

@BaseClass = TeamNum
[
	TeamNum(choices) : "Team" : 0 : "Team" =
	[
		0 : "Any"
		2 : "RED/Rebel"
		3 : "BLU/Combine"
		4 : "GRN/Zombies"
		5 : "YLW/Antlions"
	]
	input SetTeam(integer) : "Changes the entity's team."
]

@BaseClass = Toggle
[
	// Inputs
	input Toggle(void) : "Toggle the enabled/disabled status of this entity."
]

@BaseClass = FadeDistance
[
	fademindist(float) : "Start Fade Dist" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist)."
	fademaxdist(float) : "End Fade Dist" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out)."
]


@BaseClass = GameType
[
	GameType(choices) : "Game Type" : 0 : "Type of game this flag will be used for." =
	[
		0 : "CTF"
		1 : "Attack/Defend"
		2 : "Territory Control"
		3 : "Invade"
		4 : "King of the Hill"
	]
]

@BaseClass = PlayerTouch
[
	// Outputs
	output OnPlayerTouch(void) : "Sent when the entity is picked up by a player."
]

@BaseClass = Toggle
[
	// Inputs
	input Toggle(void) : "Toggle the enabled/disabled status of this entity."
]

@BaseClass color(0 0 200) base(Targetname, TeamNum, EnableDisable, Toggle, Angles, PlayerTouch) = Item
[
]

@BaseClass color(0 0 200) base(Targetname, Angles, Shadow) sphere(fademindist) sphere(fademaxdist) = HLItem
[
	output OnPlayerTouch(void) : "Fires when the player touches this object"

	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this item. Fires on: Player Touch (whether or not player actually acquires the item), Picked up by +USE, Picked up by Physcannon, Punted by Physcannon."

	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified." +
												 " This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades." +

	spawnflags(Flags) =
	[
		1 : "Start Constrained" : 0
	]
]

@BaseClass = Condition
[
	condition(choices) : "Condition" : -1 : "The condition to use." =
	[
		-1 : "TF_COND_INVALID"
		0 : "TF_COND_AIMING"		// Sniper aiming, Heavy minigun.
		1 : "TF_COND_ZOOMED"
		2 : "TF_COND_DISGUISING"
		3 : "TF_COND_DISGUISED"
		4 : "TF_COND_STEALTHED"		// Spy specific
		5 : "TF_COND_INVULNERABLE"
		6 : "TF_COND_TELEPORTED"
		7 : "TF_COND_TAUNTING"
		8 : "TF_COND_INVULNERABLE_WEARINGOFF"
		9 : "TF_COND_STEALTHED_BLINK"
		10 : "TF_COND_SELECTED_TO_TELEPORT"
		11 : "TF_COND_CRITBOOSTED"	// DO NOT RE-USE THIS -- THIS IS FOR KRITZKRIEG AND REVENGE CRITS ONLY
		12 : "TF_COND_TMPDAMAGEBONUS"
		13 : "TF_COND_FEIGN_DEATH"
		14 : "TF_COND_PHASE"
		15 : "TF_COND_STUNNED"		// Any type of stun. Check iStunFlags for more info.
		16 : "TF_COND_OFFENSEBUFF"
		17 : "TF_COND_SHIELD_CHARGE"
		18 : "TF_COND_DEMO_BUFF"
		19 : "TF_COND_ENERGY_BUFF"
		20 : "TF_COND_RADIUSHEAL"
		21 : "TF_COND_HEALTH_BUFF"
		22 : "TF_COND_BURNING"
		23 : "TF_COND_HEALTH_OVERHEALED"
		24 : "TF_COND_URINE"
		25 : "TF_COND_BLEEDING"
		26 : "TF_COND_DEFENSEBUFF"	// 35% defense! No crit damage.
		27 : "TF_COND_MAD_MILK"
		28 : "TF_COND_MEGAHEAL"
		29 : "TF_COND_REGENONDAMAGEBUFF"
		30 : "TF_COND_MARKEDFORDEATH"
		31 : "TF_COND_NOHEALINGDAMAGEBUFF"
		32 : "TF_COND_SPEED_BOOST"		// = 32
		33 : "TF_COND_CRITBOOSTED_PUMPKIN"
		34 : "TF_COND_CRITBOOSTED_USER_BUFF"
		35 : "TF_COND_CRITBOOSTED_DEMO_CHARGE"
		36 : "TF_COND_CRITBOOSTED_HYPE"
		37 : "TF_COND_CRITBOOSTED_FIRST_BLOOD"	// arena mode first blood
		38 : "TF_COND_CRITBOOSTED_BONUS_TIME"
		39 : "TF_COND_CRITBOOSTED_CTF_CAPTURE"
		40 : "TF_COND_CRITBOOSTED_ON_KILL"		// KGB etc.
		41 : "TF_COND_CANNOT_SWITCH_FROM_MELEE"
		42 : "TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK"	// 35% defense! Still damaged by crits.
		43 : "TF_COND_REPROGRAMMED"				// Bots only
		44 : "TF_COND_CRITBOOSTED_RAGE_BUFF"
		45 : "TF_COND_DEFENSEBUFF_HIGH"			// 75% defense! Still damaged by crits.
		46 : "TF_COND_SNIPERCHARGE_RAGE_BUFF"		// Sniper Rage - Charge time speed up
		47 : "TF_COND_DISGUISE_WEARINGOFF"		// Applied for half-second post-disguise
		48 : "TF_COND_MARKEDFORDEATH_SILENT"		// Sans sound
		49 : "TF_COND_DISGUISED_AS_DISPENSER"
		50 : "TF_COND_SAPPED"						// Bots only
		51 : "TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED"
		52 : "TF_COND_INVULNERABLE_USER_BUFF"
		53 : "TF_COND_HALLOWEEN_BOMB_HEAD"
		54 : "TF_COND_HALLOWEEN_THRILLER"
		55 : "TF_COND_RADIUSHEAL_ON_DAMAGE"
		56 : "TF_COND_CRITBOOSTED_CARD_EFFECT"
		57 : "TF_COND_INVULNERABLE_CARD_EFFECT"
		58 : "TF_COND_MEDIGUN_UBER_BULLET_RESIST"
		59 : "TF_COND_MEDIGUN_UBER_BLAST_RESIST"
		60 : "TF_COND_MEDIGUN_UBER_FIRE_RESIST"
		61 : "TF_COND_MEDIGUN_SMALL_BULLET_RESIST"
		62 : "TF_COND_MEDIGUN_SMALL_BLAST_RESIST"
		63 : "TF_COND_MEDIGUN_SMALL_FIRE_RESIST"
		64 : "TF_COND_STEALTHED_USER_BUFF"		// Any class can have this
		65 : "TF_COND_MEDIGUN_DEBUFF"
		66 : "TF_COND_STEALTHED_USER_BUFF_FADING"
		67 : "TF_COND_BULLET_IMMUNE"
		68 : "TF_COND_BLAST_IMMUNE"
		69 : "TF_COND_FIRE_IMMUNE"
		70 : "TF_COND_PREVENT_DEATH"
		71 : "TF_COND_MVM_BOT_STUN_RADIOWAVE" // Bots only
		72 : "TF_COND_HALLOWEEN_SPEED_BOOST"
		73 : "TF_COND_HALLOWEEN_QUICK_HEAL"
		74 : "TF_COND_HALLOWEEN_GIANT"
		75 : "TF_COND_HALLOWEEN_TINY"
		76 : "TF_COND_HALLOWEEN_IN_HELL"
		77 : "TF_COND_HALLOWEEN_GHOST_MODE"
		78 : "TF_COND_MINICRITBOOSTED_ON_KILL"
		79 : "TF_COND_OBSCURED_SMOKE"
		80 : "TF_COND_PARACHUTE_DEPLOYED"
		81 : "TF_COND_BLASTJUMPING"
		82 : "TF_COND_HALLOWEEN_KART"
		83 : "TF_COND_HALLOWEEN_KART_DASH"
		84 : "TF_COND_BALLOON_HEAD"
		85 : "TF_COND_MELEE_ONLY"
		86 : "TF_COND_SWIMMING_CURSE"
		87 : "TF_COND_FREEZE_INPUT"
		88 : "TF_COND_HALLOWEEN_KART_CAGE"
		90 : "TF_COND_RUNE_STRENGTH"
		91 : "TF_COND_RUNE_HASTE"
		92 : "TF_COND_RUNE_REGEN"
		93 : "TF_COND_RUNE_RESIST"
		94 : "TF_COND_RUNE_VAMPIRE"
		95 : "TF_COND_RUNE_WARLOCK"
		96 : "TF_COND_RUNE_PRECISION"
		97 : "TF_COND_RUNE_AGILITY"
		98 : "TF_COND_GRAPPLINGHOOK"
		99 : "TF_COND_GRAPPLINGHOOK_SAFEFALL"
		100 : "TF_COND_GRAPPLINGHOOK_LATCHED"
		101 : "TF_COND_GRAPPLINGHOOK_BLEEDING"
		102 : "TF_COND_AFTERBURN_IMMUNE"
		103 : "TF_COND_RUNE_KNOCKOUT"
		104 : "TF_COND_RUNE_IMBALANCE"
		105 : "TF_COND_CRITBOOSTED_RUNE_TEMP"
		106 : "TF_COND_PASSTIME_INTERCEPTION"
		107 : "TF_COND_SWIMMING_NO_EFFECTS"
		108 : "TF_COND_PURGATORY"
		109 : "TF_COND_RUNE_KING"
		110 : "TF_COND_RUNE_PLAGUE"
		111 : "TF_COND_RUNE_SUPERNOVA"
		112 : "TF_COND_PLAGUE"
		113 : "TF_COND_KING_BUFFED"
		114 : "TF_COND_TEAM_GLOWS"
		115 : "TF_COND_KNOCKED_INTO_AIR"
		116 : "TF_COND_COMPETITIVE_WINNER"
		117 : "TF_COND_COMPETITIVE_LOSER"
		118 : "TF_COND_HEALING_DEBUFF"
		119 : "TF_COND_PASSTIME_PENALTY_DEBUFF"
		120 : "TF_COND_GRAPPLED_TO_PLAYER"
		121 : "TF_COND_GRAPPLED_BY_PLAYER"
		122 : "TF_COND_PARACHUTE_DEPLOYED"
		123 : "TF_COND_GAS"
		124 : "TF_COND_BURNING_PYRO"
		125 : "TF_COND_ROCKETPACK"
		126 : "TF_COND_LOST_FOOTING"
		127 : "TF_COND_AIR_CURRENT"
		128 : "TF_COND_SLOWED"
	]
]

@BaseClass = PAttributes
[
	attribute_name(choices) : "Attribute" : 1 : "The Attribute name" =
	[
		"damage penalty" :		"??? damage penalty"
		"damage bonus" :		"+??? damage bonus"
		"clip size penalty" :	"??? clip size"
		"clip size bonus" :		"+??? clip size"
		"fire rate penalty" :	"??? slower firing speed"
		"fire rate bonus" :		"+??? faster firing speed"
		"heal rate penalty" :	"??? heal rate"
		"heal rate bonus" :		"+??? heal rate"
		"ubercharge rate penalty" :		"??? UberCharge rate"
		"ubercharge rate bonus" :		"+??? UberCharge rate"
		"overheal bonus" :				"+??? max overheal"
		"overheal decay penalty" :		"??? shorter overheal time"
		"overheal decay bonus" :		"+??? longer overheal time"
		"overheal decay disabled" :		"Overheal bonus doesn't decay"
		"crit mod disabled" :			"No random critical hits"
		"heal on hit for rapidfire" :	"On Hit: +??? health"
		"add uber charge on hit" :		"On Hit: ??? UberCharge added"
		"medigun charge is crit boost" :		"UberCharge grants 100% critical chance"
		"tmp dmgbuff on hit" :			"On Hit: +??? damage bonus"
		"crit vs burning players" :		"100% critical hit vs burning players"
		"dmg penalty vs nonburning" :	"??? damage vs non-burning players"
		"no crit vs nonburning" :		"No critical hits vs non-burning players"
		"mod flamethrower push" :		"No compression blast"
		"mod flamethrower back crit" :		"100% critical hits from behind"
		"hidden secondary max ammo penalty" :		"hidden secondary max ammo penalty"
		"max health additive bonus" :		"+??? max health on wearer"
		"alt-fire disabled" :		"Alt-Fire Disabled"
		"crit mod disabled hidden" :		"No random critical hits"
		"alt-fire is vampire" :		"Alt-Fire Is Vampire"
		"fists have radial buff" :		"On Kill: +50 health on nearby teammates"
		"critboost on kill" :		"On Kill: ??? seconds of 100% critical chance"
		"slow enemy on hit" :		"On Hit: ??? chance to slow target"
		"set cloak is feign death" :		"Cloak Type: Feign Death"
		"mult cloak meter consume rate" :		"+??? cloak drain rate"
		"mult cloak meter regen rate" :		"+??? cloak regen rate"
		"spread penalty" :		"??? less accurate"
		"hidden primary max ammo bonus" :		"hidden primary max ammo bonusn"
		"mod bat launches balls" :		"Alt-Fire: Launches a ball that stuns opponents"
		"dmg penalty vs nonstunned" :		"??? damage vs non-stunned players"
		"zoom speed mod disabled" :		"No move speed penalty from zoom"
		"sniper charge per sec" :		"+??? charge rate"
		"sniper no headshots" :		"No headshots"
		"scattergun no reload single" :		"scattergun no reload single"
		"scattergun has knockback" :		"Knockback on the target and shooter"
		"bullets per shot bonus" :		"+??? bullets per shot"
		"sniper zoom penalty" :		"??? zoom reduction"
		"sniper no charge" :		"No zoom or damage charge"
		"set cloak is movement based" :		"Cloak Type: Motion Sensitive"
		"no double jump" :		"Disables double jump"
		"absorb damage while cloaked" :		"Absorbs ??? damage while cloaked"
		"revolver use hit locations" :		"Crits on headshot"
		"backstab shield" :		"Blocks a single backstab attempt"
		"fire retardant" :		"Wearer cannot ignite"
		"move speed penalty" :		"??? slower move speed on wearer"
		"obsolete ammo penalty" :		"obsolete ammo penalty"
		"jarate description" :		"Coated enemies take mini-crits"
		"health regen" :		"+??? health regenerated per second on wearer"
		"self dmg push force increased" :		"+??? self damage force"
		"self dmg push force decreased" :		"??? self damage force"
		"dmg taken from fire reduced" :		"+??? fire damage resistance on wearer"
		"dmg taken from fire increased" :		"??? fire damage vulnerability on wearer"
		"dmg taken from crit reduced" :		"+??? critical hit damage resistance on wearer"
		"dmg taken from crit increased" :		"??? critical hit damage vulnerability on wearer"
		"dmg taken from blast reduced" :		"+??? explosive damage resistance on wearer"
		"dmg taken from blast increased" :		"??? explosive damage vulnerability on wearer"
		"dmg taken from bullets reduced" :		"+??? bullet damage resistance on wearer"
		"dmg taken from bullets increased" :		"??? bullet damage vulnerability on wearer"
		"increase player capture value" :		"+??? capture rate on wearer"
		"health from healers reduced" :		"??? health from healers on wearer"
		"health from healers increased" :		"+??? health from healers on wearer"
		"weapon burn dmg increased" :		"+??? afterburn damage bonus"
		"weapon burn dmg reduced" :		"??? afterburn damage penalty"
		"weapon burn time increased" :		"+??? afterburn duration"
		"weapon burn time reduced" :		"??? afterburn duration"
		"aiming movespeed increased" :		"+??? faster move speed while deployed"
		"maxammo primary increased" :		"+??? max primary ammo on wearer"
		"maxammo primary reduced" :		"??? max primary ammo on wearer"
		"maxammo secondary increased" :		"+??? max secondary ammo on wearer"
		"maxammo secondary reduced" :		"??? max secondary ammo on wearer"
		"maxammo metal increased" :		"+??? max metal on wearer"
		"maxammo metal reduced" :		"??? max metal on wearer"
		"cloak consume rate increased" :		"-??? cloak duration"
		"cloak consume rate decreased" :		"+??? cloak duration"
		"cloak regen rate increased" :		"+??? cloak regeneration rate"
		"cloak regen rate decreased" :		"??? cloak regeneration rate"
		"minigun spinup time increased" :		"??? slower spin up time"
		"minigun spinup time decreased" :		"??? faster spin up time"
		"max pipebombs increased" :		"+??? max pipebombs out"
		"max pipebombs decreased" :		"??? max pipebombs out"
		"SRifle Charge rate increased" :		"??? faster power charge"
		"SRifle Charge rate decreased" :		"??? slower power charge"
		"Construction rate increased" :		"??? faster construction rate"
		"Construction rate decreased" :		"??? slower construction rate"
		"Repair rate increased" :		"??? faster repair rate"
		"Repair rate decreased" :		"??? slower repair rate"
		"Reload time increased" :		"??? slower reload time"
		"Reload time decreased" :		"??? faster reload time"
		"selfdmg on hit for rapidfire" :		"On Hit: ??? health"
		"Blast radius increased" :		"+??? explosion radius"
		"Blast radius decreased" :		"??? explosion radius"
		"Projectile range increased" :		"+??? projectile range"
		"Projectile range decreased" :		"??? projectile range"
		"Projectile speed increased" :		"+??? projectile speed"
		"Projectile speed decreased" :		"??? projectile speed"
		"overheal penalty" :		"??? max overheal"
		"weapon spread bonus" :		"??? more accurate"
		"move speed bonus" :		"+??? faster move speed on wearer"
		"health from packs increased" :		"+??? health from packs on wearer"
		"health from packs decreased" :		"??? health from packs on wearer"
		"heal on hit for slowfire" :		"On Hit: +??? health"
		"selfdmg on hit for slowfire" :		"On Hit: ??? health"
		"ammo regen" :		"+??? ammo regenerated every 5 seconds on wearer"
		"metal regen" :		"+??? metal regenerated every 5 seconds on wearer"
		"mod mini-crit airborne" :		"Mini-crits targets launched airborne by explosions"
		"mod shovel damage boost" :		"Damage increases as the user becomes injured"
		"mod soldier buff type" :		"mod soldier buff type"
		"dmg falloff increased" :		"Attrib Damage Falloff Increased"
		"dmg falloff decreased" :		"??? splash damage fall off"
		"sticky detonate mode" :		"Detonates stickybombs near the crosshair and directly under your feet"
		"sticky arm time penalty" :		"??? sec slower bomb arm time"
		"stickies detonate stickies" :		"Able to destroy enemy stickybombs"
		"mod demo buff type" :		"mod demo buff type"
		"speed boost when active" :		"??? speed boost while active weapon"
		"mod wrench builds minisentry" :		"Replaces the Sentry with a fast building Mini-Sentry"
		"max health additive penalty" :		"??? max health on wearer"
		"sticky arm time bonus" :		"??? sec faster bomb arm time"
		"sticky air burst mode" :		"Launched bombs shatter on surfaces"
		"provide on active" :		"When weapon is active:"
		"health drain" :		"??? health drained per second on wearer"
		"medic regen bonus" :		"+??? natural regen rate"
		"medic regen penalty" :		"-??? natural regen rate"
		"community description" :		"Given to valuable Community Contributors"
		"soldier model index" :		"Medal no. ???"
		"attach particle effect" :		"Effect: ???"
		"rocket jump damage reduction" :		"??? blast damage from rocket jumps"
		"mod sentry killed revenge" :		"When your sentry is destroyed you"
		"dmg bonus vs buildings" :		"??? damage vs buildings"
		"dmg penalty vs players" :		"??? damage vs players"
		"lunchbox adds maxhealth bonus" :		"Adds +50 max health for 30 seconds"
		"hidden maxhealth non buffed" :		"+??? max health on wearer"
		"selfmade description" :		"I made this!"
		"set item tint RGB" :		"Item tint color code: ???"
		"custom employee number" :		"Hire Date: ???"
		"lunchbox adds minicrits" :		"Sets weapon mode #???"
		"taunt is highfive" :		"taunt is highfive"
		"damage applies to sappers" :		"Damage removes Sappers"
		"Wrench index" :		"Wrench no. ???"
		"building cost reduction" :		"??? metal reduction in building cost"
		"bleeding duration" :		"On Hit: Bleed for ??? seconds"
		"turn to gold" :		"Imbued with an ancient power"
		"DEPRECATED socketed item definition id DEPRECATED" :		"Socket"
		"custom texture lo" :		"custom texture lo"
		"cannot trade" :		"Not Tradable"
		"disguise on backstab" :		"Upon a successful backstab against a human target, you rapidly disguise as your victim"
		"cannot disguise" :		"Wearer cannot disguise"
		"silent killer" :		"Silent Killer: No attack noise from backstabs"
		"disguise speed penalty" :		"??? sec slower disguise speed"
		"add cloak on kill" :		"+??? cloak on kill"
		"cloak blink time penalty" :		"??? sec longer cloak blink time"
		"quiet unstealth" :		"Reduced decloak sound volume"
		"flame size penalty" :		"??? less flame spread area"
		"flame size bonus" :		"+??? more flame spread area"
		"flame life penalty" :		"??? less flame distance"
		"flame life bonus" :		"+??? more flame distance"
		"charged airblast" :		"Airblast can now be charged, which will push enemies further"
		"add cloak on hit" :		"+??? cloak on hit"
		"disguise damage reduction" :		"Disguise Damage Reduction"
		"disguise no burn" :		"Immune to fire damage while disguised"
		"dmg from sentry reduced" :		"+??? sentry damage resistance on wearer"
		"airblast cost increased" :		"+??? airblast cost"
		"airblast cost decreased" :		"??? airblast cost"
		"purchased" :		"Purchased: Not Tradable or Usable in Crafting"
		"flame ammopersec increased" :		"+??? flamethrower ammo consumed per second"
		"flame ammopersec decreased" :		"??? flamethrower ammo consumed per second"
		"jarate duration" :		"On Hit: Jarate applied to target for ??? seconds"
		"no death from headshots" :		"The wearer cannot be killed by headshots"
		"deploy time increased" :		"??? longer weapon switch"
		"deploy time decreased" :		"??? faster weapon switch"
		"minicrits become crits" :		"Crits whenever it would normally mini-crit"
		"heal on kill" :		"+??? health restored on kill"
		"no self blast dmg" :		"No self inflicted blast damage taken"
		"slow enemy on hit major" :		"On Hit: Slow target movement by 40% for ???s"
		"aiming movespeed decreased" :		"??? slower move speed while deployed"
		"duel loser account id" :		"Duel Loser Account ID"
		"event date" :				"Date Received: ???"
		"gifter account id" :		"Gift from: ???"
		"set supply crate series" :		"Crate Series #???"
		"preserve ubercharge" :		"On death up to ??? of your stored"
		"elevate quality" :			"elevate quality"
		"active health regen" :		"+??? health regenerated per second on wearer"
		"active health degen" :		"??? health drained per second on wearer"
		"referenced item id low" :		"referenced item id low"
		"referenced item id high" :		"eferenced item id high"
		"referenced item def" :		"Contains: ???"
		"always tradable" :		"Always Tradable"
		"noise maker" :		"Noise Maker"
		"halloween item" :		"This is a special Halloween ??? item"
		"collection bits" :		"collection bits"
		"fires healing bolts" :		"Fires special bolts that heal teammates and deal damage based on distance traveled"
		"enables aoe heal" :		"On Taunt: Applies a healing effect to all nearby teammates"
		"gesture speed increase" :		"+??? faster taunt speed on wearer"
		"charge time increased" :		"??? sec increase in charge duration"
		"drop health pack on kill" :		"On Kill: A small health pack is dropped"
		"hit self on miss" :		"On Miss: Hit yourself. Idiot."
		"dmg from ranged reduced" :		"??? damage from ranged sources while active"
		"dmg from melee increased" :		"+??? damage from melee sources while active"
		"blast dmg to self increased" :		"+??? damage to self"
		"Set DamageType Ignite" :		"On Hit: target is engulfed in flames"
		"minicrit vs burning player" :		"100% minicrits vs burning players"
		"paint effect" :		"paint effect"
		"tradable after date" :		"Tradable After: ???"
		"force level display" :		"Force level display"
		"random level curve replacement" :		"Random level curve replacement"
		"kill eater" :		"Kill Eater"
		"apply z velocity on damage" :		"apply z velocity on damage"
		"apply look velocity on damage" :		"apply look velocity on damage"
		"sanguisuge" :		"On Backstab: Absorbs the health from your victim."
		"mark for death" :		"On Hit: One target at a time is marked for death, causing all damage taken to be mini-crits"
		"decapitate type" :		"decapitate type"
		"restore health on kill" :		"On Kill: Restores you to ??? health"
		"mult decloak rate" :		"Decloak Rate"
		"mult sniper charge after bodyshot" :		"On Scoped Bodyshot: Rifle charge rate increased by ???"
		"mult sniper charge after miss" :		"On Scoped Miss: Rifle charge rate decreased by ???"
		"dmg bonus while half dead" :		"??? increase in damage when health <50% of max"
		"dmg penalty while half alive" :		"??? decrease in damage when health >50% of max"
		"honorbound" :		"Honorbound: Once drawn cannot be sheathed until it kills."
		"custom texture hi" :		"custom texture hi"
		"makers mark id" :		"Crafted by ???"
		"unique craft index" :		"unique craft index"
		"mod medic killed revenge" :		"When the medic healing you is killed you"
		"medigun charge is megaheal" :		"UberCharge increases healing by 300% and grants immunity to movement-impairing effects"
		"mod medic killed minicrit boost" :		"When the medic healing you is killed"
		"mod medic healed damage bonus" :		"While a medic is healing you,"
		"mod medic healed deploy time penalty" :		"While not being healed by a medic,"
		"mod shovel speed boost" :		"Move speed increases as the user becomes injured"
		"mod weapon blocks healing" :		"Blocks healing while in use"
		"mult sniper charge after headshot" :		"On Scoped Headshot: Rifle charge rate increased by ???"
		"minigun no spin sounds" :		"Silent Killer: No barrel spin sound"
		"ubercharge rate bonus for healer" :		"+??? UberCharge rate for the medic healing you"
		"reload time decreased while healed" :		"??? faster reload time while being healed"
		"reload time increased hidden" :		"??? slower reload time"
		"mod medic killed marked for death" :		"When the medic healing you is killed"
		"mod rage on hit penalty" :		"??? rage lost on hit"
		"mod rage on hit bonus" :		"??? rage gained on hit"
		"mod rage damage boost" :		"Gains a damage bonus as rage increases, up to ???"
		"mult charge turn control" :		"+??? increase in turning control while charging"
		"no charge impact range" :		"Can deal charge impact damage at any range"
		"charge impact damage increased" :		"+??? increase in charge impact damage"
		"charge recharge rate increased" :		"+??? increase in charge recharge rate"
		"air dash count" :		"Grants Triple Jump: The third jump deals 10 damage when used"
		"speed buff ally" :		"On Hit Ally: Boosts both players' speed for several seconds"
		"damage force reduction" :		"??? reduction in push force taken from damage"
		"mult cloak rate" :		"??? sec increase in time to cloak"
		"airblast functionality flags" :		"airblast functionality flags"
		"airblast pushback scale" :		"+??? airblast push force"
		"mult airblast refire time" :		"mult airblast refire time"
		"airblast vertical pushback scale" :		"irblast vertical pushback scale"
		"ammo becomes health" :		"All ammo collected becomes health"
		"boots falling stomp" :		"Deals 3x falling damage to the player you land on"
		"deflection size multiplier" :		"Deflection Size Multiplier"
		"set item tint RGB 2" :		"Item tint color code: ???"
		"saxxy award category" :		"Winner: ??? %s2"
		"melee bounds multiplier" :		"melee bounds multiplier"
		"melee range multiplier" :		"melee range multiplier"
		"mod mini-crit airborne deploy" :		"Mini-crits airborne targets for ??? seconds after being deployed"
		"projectile penetration" :		"Projectiles penetrate enemy players"
		"mod crit while airborne" :		"Deals crits while the wielder is rocket jumping"
		"mult sniper charge penalty DISPLAY ONLY" :		"Base charge rate decreased by ???"
		"mod see enemy health" :		"Allows you to see enemy health"
		"powerup max charges" :		"Holds a maximum of ??? charges"
		"powerup charges" :		"Currently holds ??? charges"
		"powerup duration" :		"Each charge lasts ??? seconds"
		"critboost" :		"Consumable: Become Crit Boosted for 5 seconds"
		"ubercharge" :		"Consumable: Become Ubercharged for 5 seconds"
		"cancel falling damage" :		"Wearer never takes falling damage"
		"bidirectional teleport" :		"Teleporters can be used in both directions"
		"multiple sentries" :		"MultipleSentries"
		"effect bar recharge rate increased" :		"+??? increase in recharge rate"
		"maxammo grenades1 increased" :		"+??? max misc ammo on wearer"
		"override projectile type" :		"override projectile type"
		"energy weapon no ammo" :		"Does not require ammo"
		"energy weapon charged shot" :		"Alt-Fire: A charged shot that mini-crits"
		"energy weapon penetration" :		"Projectile penetrates enemy targets"
		"energy weapon no hurt building" :		"Deals only 20% damage to buildings"
		"energy weapon no deflect" :		"Projectile cannot be deflected"
		"engy building health bonus" :		"+??? max building health"
		"engy sentry damage bonus" :		"+??? Sentry Gun damage bonus"
		"no crit boost" :		"Cannot be crit boosted"
		"centerfire projectile" :		"centerfire projectile"
		"kill eater score type" :		"kill eater score type"
		"kill eater score type 2" :		"kill eater score type 2"
		"kill eater 2" :		"kill eater 2"
		"has pipboy build interface" :		"has pipboy build interface"
		"sapper kills collect crits" :		"Gives one guaranteed critical hit for each"
		"sniper only fire zoomed" :		"Cannot fire unless zoomed"
		"mod ammo per shot" :		"Per Shot: -??? ammo"
		"add onhit addammo" :		"On Hit: damage dealt is returned as ammo"
		"electrical airblast DISPLAY ONLY" :		"On Fire: Generates an electrical field that destroys"
		"mod use metal ammo type" :		"Uses metal for ammo"
		"expiration date" :		"This item will expire on ???."
		"mod max primary clip override" :		"mod max primary clip override"
		"sniper full charge damage bonus" :		"On Full Charge: +??? damage per shot"
		"sniper fires tracer DISPLAY ONLY" :		"Fires tracer rounds"
		"sniper no headshot without full charge" :		"No headshots when not fully charged"
		"mod no reload DISPLAY ONLY" :		"No reload necessary"
		"sniper penetrate players when charged" :		"On Full Charge: Projectiles penetrate players"
		"crit kill will gib" :		"Killing an enemy with a critical hit will dismember your victim. Painfully."
		"recall" :		"Consumable: Instantly teleport to spawn"
		"unlimited quantity" :		"Unlimited use"
		"disable weapon hiding for animations" :		"disable weapon hiding for animations"
		"applies snare effect" :		"??? movement speed on targets"
		"uber duration bonus" :		"Uber duration increased ??? seconds"
		"refill_ammo" :		"Consumable: Instantly refill all weapon clips and ammo"
		"store sort override DEPRECATED" :		"ore sort override DEPRECATEE"
		"faster reload rate" :		"+??? faster reload time"
		"increase buff duration" :		"+??? buff duration"
		"robo sapper" :		"Increased robot Sapper radius and duration"
		"build rate bonus" :		"+??? faster build speed"
		"taunt is press and hold" :		"taunt is press and hold"
		"attack projectiles" :		"Bullets destroy rockets and grenades in-flight"
		"accuracy scales damage" :		"Accuracy scales damage"
		"currency bonus" :		"+??? bonus currency from packs"
		"increased jump height" :		"+??? greater jump height"
		"building instant upgrade" :		"Consumable: Instantly upgrade all buildings to max level"
		"disable fancy class select anim" :		"disable fancy class select anim"
		"airblast vulnerability multiplier" :		"AirBlast Vulnerability Multipier"
		"override footstep sound set" :		"override footstep sound set"
		"spawn with physics toy" :		"spawn with physics toy"
		"fish damage override" :		"fish damage override"
		"special dsp" :		"special dsp"
		"bombinomicon effect on death" :		"Explode spectacularly on death"
		"clip size bonus upgrade" :		"+??? clip size"
		"hide enemy health" :		"Unable to see enemy health"
		"subtract victim medigun charge on hit" :		"On Hit: Victim loses ??? Medigun charge"
		"subtract victim cloak on hit" :		"On Hit: Victim loses ??? cloak"
		"reveal cloaked victim on hit" :		"On Hit Spy: Reveal cloaked Spy"
		"reveal disguised victim on hit" :		"On Hit Spy: Reveal disguised Spy"
		"jarate backstabber" :		"When backstabbed: Jarate attacker"
		"engy sentry fire rate increased" :		"+??? sentry firing speed"
		"engy sentry radius increased" :		"+??? sentry range"
		"engy dispenser radius increased" :		"+??? dispenser range"
		"mod bat launches ornaments" :		"Alt-Fire: Launches a festive ornament that shatters causing bleed"
		"freeze backstab victim" :		"Backstab turns victim to ice"
		"fire rate penalty HIDDEN" :		"fire rate penalty HIDDEN"
		"energy weapon no drain" :		"energy weapon no drain"
		"ragdolls become ash" :		"agdolls become ash"
		"engy disposable sentries" :		"Build +??? additional disposable-sentry"
		"alt fire teleport to spawn" :		"On Alt-Fire: Teleport to spawn"
		"cannot pick up buildings" :		"Cannot carry buildings"
		"stun enemies wielding same weapon" :		"Stuns enemies who are also wielding this weapon"
		"airblast disabled" :		"No airblast"
		"increase buff duration HIDDEN" :		"increase buff duration HIDDEN"
		"crit forces victim to laugh" :		"Critical hit forces victim to laugh"
		"melts in fire" :		"Melts in fire, regenerates after ??? seconds"
		"damage all connected" :		"All players connected via Medigun beams are hit"
		"become fireproof on hit by fire" :		"On Hit by Fire: Become fireproof for ??? seconds"
		"crit from behind" :		"Always critical hit from behind"
		"crit does no damage" :		"Critical hits do no damage"
		"add jingle to footsteps" :		"Jingle all the way"
		"set icicle knife mode" :		"set icicle knife mode"
		"mod stun waist high airborne" :		"On Hit: If enemy's belt is at or above eye level,"
		"extinguish earns revenge crits" :		"Alt-Fire: Extinguish teammates to gain guaranteed critical hits"
		"burn damage earns rage" :		"All fire damage charges 'Mmmph', activate to refill health and crit for several seconds"
		"tickle enemies wielding same weapon" :		"On Hit: Force enemies to laugh who are also wearing this item"
		"attach particle effect static" :		"Effect: ???"
		"taunt success sound" :		"TauntSoundSuccess"
		"accepted wedding ring account id 1" :		"A perpetual bond of commitment between ???"
		"accepted wedding ring account id 2" :		"and ???, forever and ever and ever. XoXoX"
		"tool escrow until date" :		"Usable After: ???"
		"generate rage on damage" :		"+??? rage on damage"
		"aiming no flinch" :		"No flinching when aiming"
		"aiming knockback resistance" :		"Knockback reduced by ??? when aiming"
		"sniper aiming movespeed decreased" :		"??? slower move speed when aiming"
		"kill eater user 1" :		"Kill eater user 1"
		"kill eater user score type 1" :		"Kill eater user score type 1"
		"kill eater user 2" :		"Kill eater user 2"
		"kill eater user score type 2" :		"Kill eater user score type 2"
		"kill eater user 3" :		"Kill eater user 3"
		"kill eater user score type 3" :		"Kill eater user score type 3"
		"strange part new counter ID" :		"Strange part new counter ID"
		"mvm completed challenges bitmask" :		"Mvm completed challenges bitmask"
		"rage on kill" :		"Gain Focus on kills and assists"
		"kill eater kill type" :		"Kill eater kill type"
		"shot penetrate all players" :		"Shots go through multiple enemies"
		"headshot damage increase" :		"Headshots deal an extra +??? damage"
		"mystery solving time decrease" :		"Reduces mystery solving time by up to ???"
		"damage penalty on bodyshot" :		"??? damage on body shot"
		"sniper rage DISPLAY ONLY" :		"Focus activates on Fire when Focus meter is full"
		"fire rate bonus HIDDEN" :		"+??? Firing Speed HIDDEN"
		"explosive sniper shot" :		"Increased headshot explosion radius and damage to nearby enemies"
		"melee attack rate bonus" :		"+??? faster melee attack speed"
		"projectile penetration heavy" :		"Bullets penetrate +??? enemies"
		"rage on assists" :		"Rage Gain On Assists"
		"armor piercing" :		"Allow backstabs against Giant Robots at ??? damage"
		"cannot pick up intelligence" :		"Wearer cannot carry the intelligence briefcase"
		"chance of hunger decrease" :		"Reduces chance of hunger by up to ???"
		"cannot be backstabbed" :		"Cannot be backstabbed"
		"squad surplus claimer id DEPRECATED" :		"Squad surplus claimed by: ???"
		"share consumable with patient" :		"Using your Power Up Canteen will apply the same bonus effect to your heal target"
		"airblast vertical vulnerability multiplier" :		"AirBlast Vertical Vulnerability Multipier"
		"vision opt in flags" :		"Vision opt in flags"
		"crit vs disguised players" :		"100% critical hit vs disguised players"
		"crit vs non burning players" :		"100% critical hit vs non-burning players"
		"kill forces attacker to laugh" :		"On Kill: Burst into joyous laughter"
		"damage bonus while undisguised" :		"+??? damage bonus while undisguised"
		"projectile spread angle penalty" :		"+??? degrees random projectile deviation"
		"dmg taken increased" :		"??? damage vulnerability on wearer"
		"auto fires full clip" :		"Hold Fire to load up to three rockets"
		"self mark for death" :		"You are marked for death while active, and for short period after switching weapons"
		"counts as assister is some kind of pet this update is going to be awesome" :		"counts as assister is some kind of pet this update is going to be awesome"
		"mod flaregun fires pellets with knockback" :		"Flare knocks back target on hit"
		"can overload" :		"Overloading the chamber will cause a misfire"
		"hype on damage" :		"On Hit: Builds Boost"
		"hype resets on jump" :		"Boost resets on jump"
		"pyro year number" :		"Witnessed the ??? inferno"
		"no primary ammo from dispensers" :		"Cannot collect ammo from dispensers"
		"pyrovision only DISPLAY ONLY" :		"Only visible in Pyroland"
		"clip size penalty HIDDEN" :		"-??? clip size HIDDEN"
		"sapper damage bonus" :		"+??? sapper damage bonus"
		"sapper damage penalty" :		"??? sapper damage penalty"
		"sapper damage leaches health" :		"+??? health regenerated per second for each active sapper"
		"sapper health bonus" :		"??? sapper health bonus"
		"sapper health penalty" :		"??? sapper health penalty"
		"ring of fire while aiming" :		"Sustains a ring of flames while deployed"
		"uses ammo while aiming" :		"??? ammo consumed per second while deployed"
		"sapper degenerates buildings" :		"Reverses enemy building construction"
		"sapper damage penalty hidden" :		"sapper damage penalty hidden"
		"cleaver description" :		"Throw at your enemies to make them bleed!"
		"ragdolls plasma effect" :		"Ragdolls plasma effect"
		"crit vs stunned players" :		"100% critical hit vs stunned players"
		"crit vs wet players" :		"100% critical hit vs wet players"
		"override item level desc string" :		"override item level desc string"
		"clip size upgrade atomic" :		"+??? clip size"
		"major move speed bonus" :		"major move speed bonus"
		"major increased jump height" :		"major increased jump heightn"
		"head scale" :		"Disables double jump"
		"pyrovision opt in DISPLAY ONLY" :		"On Equip: Visit Pyroland"
		"halloweenvision opt in DISPLAY ONLY" :		"halloweenvision opt in DISPLAY ONLY"
		"halloweenvision filter DISPLAY ONLY" :		"halloweenvision filter DISPLAY ONLY"
		"player skin override" :		"player skin override"
		"never craftable" :		"never craftable"
		"zombiezombiezombiezombie" :		"zombiezombiezombiezombie"
		"merasmus hat level display ONLY" :		"Killed Merasmus at level ???"
		"strange restriction type 1" :		"strange restriction type 1"
		"strange restriction value 1" :		"strange restriction value 1"
		"strange restriction type 2" :		"strange restriction type 2"
		"strange restriction value 2" :		"strange restriction value 2"
		"strange restriction user type 1" :		"strange restriction user type 1"
		"strange restriction user value 1" :		"strange restriction user value 1"
		"strange restriction user type 2" :		"strange restriction user type 2"
		"strange restriction user value 2" :		"strange restriction user value 2"
		"strange restriction user type 3" :		"strange restriction user type 3"
		"strange restriction user value 3" :		"strange restriction user value 3"
		"engineer sentry build rate multiplier" :		"engineer sentry build rate multiplier"
		"engineer teleporter build rate multiplier" :		"engineer teleporter build rate multiplier"
		"grenade launcher mortar mode" :		"grenade launcher mortar mode"
		"grenade not explode on impact" :		"grenade not explode on impact"
		"strange score selector" :		"strange score selector"
		"engineer building teleporting pickup" :		"engineer building teleporting pickup"
		"grenade damage reduction on world contact" :		"grenade damage reduction on world contact"
		"engineer rage on dmg" :		"engineer rage on dmg"
		"mark for death on building pickup" :		"mark for death on building pickup"
		"medigun charge is resists" :		"medigun charge is resists"
		"arrow heals buildings" :		"+arrow heals buildings"
		"Projectile speed increased HIDDEN" :		"+Projectile speed increased HIDDEN"
		"damage bonus HIDDEN" :		"+damage bonus HIDDEN"
		"cannonball push back" :		"Cannonballs push players back on impact"
		"rage giving scale" :		"rage giving scale"
		"overheal fill rate reduced" :		"??? Overheal build rate"
		"canteen specialist" :		"Canteen Specialist"
		"overheal expert" :		"Overheal Expert"
		"mad milk syringes" :		"Mad Milk Syringes"
		"rocket specialist" :		"Rocket Specialist"
		"SET BONUS: move speed set bonus" :		"+???  faster move speed on wearer"
		"SET BONUS: health regen set bonus" :		"+??? health regenerated per second on wearer"
		"SET BONUS: dmg taken from crit reduced set bonus" :		"??? critical hit damage resistance on wearer"
		"SET BONUS: dmg taken from fire reduced set bonus" :		"??? fire damage resistance on wearer"
		"healing mastery" :		"Healing Mastery"
		"kill eater 3" :		"kill eater 3"
		"kill eater score type 3" :		"kill eater score type 3"
		"strange restriction type 3" :		"strange restriction type 3"
		"strange restriction value 3" :		"strange restriction value 3"
		"bot custom jump particle" :		"bot custom jump particle"
		"generate rage on heal" :		"Projectile Shield"
		"custom name attr" :		"custom name attr"
		"custom desc attr" :		"custom desc attr"
		"medigun bullet resist passive" :		"medigun bullet resist passive"
		"medigun blast resist passive" :		"medigun blast resist passive"
		"medigun fire resist passive" :		"medigun fire resist passive"
		"medigun bullet resist deployed" :		"medigun bullet resist deployed"
		"medigun blast resist deployed" :		"medigun blast resist deployed"
		"medigun fire resist deployed" :		"medigun fire resist deployed"
		"medigun crit bullet percent bar deplete" :		"medigun crit bullet percent bar deplete"
		"medigun crit blast percent bar deplete" :		"medigun crit blast percent bar deplete"
		"medigun crit fire percent bar deplete" :		"medigun crit fire percent bar deplete"
		"throwable fire speed" :		"throwable fire speed"
		"throwable damage" :		"throwable damages"
		"throwable healing" :		"throwable healing"
		"throwable particle trail only" :		"throwable particle trail only"
		"SET BONUS: dmg taken from bullets increased" :		"??? bullet damage vulnerability on wearer"
		"SET BONUS: max health additive bonus" :		"??? max health on wearer"
		"scattergun knockback mult" :		"scattergun knockback mult"
		"particle effect vertical offset" :		"Particle effect vertical offset"
		"particle effect use head origin" :		"Particle effect use head origin"
		"use large smoke explosion" :		"Use Large Smoke Explosion"
		"damage causes airblast" :		"Damage causes Airblast"
		"increased jump height from weapon" :		"??? greater jump height when active"
		"damage force increase" :		"??? increase in push force taken from damage"
		"healing received bonus" :		"+??? bonus healing from all sources"
		"afterburn immunity" :		"Immune to the effects of afterburn"
		"decoded by itemdefindex" :		"decoded by itemdefindex"
		"hype decays over time" :		"Hype Decays Over Time"
		"SET BONUS: custom taunt particle attr" :		"Extra effects when taunting"
		"airblast vulnerability multiplier hidden" :		"??? reduction in airblast vulnerability"
		"damage force increase hidden" :		"??? increase in push force taken from damage HIDDEN"
		"damage force increase text" :		"Increase in push force taken from damage and airblast"
		"SET BONUS: calling card on kill" :		"Leave a Calling Card on your victims"
		"righthand pose parameter" :		"Righthand pose parameter"
		"set throwable type" :		"Set Throwable Type"
		"add head on hit" :		"Add Head on Hit"
		"item style override" :		"item style override"
		"paint decal enum" :		"paint decal enum"
		"show paint description" :		"show paint description"
		"bot medic uber health threshold" :		"bot medic uber health threshold"
		"bot medic uber deploy delay duration" :		"bot medic uber deploy delay duration"
		"single wep deploy time decreased" :		"This weapon deploys ??? faster"
		"halloween reload time decreased" :		"halloween reload time decreased"
		"halloween fire rate bonus" :		"halloween fire rate bonus"
		"halloween increased jump height" :		"halloween increased jump height"
		"special taunt" :		"Special Taunt"
		"revive" :		"Revive Teammates"
		"taunt attack name" :		"taunt attack name"
		"taunt attack time" :		"taunt attack time"
		"taunt force move forward" :		"taunt force move forward"
		"taunt mimic" :		"taunt mimic"
		"taunt success sound" :		"taunt success sound"
		"taunt success sound offset" :		"taunt success sound offset"
		"taunt success sound loop" :		"taunt success sound loop"
		"taunt success sound loop offset" :		"taunt success sound loop offset"
		"increased air control" :		"??? increased air control"
		"rocket launch impulse" :		"rocket launch impulse"
		"minicritboost on kill" :		"On Kill: Gain Mini-crits for %s1 seconds"
		"no metal from dispensers while active" :		"No metal from dispensers when active"
		"projectile entity name" :		"projectile entity name"
		"is throwable primable" :		"is throwable primable"
		"throwable detonation time" :		"throwable detonation time"
		"throwable recharge time" :		"throwable recharge time"
		"closerange backattack minicrits" :		"Mini-crits targets when fired at their back from close range"
		"torso scale" :		"Torso Scale"
		"rocketjump attackrate bonus" :		"Increased attack speed and smaller blast radius while blast jumping"
		"is throwable chargeable" :		"is throwable chargeable"
		"back headshot" :		"Back Headshot"
		"rj air bombardment" :		"Fires 3 barrages while explosive jumping"
		"projectile particle name" :		"Projectile Particle name"
		"air jump on attack" :		"Air jump on attack"
		"sniper crit no scope" :		"Charge and fire shots independent of zoom"
		"sniper independent zoom DISPLAY ONLY" :		"Zoom does not affect charge"
		"axtinguisher properties" :		"100% critical hits burning players from behind\nMini-crits burning players from the front"
		"full charge turn control" :		"Full turning control while charging"
		"parachute attribute" :		"parachute attribute"
		"taunt force weapon slot" :		"taunt force weapon slot"
		"mini rockets" :		"Mini Rocket"
		"rocket jump damage reduction HIDDEN" :		"??? blast damage from rocket jumps HIDDEN"
		"clipsize increase on kill" :		"Clip size increased on kill"
		"breadgloves properties" :		"breadgloves properties"
		"taunt turn speed" :		"taunt turn speed"
		"sniper fires tracer HIDDEN" :		"Fires tracer rounds HIDDEN"
		"fire rate bonus with reduced health" :		"Fire rate increases as health decreases"
		"tag__summer2014" :		"Rewarded for participating in the 2014 Summer Adventure"
		"crate generation code" :		"crate generation code"
		"stickybomb fizzle time" :		"Stickybombs fizzle ??? seconds after landing"
		"stickybomb charge rate" :		"Max charge time decreased by ???"
		"grenade no bounce" :		"Grenades have very little bounce and roll"
		"class select override vcd" :		"class select override vcd"
		"custom projectile model" :		"Custom projectile model"
		"lose demo charge on damage when charging" :		"Taking damage while shield charging reduces remaining charging time"
		"grenade no spin" :		"grenade no spin"
		"grenade detonation damage penalty" :		"??? damage on grenades that explode on timer"
		"taunt turn acceleration time" :		"taunt turn acceleration time"
		"taunt move acceleration time" :		"taunt move acceleration time"
		"taunt move speed" :		"taunt move speed"
		"shuffle crate item def min" :		"shuffle crate item def min"
		"shuffle crate item def max" :		"shuffle crate item def max"
		"limited quantity item" :		"limited quantity item"
		"SET BONUS: alien isolation xeno bonus pos" :		"Increased Melee damage against Isolated Merc Set"
		"SET BONUS: alien isolation xeno bonus neg" :		"Increased Nostromo Napalmer damage taken from Isolated Merc Set"
		"SET BONUS: alien isolation merc bonus pos" :		"Increased Nostromo Napalmer damage against Isolationist Pack Set"
		"SET BONUS: alien isolation merc bonus neg" :		"Increased Melee damage taken from Isolationist Pack Set"
		"disable weapon switch" :		"Disable Weapon Switch"
		"hand scale" :		"Hand Scale"
		"display duck leaderboard" :		"display duck leaderboard"
		"duck rating" :		"Duck XP Level : ???"
		"duck badge level" :		"Duck Power : ??? / 5"
		"tag__eotlearlysupport" :		"Early Supporter of End of the Line Community Update"
		"unlimited quantity hidden" :		"Unlimited quantity hidden"
		"duckstreaks active" :		"Duckstreaks Active"
		"panic_attack" :		"Hold fire to load up to 4 shells"
		"panic_attack_negative" :		"Weapon spread increases as health decreases"
		"auto fires full clip penalty" :		"auto fires full clip penalty"
		"auto fires when full" :		"auto fires when full"
		"force weapon switch" :		"force weapon switch"
		"weapon_uses_stattrak_module" :		"weapon uses stattrak module"
		"is_operation_pass" :		"is operation pass"
		"weapon_stattrak_module_scale" :		"weapon stattrak module scale"
		"set_item_texture_wear" :		"set item texture wear"
		"cloak_consume_on_feign_death_activate" :		"??? cloak meter when Feign Death is activated"
		"stickybomb_charge_damage_increase" :		"Up to +??? damage based on charge"
		"NoCloakWhenCloaked" :		"No cloak meter from ammo boxes when invisible"
		"ReducedCloakFromAmmo" :		"??? cloak meter from ammo boxes"
		"elevate to unusual if applicable" :		"elevate to unusual if applicable"
		"weapon_allow_inspect" :		"weapon allow inspect"
		"metal_pickup_decreased" :		"??? less metal from pickups and dispensers"
		"lose hype on take damage" :		"Boost reduced when hit"
		"healing received penalty" :		"??? less healing from all sources"
		"crit_vs_burning_FLARES_DISPLAY_ONLY" :		"100% critical hit vs burning players"
		"speed_boost_on_kill" :		"Gain a speed boost on kill"
		"speed_boost_on_hit" :		"On Hit: Gain a speed boost"
		"spunup_damage_resistance" :		"%s1% damage resistance when below 50% health and spun up"
		"ubercharge overheal rate penalty" :		"%s1% ÜberCharge rate on Overhealed patients"
		"reduced_healing_from_medics" :		"??? less healing from Medic sources"
		"health on radius damage" :		"On Hit: Gain up to +??? health per attack"
		"style changes on strange level" :		"style changes on strange level"
		"cannot restore" :		"cannot restore"
		"hide crate series number" :		"hide crate series number"
		"has team color paintkit" :		"Team Colored Decorated Weapon"
		"cosmetic_allow_inspect" :		"cosmetic allow inspect"
		"hat only unusual effect" :		"hat only unusual effect"
		"items traded in for" :		"Items Traded in : ???"
		"texture_wear_default" :		"texture wear default"
		"taunt only unusual effect" :		"taunt only unusual effect"
		"deactive date" :		"deactive date"
		"is giger counter" :		"is giger counter"
		"hide_strange_prefix" :		"hide strange prefix"
		"always_transmit_so" :		"always transmit so"
		"allow_halloween_offering" :		"allow halloween offering"
		"cannot_transmute" :		"cannot transmute"
		"single wep holster time increased" :		"This weapon holsters ??? slower"
		"single wep deploy time increased" :		"This weapon deploys ??? slower"
		"charge time decreased" :		"??? sec decrease in charge duration"
		"dmg penalty vs buildings" :		"??? damage penalty vs buildings"
		"charge impact damage decreased" :		"??? decrease in charge impact damage"
		"non economy" :		"Not Tradable, Marketable, Usable in Crafting, or Gift Wrappable"
		"charge meter on hit" :		"Melee hits refill %s1% of your charge meter"
		"minicrit_boost_when_charged" :		"Secondary fire when charged grants mini-crits for %s1 seconds"
		"minicrit_boost_charge_rate" :		"Dealing damage fills charge meter"
		"is_a_sword" :		"This Weapon has a large melee range and\ndeploys and holsters slower"
		"ammo gives charge" :		"Ammo boxes collected also refill your charge meter"
		"extinguish restores health" :		"Extinguishing teammates restores ??? health"
		"extinguish reduces cooldown" :		"Extinguishing teammates reduces cooldown by ???"
		"cannot giftwrap" :		"cannot giftwrap"
		"tool needs giftwrap" :		"tool needs giftwrap"
		"fuse bonus" :		"+??? fuse time on grenades"
		"move speed bonus shield required" :		"+??? faster move speed on wearer (shield required)"
		"damage bonus vs sentry target" :		"??? increased damage to your sentry's target"
		"mod teleporter cost" :		"??? metal cost when constructing or upgrading teleporters"
		"damage blast push" :		"damage blast push"
		"move speed bonus resource level" :		"move speed bonus resource level"
		"hype on damage" :		"On Hit: Builds Hype"
		"dmg taken from fire reduced on active" :		"+??? fire damage resistance while deployed"
		"damage bonus vs burning" :		"??? damage bonus vs burning players"
		"min_viewmodel_offset" :		"min viewmodel offset"
		"dmg pierces resists absorbs" :		"Attacks pierce damage resistance effects and bonuses"
		"energy buff dmg taken multiplier" :		"energy buff dmg taken multiplier"
		"lose revenge crits on death DISPLAY ONLY" :		"Revenge crits are lost on death"
		"patient overheal penalty" :		"-??? maximum overheal on wearer"
		"item_meter_charge_rate" :		"item_meter_charge_rate"
		"mult_spread_scale_first_shot" :		"mult_spread_scale_first_shot"
		"unusualifier_attribute_template_name" :		"unusualifier attribute template name"
		"tool_target_item_icon_offset" :		"tool target item icon offset"
		"add_head_on_kill" :		"Collect the organs of your victims"
		"mult_spread_scales_consecutive" :		"Successive shots become less accurate"
		"fixed_shot_pattern" :		"Fires a wide, fixed shot pattern"
		"mod_cloak_no_regen_from_items" :		"mod cloak no regen from items"
		"ubercharge_preserved_on_spawn_max" :		"Collect the organs of people you hit"
		"mod_air_control_blast_jump" :		"??? increased air control when blast jumping"
		"spunup_push_force_immunity" :		"Immune to push force from damage and airblast when spun up"
		"mod_mark_attacker_for_death" :		"mod mark attacker for death"
		"use_model_cache_icon" :		"use model cache icon"
		"mod_disguise_consumes_cloak" :		"Normal disguises require (and consume) a full cloak meter"
		"inspect_viewmodel_offset" :		"inspect_viewmodel_offset"
		"is_passive_weapon" :		"is passive weapon"
		"no_jump" :		"No Jump"
		"no_duck" :		"No Duck"
		"no_attack" :		"No Attack"
		"airblast_destroy_projectile" :		"airblast destroy projectile"
		"airblast_pushback_disabled" :		"airblast pushback disabled"
		"airblast_pushback_no_stun" :		"airblast_pushback no stun"
		"airblast_pushback_no_viewpunch" :		"airblast pushback no viewpunch"
		"airblast_deflect_projectiles_disabled" :		"airblast deflect rojectiles disabled"
		"airblast_put_out_teammate_disabled" :		"airblast put out teammate disabled"
		"afterburn duration penalty" :		"afterburn duration penalty"
		"afterburn duration bonus" :		"afterburn duration bonus"
		"aoe_deflection" :		"aoe deflection"
		"mult_end_flame_size" :		"mult end flame size"
		"airblast_give_teammate_speed_boost" :		"airblast give teammate speed_boost"
		"airblast_turn_projectile_to_ammo" :		"airblast turn projectile to ammo"
		"paintkit_proto_def_index" :		"paintkit proto def index"
		"taunt_attr_player_invis_percent" :		"taunt_attr_player_invis_percent"
		"redirected_flame_size_mult" :		"redirected_flame_size_mult"
		"flame_reflect_on_collision" :		"flame_reflect_on_collision"
		"flame_spread_degree" :		"flame_spread_degree"
		"holster_anim_time" :		"holster_anim_time"
		"flame_gravity" :		"flame_gravity"
		"flame_ignore_player_velocity" :		"flame_ignore_player_velocity"
		"flame_drag" :		"flame_drag"
		"flame_speed" :		"flame_speed"
		"grenades1resupply_denied" :		"grenades1_resupply_denied"
		"grenades2_resupply_denied" :		"grenades2_resupply_denied"
		"grenades3_resupply_denied" :		"grenades3_resupply_denied"
		"item_meter_resupply_denied" :		"Spawning and resupply do not affect the Gas meter"
		"mult_player_movespeed_active" :		"+??? faster move speed on wearer"
		"mult_dmgtaken_active" :		"??? damage vulnerability on wearer"
		"mult_patient_overheal_penalty_active" :		"-??? maximum overheal on wearer"
		"mult_health_fromhealers_penalty_active" :		"-??? health from healers on wearer"
		"mod_maxhealth_drain_rate" :		"Maximum health is drained while item is active"
		"item_meter_charge_type" :		"item_meter_charge_type"
		"max_flame_reflection_count" :		"max_flame_reflection_count"
		"flame_reflection_add_life_time" :		"flame_reflection_add_life_time"
		"reflected_flame_dmg_reduction" :		"reflected_flame_dmg_reduction"
		"flame_lifetime" :		"flame_lifetime"
		"flame_random_life_time_offset" :		"flame_random_life_time_offset"
		"flame_up_speed" :		"flame_up_speed"
		"custom_paintkit_seed_lo" :		"custom_paintkit_seed_lo"
		"custom_paintkit_seed_hi" :		"custom_paintkit_seed_hi"
		"crit_dmg_falloff" :		"Critical damage is affected by range"
		"crits_become_minicrits" :		"Crits whenever it would normally minicrits"
		"falling_impact_radius_pushback" :		"Push enemies back when you land (force and radius based on velocity)"
		"falling_impact_radius_stun" :		"Stun enemies when you land"
		"thermal_thruster_air_launch" :		"Able to re-launch while already in-flight"
		"thermal_thruster" :		"thermal_thruster"
		"mult_item_meter_charge_rate" :		"??? faster recharge rate"
		"explode_on_ignite" :		"Explode On Ignite"
		"lunchbox healing decreased" :		"-??? healing effect"
		"speed_boost_on_hit_enemy" :		"Gain a speed boost when you hit an enemy player"
		"item_meter_starts_empty_DISPLAY_ONLY" :		"Gas meter starts empty"
		"item_meter_charge_type_3_DISPLAY_ONLY" :		"Gas meter builds with damage done and/or time"
		"repair health to metal ratio DISPLAY ONLY" :		"???-to-1 health-to-metal ratio when repairing buildings"

		"CARD: damage bonus" :		"??? damage bonus"
		"CARD: dmg taken from bullets reduced" :		"??? bullet damage resistance on wearer"
		"CARD: move speed bonus" :		"??? faster move speed on wearer"
		"CARD: health regen" :		"??? health regenerated per second on wearer"
		"SPELL: set item tint RGB" :		"???"
		"SPELL: set Halloween footstep type" :		"???"
		"SPELL: Halloween voice modulation" :		"Voices From Below"
		"SPELL: Halloween pumpkin explosions" :		"Pumpkin Bombs"
		"SPELL: Halloween green flames" :		"Halloween Fire"
		"SPELL: Halloween death ghosts" :		"Exorcism"
		"Attack not cancel charge" :		"Attack not cancel charge"
		"start drop date" :		"start drop date"
		"end drop date" :		"nd drop date"
		"tool target item" :		"tool target item"
		"killstreak effect" :		"Killstreaker: ???"
		"killstreak idleeffect" :		"Sheen: ???"
		"spellbook page attr id" :		"spellbook page attr id"
		"Halloween Spellbook Page: Tumidum" :		"Pages of Tumidum: ???"
		"Halloween Spellbook Page: Gratanter" :		"Pages of Gratanter: ???"
		"Halloween Spellbook Page: Audere" :		"Pages of Audere: ???"
		"Halloween Spellbook Page: Congeriae" :		"Pages of Congeriae: ???"
		"Halloween Spellbook Page: Veteris" :		"Pages of Veteris: ???"
		"additional halloween response criteria name" :		"additional halloween response criteria name"
		"loot rarity" :		"loot rarity"
		"quality text override" :		"quality text override"
		"item name text override" :		"item name text override"
		"killstreak tier" :		"Killstreaks Active"
		"wide item level" :		"wide item level"
		"is australium item" :		"is australium item"
		"is marketable" :		"is marketable"
		"allowed in medieval mode" :		"allowed in medieval mode"
		"crit on hard hit" :		"crit on hard hit"
		"kill refills meter" :		"Melee kills refill ??? of your charge meter"
		"taunt attach particle index" :		"★ Unusual Effect: ???"
		"upgrade rate decrease" :		"??? slower upgrade rate"
		"voice pitch scale" :		"??? voice pitch scale"
		"gunslinger punch combo" :		"+??? gunslinger damage bonus"
		"quest earned standard points" :		"quest earned standard points"
		"quest earned bonus points" :		"quest earned bonus points"
		"item drop wave" :		"item drop wave"
	]

]

@BaseClass base(Targetname) = PBaseFilter
[
	Negated(choices) : "Filter mode" : "0" : "If set to Allow, only entities who match the criteria will pass the filter. "+
		"If set to Disallow, only entities who do NOT match the criteria will pass the filter." =
	[
		0 : "Allow entities that match criteria"
		1 : "Disallow entities that match criteria"
	]

	// Inputs
	input TestActivator(void) : "Test the activator against the filter and fires OnPass or OnFail output."

	// Outputs
	output OnPass(void) : "Fired in response to TestActivator input if the activator passes the filter."
	output OnFail(void) : "Fired in response to TestActivator input if the activator fails to pass the filter."
]

@BaseClass = BaseObject
[
	// invuln
	spawnflags(flags) =
	[
		2: "Invulnerable" : 0
	]

	// Inputs
	input SetBuilder(string) : "Sets the builder of this object to the player given (from an output)"
	input Show(void) : "Makes the building visible and tries to re-enable it."
	input Hide(void) : "Makes the building invisible and disables it."
	input SetHealth(integer) : "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	input Enable(void) : "Enable this entity."
	input Disable(void) : "Disable this entity."
]

@BaseClass color(0 0 200) base(Targetname, Angles) sphere(fademindist) sphere(fademaxdist) = Weapon
[
	spawnflags(Flags) =
	[
		1 : "Start constrained" : 0
		2 : "Deny player pickup (reserve for NPC)" : 0
		4 : "Not puntable by Gravity Gun" : 0
	]

	output OnPlayerUse(void) : "Fires when the player +uses this weapon"
	output OnPlayerPickup(void) : "Fires when the player picks up this weapon"
	output OnNPCPickup(void) : "Fires when an NPC picks up this weapon"
	output OnCacheInteraction(void) : "Fires when the player 'proves' they've found this weapon. Fires on: Player Touch, +USE pickup, Physcannon pickup, Physcannon punt."

	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
	fadescale(float) : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified." +
												 " This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades." +
]

@BaseClass base(Targetname, Angles, RenderFields, DamageFilter, ResponseContext, Shadow, TeamNum) color(0 200 200) = BaseNPC
[
	target(target_destination) : "Target Path Corner" : : "If set, the name of a path corner entity that this NPC will walk to, after spawning."
	squadname(String) : "Squad Name" : : "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
	hintgroup(String) : "Hint Group" : "" : "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC."
	hintlimiting(choices) : "Hint Limit Nav" : 0 : "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		1 : "Wait Till Seen" : 0
		2 : "Gag (No IDLE sounds until angry)" : 0
		4 : "Fall to ground (unchecked means *teleport* to ground)" : 1
		8 : "Drop Healthkit" : 0
		16 : "Efficient - Don't acquire enemies or avoid obstacles" : 0
		128: "Wait For Script" : 0
		256: "Long Visibility/Shoot" : 0
		512: "Fade Corpse" : 1
		1024: "Think outside PVS" : 0
		2048: "Template NPC (used by npc_maker, will not spawn)" : 0
		4096: "Do Alternate collision for this NPC (player avoidance)" : 0
		8192: "Don't drop weapons" : 0
		16384 : "Ignore player push (dont give way to player)" : 0
	]

	//initialidle(string) : "Initial Idle Activity" :: "Activity the NPC should use to idle until becomes alert"
	sleepstate(choices) : "Sleep State" : 0 : "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'." =
	[
		0 : "None"
		1 : "Waiting for threat"
		2 : "Waiting for PVS"
		3 : "Waiting for input, ignore PVS"
		4 : "Auto PVS"
		5 : "Auto PVS after PVS"
	]

	wakeradius(float) : "Wake Radius" : 0 : "Auto-wake if player within this distance"
	wakesquad(choices) : "Wake Squad" : 0 : "Wake all of the NPCs squadmates if the NPC is woken" =
	[
		0 : "No"
		1 : "Yes"
	]

	enemyfilter(target_destination) : "Enemy Filter" : "" : "Filter by which to filter potential enemies"
	
	ignoreunseenenemies(choices) : "Ignore unseen enemies" : 0 : "Prefer visible enemies, regardless of distance or relationship priority" = 
	[
		0 : "No"
		1 : "Yes"
	]

	physdamagescale(float) : "Physics Impact Damage Scale" : "1.0" : "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."

	// Outputs
	output OnDamaged(void) : "Fired when this NPC takes damage."
	output OnDeath(void) : "Fired when this NPC is killed." 
	output OnHalfHealth(void) : "Fired when this NPC reaches half of its maximum health."
	output OnHearWorld(void) : "Fired when this NPC hears a sound (other than combat or the player)."
	output OnHearPlayer(void) : "Fired when this NPC hears the player."
	output OnHearCombat(void) : "Fired when this NPC hears combat sounds."
	output OnFoundEnemy(string) : "Fired when this NPC establishes line of sight to its enemy (outputs entity)."
	output OnLostEnemyLOS(void) : "Fired when this NPC loses line of sight to its enemy."
	output OnLostEnemy(void) : "Fired when this NPC loses its enemy. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy."
	output OnFoundPlayer(string) : "Fired when this NPC establishes line of sight to its enemy, and that enemy is a player (outputs player entity)."
	output OnLostPlayerLOS(void) : "Fired when this NPC loses line of sight to its enemy, and that enemy is a player."
	output OnLostPlayer(void) : "Fired when this NPC loses its enemy, and that enemy was a player. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy."
	output OnDamagedByPlayer(void) : "Fired when this NPC is hurt by a player."
	output OnDamagedByPlayerSquad(void) : "Fired when this NPC is hurt by a player OR by one of the player's squadmates."
	output OnDenyCommanderUse(void) : "Fired when this NPC has refused to join the player's squad."
	output OnSleep(void) : "Fired when this NPC enters a sleep state."
	output OnWake(void) : "Fired when this NPC comes out of a sleep state."
	output OnForcedInteractionStarted(void) : "Fired when the NPC starts a forced interaction."
	output OnForcedInteractionAborted(void) : "Fired when the NPC aborts a forced interaction for some reason (target NPC died, couldn't be pathed to, etc)"
	output OnForcedInteractionFinished(void) : "NPCs in actbusies can no longer perform dynamic interactions."

	// Inputs
	input SetRelationship(string) : "Changes this entity's relationship with another entity or class. Format: <entityname/classname> <D_HT/D_FR/D_LI/D_NU> <priority>"
	input SetEnemyFilter(string) : "Changes this NPC's enemy filter to the named filter."
	input SetHealth(integer) : "Set this NPC's health."
	input SetBodyGroup(integer) : "HACK: Sets this NPC's body group (from 0 - n). You'd better know what you are doing!"
	input physdamagescale(float) : "Sets the value that scales damage energy when this character is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility."
	input Ignite(void) : "Ignite, burst into flames"
	input IgniteLifetime(float) : "Ignite, with a parameter lifetime."
	input IgniteNumHitboxFires(integer) : "Ignite, with a parameter number of hitbox fires."
	input IgniteHitboxFireScale(float) : "Ignite, with a parameter hitbox fire scale."
	input Break(void) : "Break, smash into pieces"
	input StartScripting(void) : "Enter scripting state. In this state, NPCs ignore a variety of stimulus that would make them break out of their scripts: They ignore danger sounds, ignore +USE, don't idle speak or respond to other NPC's idle speech, and so on."
	input StopScripting(void) : "Exit scripting state."
	input SetSquad(string) : "Set the name of this NPC's squad. It will be removed from any existing squad automatically. Leaving the parameter blank will remove the NPC from any existing squad."
	input Wake(void) : "Wakes up the NPC if it is sleeping."
	input ForgetEntity(string) : "Clears out the NPC's knowledge of a named entity."
	input GagEnable(void) : "Turn on the NPC Gag flag. NPC won't speak outside of choreographed scenes."
	input GagDisable(void) : "Turn off the NPC Gag flag."
	input IgnoreDangerSounds(float) : "Ignore danger sounds for the specified number of seconds."
	input HolsterWeapon(void) : "Force the NPC to holster their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already holstered, or if the NPC doesn't use weapons."
	input HolsterAndDestroyWeapon(void) : "Identical to HolsterWeapon, except the weapon is destroyed once it has been holstered and concealed."
	input UnholsterWeapon(void) : "Force the NPC to draw their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already drawn, or if the NPC doesn't use weapons."
	input ForceInteractionWithNPC(string) : "Force the NPC to use a dynamic interaction with another NPC. Parameter format: <target NPC name> <dynamic interaction name>"
	input UpdateEnemyMemory(string) : "Update (or Create) this NPC's memory of an enemy and its location"
	input BecomeRagdoll(void) : "This NPC will instantly become a ragdoll with ZERO force (just go limp). OnDeath, OnHalfHealth, etc. Outputs will **NOT** BE FIRED."

	input AddCond(integer) : "Add cond."
	input RemoveCond(integer) : "Remove cond."
]


@BaseClass base(Targetname, Angles, EnableDisable, TeamNum) iconsprite("editor/npc_maker.vmt") color(0 0 255) = BaseNPCMaker
[
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		// Only in npc__maker, npc_template_maker uses flag from template NPC
		16 : "Fade Corpse" : 0
		32 : "Infinite Children" : 0
		64 : "Do Not Drop" : 0
		128 : "Don't Spawn While Visible" : 0
	]

	MaxNPCCount(integer) : "Num. of NPCs" : 1 : "Number of NPCs that will spawn before this spawner is exhausted."
	SpawnFrequency(string) : "Frequency" : "5" : "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
	MaxLiveChildren(integer) : "Max Live NPCs" : 5 : "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied."
	
	// Outputs
	output OnSpawnNPC(string) : "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC." 
	output OnAllSpawned(void) : "Fired when the spawned is exhausted (all children have been spawned)."
	output OnAllSpawnedDead(void) : "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died."
	output OnAllLiveChildrenDead(void) : "Fired when all spawned children have died. This does not mean the spawned is exhausted, so a new child may be spawned any time after this (unless the maker is disabled)."

	// Inputs
	input Spawn(void) : "Spawns an NPC."
	input Toggle(void) : "Toggles the spawner enabled/disabled state."
	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input AddMaxChildren(integer) : "Adds to the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still wont begin spawning until it is re-enabled with the Enable input."
	input SetMaxChildren(integer) : "Sets the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still won't begin spawning until it is re-enabled with the Enable input."
	input SetMaxLiveChildren(integer) : "Sets the maximum number of NPCs that can be alive at any one time from this spawner."
	input SetSpawnFrequency(float) : "Sets how often (in seconds) a new NPC will be spawned."
]

@PointClass base(BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = npc_template_maker : 
	"An entity that creates NPCs. The NPCs it creates are clones of a template NPC. NPCs are spawned around this maker's origin, or at specified destination points."
[
	spawnflags(Flags) = 
	[
		256 : "Always use radius spawn" : 0
		512 : "Don't preload template models" : 0
	]

	TemplateName(target_destination) : "Name of template NPC" : "" : "Template NPC that this maker should be creating clones of."

	Radius(float) : "Radius" : 256 : "Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to spawn."

	DestinationGroup(target_destination) : "Name of Destination Group" : : "If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group."
	CriterionVisibility(Choices) : "Dest. Criterion: Visible to player?" : 2 : "Should the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used." =
	[
		0 : "Yes"
		1 : "No"
		2 : "Don't Care"
	]
	CriterionDistance(Choices) : "Dest. Criterion: Distance to player?" : 2 : "Should the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is being used." =
	[
		0 : "Nearest"
		1 : "Farthest"
		2 : "Don't Care"
	]

	MinSpawnDistance(integer) : "Minimum spawn distance from player" : 0 : "The spawn destination node distance to the player will have to be further or equal than this value."

	//Inputs
	input SpawnNPCInRadius(void) : "Spawn an NPC somewhere within the maker's radius."
	input SpawnNPCInLine(void) : "Spawn an NPC somewhere within a line behind the maker."
	input SpawnMultiple(integer) : "Spawn multiple NPCs (uses destination group, else radius)."
	input ChangeDestinationGroup(string) : "Switch to a different set of Destination entities."
	input SetMinimumSpawnDistance(integer) : "Set the minimum spawn distance from player to destination node."
]

@BaseClass base(BaseNPC) = TalkNPC
[
	UseSentence(string) : "Use Sentence"
	UnUseSentence(string) : "Un-Use Sentence"

	DontUseSpeechSemaphore(choices) : "Don't Use Speech Semaphore" : 0 : "Friendly NPCs are not allowed to speak if another friendly NPC is speaking. In some cases we don't want speaking NPCs to prevent other NPCs from speaking (for instance, if there is a friendly NPC speaking for a long time on a monitor). To make this NPC not prevent other NPCs from talking, make it not grab the semaphore when it speaks." =
	[
		0 : "No (Use speech semaphore)"
		1 : "Yes (Don't use speech semaphore)"
	]

	input SpeakResponseConcept(string) : "Speak the specified response concept."
]

@BaseClass base(BaseNPC) = PlayerCompanion
[
	input OutsideTransition(void) : "Use this input to teleport the NPC to a hintnode with the Player Squad Transition Point hint type."
	input EnableAlwaysTransition(void) : "Enable the 'always transition' behavior"
	input DisableAlwaysTransition(void) : "Disable the 'always transition' behavior"
	
	input EnableSpeakWhileScripting(void) : "Allow this NPC to speak responses while in a scripted sequence or while StartScripting is active."
	input DisableSpeakWhileScripting(void) : "Cancels this NPC's ability to speak responses while in a scripted sequence or while StartScripting is active if it was previously enabled by EnableSpeakWhileScripting."
	
	AlwaysTransition(choices) : "Always transition" : "No" : "If yes, this NPC will always teleport to a Player Squad Transition Point if they're not within the trigger_transition volume." =
	[
		0 : "No"
		1 : "Yes"
	]

	DontPickupWeapons(choices) : "Prevent picking up weapons?" : "No" : "If yes, this NPC will NOT be allowed to pick up weapons they find on the ground." =
	[
		0 : "No"
		1 : "Yes"	
	]

	GameEndAlly(choices) : "Is this a vital ally?" : "No" : "If yes, this NPC will cause the game to end if killed." =
	[
		0 : "No"
		1 : "Yes"	
	]

	input MakeGameEndAlly(void) : "Make this NPC a game end ally."
	input MakeRegularAlly(void) : "Make this NPC a regular ally."

	input EnableWeaponPickup(void) : "Enable Weapon Pickup"
	input DisableWeaponPickup(void) : "Disable Weapon Pickup"

	input GiveWeapon(string) : "Gives the NPC a weapon of the specified entity name."
	
	input SetReadinessPanic(void) : "Set readiness to panic state (Special)"
	input SetReadinessLow(void) : "Set readiness to calmest state (Bored)"
	input SetReadinessMedium(void) : "Set readiness to moderate (Alert)"
	input SetReadinessHigh(void) : "Set readiness to highest. (Combat imminent)"
	input LockReadiness(float) : "Lock readiness at current setting for x seconds -1 = forever, 0 = unlock now"
	
	input ClearAllOutputs(void) : "Obliterate every output that this NPC has."

	output OnWeaponPickup(void) : "Fires when this NPC picks a weapon off the ground or a gun rack."
]

@BaseClass base(BaseNPC ) = RappelNPC
[
	waitingtorappel(choices) : "Waiting to Rappel?" : "No" : "If yes, this NPC spawns suspended in air and awaits a BeginRappel input. It will then spawn a zipline and slide down. When it hits the ground, NPC will cut away the line and try to move forward a few feet to make room for the next NPC. The NPC will not attempt to clear its landing space if it cannot do so by taking a few steps forward" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input BeginRappel(void) : "BeginRappel"

	// Outputs
	output OnRappelTouchdown(void) : "Fires when done rappeling"
]

@BaseClass = AlyxInteractable
[
	// Outputs
	output OnAlyxStartedInteraction(void) : "Fired when Alyx begins to interact with this entity."
	output OnAlyxFinishedInteraction(void) : "Fired when Alyx has finished interacting with this entity."

	input InteractivePowerDown(void) : "Shutdown this target."
]

@BaseClass base(BaseNPC) = VehicleDriverNPC
[
	vehicle(target_destination) : "Vehicle to drive"

	spawnflags(Flags) = 
	[
		65536 :  "Start Inactive" : 1
	]

	input StartFiring(void) : "Tell the driver to attack nearby enemies with the vehicle's weaponry (if any)"
	input StopFiring(void) : "Tell the driver to stop attacking nearby enemies with the vehicle's weaponry."
	input GotoPathCorner(string) : "Tell the driver to go to a specific path corner and continue from there."
]

@BaseClass base(Targetname, Origin, Angles, Global) = CombineBallSpawners
[
	spawnflags(Flags) = 
	[
		4096 : "Start inactive" : 1
		8192 : "Combine power supply" : 0
	]

	ballcount(integer) : "Ball count" : 3 : "This is how many balls will be bouncing around inside the spawner"
	minspeed(float) : "Min ball speed" : "300.0" : "The minimum speed of balls that fly in the spawner"
	maxspeed(float) : "Max ball speed" : "600.0" : "The maximum speed of balls that fly in the spawner"
	ballradius(float) : "Ball radius" : "20.0" : "The radius of the energy balls"
	balltype(choices) : "Ball Type" : "Combine Energy Ball 1" =
	[
		0 : "Combine Energy Ball 1"
		1 : "Combine Energy Ball 2"
		2 : "Combine Energy Ball 3"
	]
	ballrespawntime(float) : "Ball Respawn Time" : "4.0f" : "The energy balls respawn time"

	input Enable(void) : "Enable spawning of combine balls"
	input Disable(void) : "Disable spawning of combine balls"

	output OnBallGrabbed(void) : "Fired when a combine ball is grabbed from the field by a mega physcannon"
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitTopSide(void) : "Fired when a combine ball in hits the top side of the field (only gets triggered when Combine Power supply is checked)"
	output OnBallHitBottomSide(void) : "Fired when a combine ball in hits the bottom side of the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
	output OnFirstBallReinserted(void) : "Fired when the first combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
]

@BaseClass = BaseZombie
[
	noheadcrab(choices) : "Allow Headcrab" : 1 =
	[
		0 : "Yes"
		1 : "No"
	]
]

@BaseClass base(BaseNPC) = BaseHeadcrab
[
	startburrowed(choices) : "Start burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spawnflags(flags) = 
	[
		65536  :  "Start hidden" : 0
		131072 :  "Start hanging from ceiling" : 0
	]


	input StartHangingFromCeiling(void) : "Start hanging from ceiling."
	input DropFromCeiling(void) : "Drop if hanging from ceiling."
]

@BaseClass base(BaseNPC, RappelNPC) = BaseCombine
[
	additionalequipment(choices) : "Weapons" : "weapon_smg1" =
	[
		"weapon_ar2" : "AR2"
		"weapon_shotgun" : "Shotgun"
		"weapon_smg1" : "SMG1"
		"weapon_stunstick" : "Stun Stick"
		"0" : "Nothing"
	]

	spawnflags(Flags) = 
	[
		65536 :  "Start LookOff" : 0
		131072	: "Don't drop grenades" : 0
		262144  : "Don't drop ar2 alt fire (elite only) " : 0
	]

	NumGrenades(choices) : "Number of Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	// Inputs
	input LookOn(void) : "Look normally"	
	input LookOff(void) : "Don't look for myself, use other squad member's eyes"
	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input ThrowGrenadeAtTarget(target_destination) : "Throw a grenade at the specified target."
]

@BaseClass base(Targetname) size(-10 -10 -10, 10 10 10) color(255 0 255) = player_control
[
	// Inputs
	input Activate(void) : "Turns on"
	input Deactivate(void) : "Turns off"
	input SetThrust(string) : "Set Thrust"
	input SetSideThrust(string)  : "Set Side Thrust"
]

@BaseClass base(Targetname, Parentname, Angles) color(255 0 255) sphere(m_flRadius) = BaseScripted
[
	m_iszEntity(target_destination) : "Target NPC" : : "The name or class name (such as 'npc_zombie') of an NPC to use for this script."
	m_iszIdle(string) : "Pre Action Idle Animation" : "" : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must wait for the script to be triggered. Use 'Start on Spawn' flag or MoveToPosition input to play this idle animation."
	m_iszEntry(string) : "Entry Animation" : "" : "The name of the sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play when the sequence starts, before transitioning to play the main action sequence."
	m_iszPlay(string) : "Action Animation" : "" : "The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play."
	m_iszPostIdle(string) : "Post Action Idle Animation" : "" : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play after the action animation."
	m_iszCustomMove(string) : "Custom Move Animation" : "" : "Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'crouch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position."
	m_bLoopActionSequence(Choices) : "Loop Action Animation?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	m_bSynchPostIdles(Choices) : "Synch Post Idles?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."
	m_flRepeat(integer) : "Repeat Rate ms" : 0
	m_fMoveTo(Choices) : "Move to Position" : 1 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		3 : "Custom movement"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
	]
	m_iszNextScript(target_destination) : "Next Script" : : "The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts."
	m_bIgnoreGravity(choices) : "Ignore Gravity on NPC during script" : 0 : "If this is set to 'Yes', the NPC will not be subject to gravity while playing this script." =
	[
		0 : "No"
		1 : "Yes"
	]
	m_bDisableNPCCollisions(choices) : "Disable NPC collisions during script" : 0 : "Useful for when NPCs playing scripts must interpenetrate while riding on trains, elevators, etc. This only disables collisions between the NPCs in the script and must be enabled on BOTH scripted_sequences." =
	[
		0 : "No"
		1 : "Yes"
	]


	// Inputs
	input BeginSequence(void) : "Summons an NPC to act out the scripted sequence."
	input MoveToPosition(void) : "Summons an NPC to the script location. They will play their scripted idle (or ACT_IDLE if none is specified) until BeginSequence is triggered."
	input CancelSequence(void) : "Stops the scripted sequence. If fired after a sequence starts, this input will not take effect until the NPC finishes playing the scripted action animation."

	// Outputs
	output OnBeginSequence(void) : "Fires when the action animation begins playing."
	output OnEndSequence(void) : "Fires when the action animation completes."
	output OnCancelSequence(void) : "Fires when the sequence is cancelled."
	output OnCancelFailedSequence(void) : "Fires when the sequence is cancelled without ever playing (OnCancelSequence will also fire)."
	output OnScriptEvent01(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 1 } in the QC."
	output OnScriptEvent02(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 2 } in the QC."
	output OnScriptEvent03(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 3 } in the QC."
	output OnScriptEvent04(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 4 } in the QC."
	output OnScriptEvent05(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 5 } in the QC."
	output OnScriptEvent06(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 6 } in the QC."
	output OnScriptEvent07(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 7 } in the QC."
	output OnScriptEvent08(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 8 } in the QC."
]

@BaseClass base(Targetname) = LeadGoalBase
[
	actor(target_name_or_class) : "Actor(s) to affect"
	goal(string) : "Target Entity"
	WaitPointName(target_destination) : "Point to wait at if the target's not visible"
	WaitDistance(float) : "Wait until player gets this close"
	LeadDistance(float) : "Lead Distance" : "64" : "The player is considered to be lagging if he's beyond this distance.  The Actor will consider retrieving when the player is 4x 'Lead Distance' away."
	RetrieveDistance(float) : "Retrieve Distance" : "96" : "The distance from the player that the NPC should return to when retrieving a lagging player. Must be between ('Lead Distance' + 24) and ('Lead Distance' * 4) to avoid the leader ping-ponging."
	SuccessDistance(float) : "Success Distance" : "0" : "The distance from the player (to the NPC) that the player must be within for the Lead to succeed, once the NPC has reached the goal. If set to 0, it'll use the lead distance instead (for legacy support)."
	Run(choices) : "Run instead of Walk" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	Retrieve(choices) : "Retrieve player?" : 1 =
	[
		0 : "No, just idle and wait"
		1 : "Yes, move to retrieve"
	]	
	ComingBackWaitForSpeak(choices) : "Before Coming Back, Wait for speech?" : 1 =
	[
		0 : "No, come back while speaking"
		1 : "Yes, wait for speech to finish"
	]
	RetrieveWaitForSpeak(choices) : "On Retrieve, Wait for speech?" : 1 =
	[
		0 : "No, start leading while speaking"
		1 : "Yes, wait for speech to finish"
	]
	DontSpeakStart(choices) : "Speak start greeting?" : 0 =
	[
		0 : "Yes, speak the start greeting"
		1 : "No, don't speak the greeting"
	]
	LeadDuringCombat(choices) : "Lead during combat?" : 0 =
	[
		0 : "No. Stop to fight, resume leading when safe."
		1 : "Yes, lead while fighting."
	]
	GagLeader(choices) : "Gag Leader?" : 0 =
	[
		0 : "No. Speak lead concepts normally, respecting other lead speech settings."
		1 : "Yes, don't speak any lead concepts at all, overriding all other lead speech settings."
	]
	
	AttractPlayerConceptModifier(string)	: "Attract player concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ATTRACTPLAYER' concept is spoken."
	WaitOverConceptModifier(string)		: "Player wait over concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_WAITOVER' concept is spoken."
	ArrivalConceptModifier(string)		: "Arrival concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_ARRIVAL' concept is spoken."
	PostArrivalConceptModifier(string)	: "Post-arrival concepts modifier"
	SuccessConceptModifier(string)		: "Success concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_SUCCESS' concept is spoken."
	FailureConceptModifier(string)		: "Failure concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'lead_fail' concept is spoken."
	ComingBackConceptModifier(string)	: "Coming Back concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_RETRIEVE' concept is spoken. Spoken as the NPC starts returning to the player to retrieve him."
	RetrieveConceptModifier(string)		: "Retrieve concept modifier" : "" : "Appended to the keyvalues passed into the response rules when the 'TLK_LEAD_COMINGBACK' concept is spoken. Spoken when NPC has finally reached the player to retrieve him."
	
	// Spawnflags
	spawnflags(Flags) = 
	[
		1 : "No def success" : 0
		2 : "No def failure" : 0
		4 : "Use goal facing" : 1
	]

	// Inputs
	input Activate( void )  : "Begin the leading behavior"
	input Deactivate( void )  : "Stop the leading behavior"
	
	input SetSuccess( void ) : "Notify success of leading"
	input SetFailure( void ) : "Notify failure of leading"
	
	// Outputs
	output OnArrival( void ) : "Fires when NPC reaches the lead point"
	output OnArrivalDone( void ) : "Fires when NPC has played out any arrival speech"
	output OnSuccess( void ) : "Fires when NPC achieves the goal"
	output OnFailure( void ) : "Fires when NPC fails to achieves the goal"
	output OnDone( void ) : "Fires when NPC completes behavior (any post-success or fail acting is complete)"
]

@BaseClass base(Targetname) = FollowGoal
[
	actor(target_name_or_class) : "Actor(s) to affect"
	goal(string) : "Target Entity" : : "The name of the entity to follow. If blank, and the actor likes the player, then defaults to player"

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	MaximumState(choices) : "Maximum state" : 1 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]

	Formation(choices) : "Formation" : 0 =
	[
		0 : "Close circle"
		1 : "Wide circle"
		5 : "Medium circle"
		6 : "Sidekick"
		8 : "Vortigaunt"
	]

	// Inputs
	input Activate( void ) : "Begin the follow behavior"
	input Deactivate( void ) : "Cease the follow behavior"
]

@BaseClass base(Targetname) = BaseActBusy
[
	actor(target_name_or_class) : "Actor(s) to affect" : "" : "NPC's that should act busy"

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	busysearchrange(float) : "Search Range for Busy Hints" : 2048
	visibleonly(choices) : "Visible Busy Hints Only" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Activate( void ) : "Begin acting busy"
	input Deactivate( void ) : "Cease acting busy"
	input SetBusySearchRange( float ) : "Update the busy search range for all actors."
	input ForceNPCToActBusy( string ) : "Force an NPC to act busy. Takes parameters, separated by spaces: <Targetname> <hint node targetname> <optional:teleport> <optional:$customactivityorsequence> <maximum time to actbusy>. If no hint node targetname is specified, it'll search for a random one. If no max time is specified, it'll use the default. Specifying 0 as the max time will make the NPC act busy until disturbed. If the optional teleport parameter is specified, the NPC will teleport to the act busy point. A custom move animation can be specified by prepending $ to the name of it. i.e. $ACT_RUN will make the NPC Run. Sequence names can be used instead of activities."
	input ForceThisNPCToActBusy( string ) : "Force an NPC outputted from another entity to act busy. (only usable from an output that specifies an entity)"
	input ForceThisNPCToLeave( string ) : "Force an NPC outputted from another entity to find a HINT_NPC_EXIT_POINT hintnode and vanish."

	// Outputs
	output OnNPCStartedBusy(string) : "Fired when an NPC targeted by this goal starts an ActBusy animation."
	output OnNPCFinishedBusy(string) : "Fired when an NPC targeted by this goal finishes an ActBusy."
	output OnNPCLeft(string) : "Fired when an NPC target by this goal finishes a forced Leave."
]

@BaseClass base(Targetname, Parentname, Origin, Angles, RenderFields, Global, Shadow) = BaseTank
[
	spawnflags(flags) =
	[
		1 : "Active" : 0
		16: "Only Direct" : 0
		32: "Controllable" : 0
		64: "Damage Kick" : 0
	      1024: "NPC Controllable" : 0
              2048: "NPC Set Controller" : 0
	      4096: "Allow friendlies to hit player" : 0
	     32768: "Non-solid." : 0
	    131072: "Perfect accuracy every 3rd shot at player" : 0
	]

	control_volume(target_destination) : "Control Volume" : "" : "Name of a trigger the specifies the volume in which a player must be to control this tank."

	// Mainly for use with 1009 team settings (game_team_master)
	master(string) : "(Team) Master" 

	yawrate(string) : "Yaw rate" : "30"
	yawrange(string) : "Yaw range" : "180"
	yawtolerance(string) : "Yaw tolerance" : "15"
	pitchrate(string) : "Pitch rate" : "0"
	pitchrange(string) : "Pitch range" : "0"
	pitchtolerance(string) : "Pitch tolerance" : "5"
	barrel(string) : "Barrel Length" : "0"
	barrely(string) : "Barrel Horizontal" : "0"
	barrelz(string) : "Barrel Vertical" : "0"
	spritesmoke(sprite) : "Smoke Sprite" : ""
	spriteflash(sprite) : "Flash Sprite" : ""
	spritescale(string) : "Sprite scale" : "1"
	rotatestartsound(sound) : "Rotate Start Sound" : ""
	rotatesound(sound) : "Rotate Loop Sound" : ""
	rotatestopsound(sound) : "Rotate Stop Sound" : ""
	firerate(string) : "Rate of Fire" : "1"
	bullet_damage(string) : "Damage Per Bullet" : "0" : "If set to 0, it'll use the base weapon bullet's damage."
	bullet_damage_vs_player(string) : "Damage Per Bullet Vs Player" : "0" : "If set to 0, it'll use the Damage Per Bullet value."
	persistence(string) : "Firing persistence" : "1" : "(Seconds) How long to keep firing at last known position after lose sight of target"
	persistence2(string) : "Firing persistence2" : "0" : "(Seconds) After lost enemy and persistence time has passed, how long to occasionally fire at enemy's last known position"
	firespread(choices) : "Bullet accuracy" : 0 =
	[
		0: "Perfect Shot"
		1: "Small cone"
		2: "Medium cone"
		3: "Large cone"
		4: "Extra-large cone"
	]
	minRange(string) : "Minmum target range" : "0"
	maxRange(string) : "Maximum target range" : "0"
	_minlight(string) : "Minimum light level"

	gun_base_attach(string) : "Gun Base Attachment" : "" : "If Parent is specified, this is the attachment point on the parent to aim from."
	gun_barrel_attach(string) : "Gun Barrel Attachment" : "" : "If Parent is specified, this is the attachment point on the parent to fire from. If you specify this, you'll want to specify the Gun Base Attachment too."
	gun_yaw_pose_param(string) : "Gun Yaw Pose Param" : "" : "If Parent + the Gun Pitch Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters."
	gun_yaw_pose_center(float) : "Gun Yaw Pose Center" : "0" : "The center yaw pose parameter of the gun on the parent"
	gun_pitch_pose_param(string) : "Gun Pitch Pose Param" : "" : "If Parent + the Gun Yaw Pose Param is specified, then the gun itself will be invisible and the func_tank will steer a gun on the parent using the pose parameters."
	gun_pitch_pose_center(float) : "Gun Pitch Pose Center" : "0" : "The center pitch pose parameter of the gun on the parent"

	ammo_count(integer) : "Ammunition Count" : -1 : "Only applies to player use. -1 = unlimited ammo."

	LeadTarget(choices) : "Lead Target" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	npc_man_point(target_destination) : "NPC Man Point" : "" : "Point where NPC must stand to man this func_tank."
	playergraceperiod(float) : "Post-NPC Attack Grace Period" : "0" : "If specified, NPC's manning this func tank won't fire at the player, after firing at a non-player, for this amount of time."
	ignoregraceupto(float) : "Ignore Grace Upto" : "768" : "The player grace period is ignored if the player's under this distance from the func_tank."
	playerlocktimebeforefire(float) : "Player Lock Time" : "0" : "The tank must have the player as a target for this amount of time before it's allowed to fire."

	effecthandling(choices) : "Effect Handling" : 0 =
	[
		0 : "Use Individual Settings."
		1 : "AR2"
		2 : "Combine Cannon"
	]

	// Inputs
	input Activate(void) : "Turn the tank on"
	input Deactivate(void) : "Turn the tank off (go dormant)"
	input SetFireRate(string) : "How fast to fire (0 = don't fire)"
	input SetDamage(string) : "Set the Damage Per Bullet"
	input SetTargetPosition(string) : "World position that I should aim at"
	input SetTargetDir(vector) : "Direction to aim at."
	input SetTargetEntityName(string) : "Name of entity I should follow/attack"
	input SetTargetEntity(string) : "Entity I should follow/attack (output from other entity only)"
	input ClearTargetEntity(void) : "Clear the entity I should be attacking."
	input FindNPCToManTank(string) : "Find a nearby NPC to man this func_tank."
	input StartFindingNPCs(void) : "Start searching for NPCs to man this func_tank."
	input StopFindingNPCs(void) : "Stop searching for NPCs to man this func_tank."
	input ForceNPCOff(void) : "Force the NPC manning this func_tank (if any) to leave."
	input SetMaxRange(float) : "Set the max range of the func_tank."

	// Outputs
	output OnFire(void) : "Fires when the tank fires its bullets"
	output OnAquireTarget(void) : "Fires when target is newly in range and can be shot"
	output OnLoseTarget(void) : "Fires when when target goes out of range"
	output OnAmmoDepleted(void) : "Fires when tank runs out of ammo"
	output OnGotController(void) : "Fires when an NPC starts to control this tank. Players do NOT fire this input."
	output OnLostController(void) : "Fires when the NPC controller of the tank stops controlling it. Players do NOT fire this input."
	output OnGotPlayerController(void) : "Fires when a Player starts to control this tank. NPCs do NOT fire this input."
	output OnLostPlayerController(void) : "Fires when the Player controller of the tank stops controlling it. NPCs do NOT fire this input."
	output OnReadyToFire(void) : "Fires once when the tank is done waiting to fire between rounds"
]

@BaseClass base(Targetname, Origin, Global, prop_static_base) = BaseVehicle
[
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/jeep_test.txt"
	actionScale(float) : "Scale of action input / framerate" : "1"

	// Inputs
	input Action(float) : "Set the speed of the action animation"

	input TurnOn(void) : "Turn on: Start engine & enable throttle"
	input TurnOff(void) : "Turn off: Stop engine, disable throttle, engage brakes."

	input Lock(void) : "Prevent the player from entering or exiting the vehicle."
	input Unlock(void) : "Re-allow the player to enter or exit the vehicle."
]

@BaseClass base(BaseVehicle) = BaseDriveableVehicle
[
	VehicleLocked(choices) : "Start locked" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	

	// Outputs
	output PlayerOn(void) : "Player entered the vehicle"
	output PlayerOff(void) : "Player exited the vehicle"
	
	output PressedAttack(void) : "Player Pressed attack key"
	output PressedAttack2(void) : "Player Pressed attack2 key"

	output AttackAxis(string) : "State of attack button [0,1]"
	output Attack2Axis(string) : "State of attack2 button [0,1]"
	
	// Inputs
	input HandBrakeOn(void) : "Turns the handbrake on"
	input HandBrakeOff(void): "Releases the handbrake"
]

//
// Point Classes
//

@PointClass base(Targetname) iconsprite("editor-puddy/tf_gamerules") = tf_gamerules : "Proxy entity for TF Gamerules"
[
	hud_type(choices) : "Hud Type" : 0 : "Override the HUD type clients should display." =
	[
		0 : "Default"
		1 : "CTF HUD"
		2 : "CP HUD"
		3 : "Payload HUD"
	]
	
	fourteammode(choices) : "4 Team Mode" : 0 : "Sets 4 team mode on." =
	[
		0 : "No"
		1 : "Yes"
	]

	ctf_overtime(choices) : "CTF Overtime" : 0 : "Allow Overtime for CTF maps." =
	[
		0 : "No"
		1 : "Yes"
	]

	force_dynamicnpcs(choices) : "Dynamic NPCs" : 0 : "Force Dynamic NPCs System." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	nocustomclasses(choices) : "No Custom Classes" : 0 : "Force disables custom classes on this map." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	npc_drop_currency(choices) : "Enable NPCs drop currency" : 0 : "Enables regular NPCs to drop currency." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	npc_drop_currency_chance(float) : "NPC currency drop chance" : 0 : "If set to 0, fc_dropcurrency_ondeath_chance will be used instead." 
	
	nomapreload(choices) : "Disable map reload on all players dead" : 0 : "Servers can still disable map reloads with mp_reset." =
	[
		0 : "Map Reloads"
		1 : "No Map Reload"
	]
	
	input SetRedTeamRespawnWaveTime(float) : "Set the RED team's respawn wave time"
	input SetBlueTeamRespawnWaveTime(float) : "Set the BLU team's respawn wave time"
	input SetGreenTeamRespawnWaveTime(float) : "Set the Green team's respawn wave time"
	input SetYellowTeamRespawnWaveTime(float) : "Set the Yellow team's respawn wave time"
	input AddRedTeamRespawnWaveTime(float) : "Add to the RED team's respawn wave time"
	input AddBlueTeamRespawnWaveTime(float) : "Add to the BLU team's respawn wave time"
	input AddGreenTeamRespawnWaveTime(float) : "Add to the Green team's respawn wave time"
	input AddYellowTeamRespawnWaveTime(float) : "Add to the Yellow team's respawn wave time"
	input SetRedTeamGoalString(string) : "Set the RED team's goal string to show in the hud"
	input SetBlueTeamGoalString(string) : "Set the BLU team's goal string to show in the hud"
	input SetGreenTeamGoalString(string) : "Set the Green team's goal string to show in the hud"
	input SetYellowTeamGoalString(string) : "Set the Yellow team's goal string to show in the hud"
	input SetRedTeamRole(integer) : "Set RED team role, 0=none, 1=defenders, 2=attackers"
	input SetBlueTeamRole(integer) : "Set BLU team role, 0=none, 1=defenders, 2=attackers"
	input SetGreenTeamRole(integer) : "Set Green team role, 0=none, 1=defenders, 2=attackers"
	input SetYellowTeamRole(integer) : "Set Yellow team role, 0=none, 1=defenders, 2=attackers"
	input AddRedTeamScore(integer) : "Add to the RED team score (can be a negative number)"
	input AddBlueTeamScore(integer) : "Add to the BLU team score (can be a negative number)"
	input AddGreenTeamScore(integer) : "Add to the Green team score (can be a negative number)"
	input AddYellowTeamScore(integer) : "Add to the Yellow team score (can be a negative number)"
	//input SetRequiredObserverTarget(string) : "Sets the given entity (by name) to be the required observer target for all spectators. Must be cleared to allow spectators to cycle through targets normally again."
	//input SetStalemateOnTimelimit(bool) : "Determines whether mp_timelimit can end the match in the middle of a round."
	input SetRedKothClockActive(void) : "Set the RED team clock active for KOTH maps."
	input SetBlueKothClockActive(void) : "Set the BLU team clock active for KOTH maps."
	input SetGreenKothClockActive(void) : "Set the Green team clock active for KOTH maps."
	input SetYellowKothClockActive(void) : "Set the Yellow team clock active for KOTH maps."
	input SetCTFCaptureBonusTime(float) : "Set the length (in seconds) of team crit time for CTF captures. 0 = none"
	input PlayVORed(string) : "Play the given sound entry via the VO channel"
	input PlayVOBlue(string) : "Play the given sound entry via the VO channel"
	input PlayVOGreen(string) : "Play the given sound entry via the VO channel"
	input PlayVOYellow(string) : "Play the given sound entry via the VO channel"
	input PlayVO(string) : "Play the given sound entry via the VO channel"
	
	input HandleMapEvent(string) : "Handles map events. This will be different events for different maps."
	input SetCustomUpgradesFile(string) : "Specifies the path relative to the game directory to the upgrades file to be used."
	input SetRoundRespawnFreezeEnabled(integer) : "Enable/disable the player movement freeze period after a round begins."
	input SetMapForcedTruceDuringBossFight(bool) : "Enable/disable truce between the teams during a fight with Monoculus or Merasmus."

	input InputSetTimeScale(float) : "Set server timescale."
	input SpawnBoss(void) : "Spawn Dynamic NPC's Bosses."

	//output OnWonByTeam1(void) : "Sent when RED wins the round."
	//output OnWonByTeam2(void) : "Sent when BLUE wins the round."
	//output Team1PlayersChanged(integer) : "Sent when RED team player count changes, due to a player joining or leaving the team."
	//output Team2PlayersChanged(integer) : "Sent when BLUE team player count changes, due to a player joining or leaving the team."

	output IsHL2BetaEnabled(void) : "Fired when sv_hl2_beta is enabled."
	output IsDynamicNPCEnabled(void) : "Fired when sv_dynamicnpcs is enabled."
	
	output OnStateEnterBetweenRounds(void) : "Fired when entering the between-rounds state (MvM and Competitive)."
	output OnStateEnterPreRound(void) : "Fired when entering the pre-round state (just before round running)."
	output OnStateExitPreRound(void) : "Fired when exiting the pre-round state (just before round running)."
	output OnStateEnterRoundRunning(void) : "Fired when entering the round-running state."
	//output OnMatchSummaryStart(void) : "Fired when the match summary begins and players are spawned on stage."
	output OnTruceStart(void) : "Sent when a truce starts."
	output OnTruceEnd(void) : "Sent when a truce ends."
]

@PointClass base(PlayerClass, Angles) studio("models/editor/playerstart.mdl") = info_player_coop : "This entity indicates the position and facing direction at which the player will spawn in co-op modes." []

@PointClass base(Targetname, Parentname, TeamNum, EnableDisable, Angles) studio("models/player/heavy.mdl") = info_player_teamspawn :
	"This entity marks the spawn point for Team Fortress players."
[
	controlpoint(target_destination) : "Associated Control Point" : : "The team_control_point associated with this spawn. Ownership of control points will control this spawn point's enabled state."

	spawnflags(flags) =
	[
		1 :	   "Scout" : 1
		2 :    "Sniper" : 1
		4 :    "Soldier" : 1
		8 :    "Demoman" : 1
		16 :   "Medic" : 1
		32 :   "Heavy" : 1
		64 :   "Pyro" : 1
		128 :  "Spy" : 1
		256 :  "Engineer" : 1
		//512 :	   "Civilian" : 1
		//1024 :    "John" : 1
		//2048 :    "Mercenary" : 1
		//4096 :    "Repressor" : 1
		//8192 :    "Enforcer" : 1
		//16384 :   "Jerry" : 1
		//32768 :   "Saxton" : 1
		//65536 :   "Telecon" : 1
		//131072 :  "Agent" : 1
		//commented out until someone finds a way to make it so that old player spawns have these flags on by default -spyguy26
	]

 	round_bluespawn(target_destination) : "Blue spawn for round" : : "Blue spawn point when the associated round is being played."
	round_redspawn(target_destination) : "Red spawn for round" : : "Red spawn point when the associated round is being played."
 	round_greenspawn(target_destination) : "Green spawn for round" : : "Green spawn point when the associated round is being played."
	round_yellowspawn(target_destination) : "Yellow spawn for round" : : "Yellow spawn point when the associated round is being played."

	input RoundSpawn(void) : "Re-find control points"
]

@PointClass base(PlayerClass, Angles) studio("models/player/heavy.mdl") = info_player_deathmatch :
	"This entity indicates the position and facing direction at which the player will spawn during a deathmatch map. Any number of "+
	"info_player_deathmatch entities may be placed in a map."
[
]

@PointClass base(Targetname) iconsprite("editor-puddy/game_forcerespawn") = game_forcerespawn :
	"Removes buildings, grenades, etc., from the world and forces all players to respawn " +
	"(without being killed)."
[
	// Inputs
	input ForceRespawn(void) : "Force players to respawn and remove buildings, grenades, etc., from the world.."
	input ForceRespawnSwitchTeams(void) : "Switch all players to the opposite team, and then respawn all players (and remove buildings, grenades, etc., from the world)."
	//input ForceTeamRespawn(integer) : "Force players on a specific team to respawn. 2 for Red, 3 for Blue. This does NOT remove buildings, grenades, etc., from the world..."
	
	// Outputs
	output OnForceRespawn(void) : "Sent when the entity respawns the players."	
]

@PointClass base(Targetname, Parentname, GameType, TeamNum, EnableDisable, Angles) studio("models/flag/briefcase.mdl") = item_teamflag : "Team Fortress flag entity."
[
	ReturnTime(integer) : "Return time (in seconds)" : 60 : "Length of time (in seconds) before dropped flag/intelligence returns to base."

	flag_model(string) : "Model" : "models/flag/briefcase.mdl" : "The model to be used for this entity."
	flag_icon(string) : "Icon" : "../hud/objectives_flagpanel_carried" : "The icons used for the HUD in some game modes. Format: materials/vgui/[materialname]_red and materials/vgui/[materialname]_blue"
	flag_paper(string) : "Paper Particle" : "player_intel_papertrail" : "Particle effect used for the falling paper trail."
	flag_trail(string) : "Trail Effect" : "flagtrail" : "Materials used for the trail effect. Format: materials/effects/[materialname]_red and materials/effects/[materialname]_blu"

	trail_effect(choices) : "Use Trail Effect" : 1 : "Use trail effect when the player is carrying the flag." =
	[
		0 : "None"
		1 : "All Effects"
		2 : "Paper Trail Only"
		3 : "Color Trail Only"
	]
	
	VisibleWhenDisabled(choices) : "Visible When Disabled" : 0 : "Flag appears semitransparent when disabled." =
	[
		0 : "No"
		1 : "Yes"
	] 
	
	// Outputs
	output OnReturn(void)  : "Sent when the flag is returned via timer."
	output OnPickup(void)  : "Sent when the flag is picked up."
	output OnPickupTeam1(void) : "Sent when the flag is picked up by RED."
	output OnPickupTeam2(void) : "Sent when the flag is picked up by BLU."
	output OnDrop(void)    : "Sent when the flag is dropped."
	output OnCapture(void) : "Sent when the flag is captured."
	output OnCapTeam1(void) : "Sent when the flag is captured by RED."
	output OnCapTeam2(void) : "Sent when the flag is captured by BLU."
	output OnTouchSameTeam(void) : "Sent when the flag is touched by a player on the same team (BLU player touches BLU flag, RED player touches RED flag)."

]

@PointClass base(Targetname) = point_intermission : "Entity that ends the match and triggers an intermission."
[
	// Inputs
	input Activate(void) : "Activate. Causes the game to end and the intermission to begin."
]

@PointClass base(Targetname, TeamNum, Angles, EnableDisable) studioprop("models/editor/camera.mdl") = info_observer_point :
	"Observer Point"
[
	associated_team_entity(target_destination) : "Associated Team Entity" : "" : "An entity associated with this point that can be owned by a team (such as a flag or control point). Players will only be able to use this observer point if their team owns the associated team entity."

	defaultwelcome(choices) : "Welcome Point" : 0 :  "This marks this point as a welcome point. Players use this when connectig to servers the first time." =
	[
		0 : "No"
		1 : "Yes"
	]

	fov(float) : "FOV" : 0
]

@PointClass base(Targetname) iconsprite("editor-puddy/game_round_win") = game_round_win :
	 "Tells the game rules that the round has either been won (if a team is assigned) " +
	 "or enter Sudden Death mode (if no team is assigned)."
[	
	TeamNum(choices) : "Team" : 0 : "Team" =
	[
		0 : "None (Sudden Death)"
		2 : "RED"
		3 : "BLU"
	]
	
	force_map_reset(choices) : "Force map reset" : 1 : "Force the map to reset during the force respawn after the round is over." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	switch_teams(choices) : "Switch teams on map win?" : 0 : "Switch the teams when the game is going to be reset." = 
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input SetTeam(integer) : "Changes the entity's team (this is used to determine which team has won the round (0 = none)."
	input RoundWin(void) : "Tell the game rules the round is over."
	
	// Outputs
	output OnRoundWin(void) : "Sent when the entity tells the game rules the round is over."	
]

@PointClass base(Targetname,EnableDisable) iconsprite("editor-puddy/team_round_timer") = team_round_timer :
	"Round Timer. Timer starts paused by default."
[
	timer_length(integer) : "Timer length (in seconds)" : 600 : "Initial timer length."
	max_length(integer) : "Max timer length (in seconds)" : 0 : "Maximum timer length (0 = no max). This value is used to ensure the timer never goes above this value when SetTime and AddTime are used."

	start_paused(choices) : "Start paused" : 1 : "Should the timer start paused? (will need to send a Resume input to start the timer if this is set)." =
	[
		0 : "No"
		1 : "Yes"
	]

	setup_length(integer) : "Setup timer length (in seconds)" : 0 : "Length of setup time before the round begins and the timer starts to countdown the normal time. (0 = no setup time)  Setup time is run at the beginning of every round before the normal time begins."

	reset_time(choices) : "Reset time on round restart" : 0 : "Reset the timer time after a round restart.  This is not the setup time, but the normal round time." =
	[
		0 : "No"
		1 : "Yes"
	]

	auto_countdown(choices) : "Use countdown sounds" : 1 : "Let the timer automatically count down the end of a round." =
	[
		0 : "No"
		1 : "Yes"
	]

	show_in_hud(choices) : "Show timer in the HUD" : 1 : "Note: You can only show one timer in the HUD at a time." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Pause(void) : "Pause the timer."
	input Resume(void) : "Resume the timer."
	input SetTime(integer) : "Set the timer to this value (in seconds)."
	input AddTime(integer) : "Add time to the timer (in seconds). Added time cannot excede the max timer length."
	input AddTeamTime(string) : "Input takes a string (space delimited) with the team number and the time to be added (in seconds) because of the team (2 for red, 3 for blue, and 0 for no team...but you could just use AddTime for that). Added time cannot excede the max timer length. Example: 2 600 (adds 10 minutes because of team red)"
	input Restart(void) : "Restart the timer."
	input ShowInHUD(integer) : "Show this timer in the HUD (0 no, 1 yes)."
	input SetMaxTime(integer) : "Set the max timer length to this value (in seconds). The timer's time will never excede this value."
	input AutoCountdown(integer) : "Turn off/on the auto countdown feature (0 no, 1 yes)."
	input SetSetupTime(integer) : "Set the setup time length to this value (in seconds)."

	// Outputs
	output On5MinRemain(void) : "Sent when 5 minutes remain."
	output On4MinRemain(void) : "Sent when 4 minutes remain."
	output On3MinRemain(void) : "Sent when 3 minutes remain."
	output On2MinRemain(void) : "Sent when 2 minutes remain."
	output On1MinRemain(void) : "Sent when 1 minutes remain."
	output On30SecRemain(void) : "Sent when 30 seconds remain."
	output On10SecRemain(void) : "Sent when 10 seconds remain."
	output On5SecRemain(void) : "Sent when 5 seconds remain."
	output On4SecRemain(void) : "Sent when 4 seconds remain."
	output On3SecRemain(void) : "Sent when 3 seconds remain."
	output On2SecRemain(void) : "Sent when 2 seconds remain."
	output On1SecRemain(void) : "Sent when 1 second remains."

	output OnRoundStart(void) : "Sent when the round starts."
	output OnFinished(void) : "Sent when the timer is finished."

	output OnSetupStart(void) : "Sent when the setup time begins."
	output OnSetupFinished(void) : "Sent when the setup time is finished."
]

@PointClass base(Targetname,EnableDisable) iconsprite("editor/logic_relay.vmt") = info_spawn_manager :
	"Spawn manager for managing checkpoints and teleporting players."
[
	initialcheckpoint(string) : "InitialCheckpoint" : "" : "Sets the initial spawn point when this is created."

	teamnum(choices) : "teamnum" : 0 : "Team that this should manage" =
	[
		0 : "Applies to any team if there is no corresponding spawn manager."
		2 : "Red"
		3 : "Blue"
		4 : "Green"
		5 : "Yellow"
	]
	
	input RespawnPlayers(void) : "Respawn all players on this team (if set)"
	input SetCheckPoint(string) : "Sets the active checkpoint and clears the others."
	input TeleportPlayers(string) : "Teleports players to the named entity's origin."
	input MovePlayers(void) : "Move all players to the !activator's position. Use this on triggers usually."
	input ClearCheckpoint(void) : "Clears all checkpoints, in the future, this will disable respawning for the team."
	input AddCheckPoint(string) : "Add a checkpoint for multiple players spawning in an area."
]

@PointClass base(Targetname,EnableDisable) iconsprite("editor/logic_relay.vmt") = hud_timer :
	"Hud Timer. Timer starts paused by default."
[
	TimerText(string) : "TimerText" : "COUNT DOWN" : "Sets the label displayed on this timer."
	TimerType(choices) : "TimerType" : 1 : "Sets the type of timer, either count down or up" =
	[
		1 : "Count down"
		2 : "Count up"
	]

	input Start(integer) : "Starts the timer for the input amount of seconds."
	input Stop(void) : "Stops the timer."
	input Change(integer) : "Update the timer time - value is added to current timer time; allows positive and negative values."
	input SetTimerLabel(string) : "Sets the label displayed on the timer."
	
	output OnTimer(void) : "Sent when the timer ends."
]

//
// Items
//

@BaseClass color(0 0 200) base(Targetname, TeamNum, EnableDisable, Toggle, Angles, PlayerTouch, FadeDistance) = Item
[
	powerup_model(string) : "Model" : "" : "Change the model to something other than the default model." 
	respawntime(integer) : "Respawn Time" : 10 : "Changes the time, in seconds, before the item respawns."
	respawndelay(integer) : "Initial Spawn Delay" : 0 : "Makes the item spawn after a initial delay."
	spawn_sound(sound): "Spawn Sound" : "Item.Materialize" : "Sound to play when Pickup Spawns."
	HiddenWhenRespawning(boolean) : "Hidden while Respawning?" : 1 : "Whether or not the pickup becomes hidden on pickup."	
	AutoMaterialize(choices) : "Auto-Materialize" : 1 : "The pickup should automatically materialize after being picked up." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnPlayerTouch(void) : "Fires when the player touches this item."
	//output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this item. Fires on: Player Touch (whether or not player actually acquires the item) or picked up by +USE."
	output OnRespawn(void) : "Fires when the item respawns."	

]

@PointClass base(Item) studio("models/items/medkit_large.mdl") = item_healthkit_full : "Health Kit Full" []
@PointClass base(Item) studio("models/items/medkit_small.mdl") = item_healthkit_small :	"Health Kit Small" []
@PointClass base(Item) studio("models/items/medkit_medium.mdl") = item_healthkit_medium : "Health Kit Medium" []
@PointClass base(Item) studio("models/items/medkit_mega.mdl") = item_healthkit_mega : "Health Kit Mega" []

//@PointClass base(Item) studio("models/items/medkit_large.mdl") sphere(fademindist) sphere(fademaxdist) = item_healthkit_full :
//	"Health Kit Full"
//[
//	powerup_model(choices) : "Model" : "" : "Change the model to something other than the default model. Not shown in Hammer." =
//	[
//		"" : "Default"
//		"models/props_halloween/halloween_medkit_large.mdl" : "Halloween Soup Cauldron"
//	]
//]
//
//@PointClass base(Item) studio("models/items/medkit_small.mdl") sphere(fademindist) sphere(fademaxdist) = item_healthkit_small :
//	"Health Kit Small"
//[
//	powerup_model(choices) : "Model" : "" : "Change the model to something other than the default model. Not shown in Hammer." =
//	[
//		"" : "Default"
//		"models/props_halloween/halloween_medkit_small.mdl" : "Halloween Candy Bar"
//	]
//]
//
//@PointClass base(Item) studio("models/items/medkit_medium.mdl") sphere(fademindist) sphere(fademaxdist) = item_healthkit_medium :
//	"Health Kit Medium"
//[
//	powerup_model(choices) : "Model" : "" : "Change the model to something other than the default model. Not shown in Hammer." =
//	[
//		"" : "Default"
//		"models/props_halloween/halloween_medkit_medium.mdl" : "Halloween Pumpkin Candy Tin"
//		"models/props_medieval/medieval_meat.mdl" : "Medieval Ham"
//	]
//]

//@PointClass base(Item) studio("models/items/medkit_mega.mdl") sphere(fademindist) sphere(fademaxdist) = item_healthkit_mega :
//	"Health Kit Mega"
//[
//	powerup_model(choices) : "Model" : "" : "Change the model to something other than the default model. Not shown in Hammer." =
//	[
//		"" : "Default"
//		"models/props_halloween/halloween_medkit_mega.mdl" : "Halloween Pumpkin Candy Tin"
//		"models/props_medieval/medieval_meat.mdl" : "Medieval Ham"
//		"models/pickups/pickup_powerup_megahealth.mdl" : "Megahealth Powerup"
//	]
//	
//	respawntime(integer) : "Respawn Time" : 10 : "Changes the time, in seconds, before the item respawns."
//	respawndelay(integer) : "Initial Spawn Delay" : 0 : "Makes the item spawn after a initial delay."
//	spawn_sound(sound): "Spawn Sound" : "Item.Materialize" : "Sound to play when Pickup Spawns."
//	HiddenWhenRespawning(boolean) : "Hidden while Respawning?" : 1 : "Whether or not the pickup becomes hidden on pickup."	
//	AutoMaterialize(boolean) : "Auto-Materialize?" : 1 : "The pickup should automatically materialize after being picked up."
//	
//	output OnPlayerTouch(void) : "Fires when the player touches this item."
//	output OnRespawn(void) : "Fires when the item respawns."
//	
//]

@PointClass base(Item) size(-1 -1 -48, 1 1 1) studioprop() = item_healthkit_tiny :	
    "Overheal health kit for players." 
[
	model(studio) : "Model" : "models/items/medkit_overheal.mdl" : "The model this entity should appear as. 128-character limit."
	pickup_sound(sound): "Pickup Sound" : "" : "Sound to play when picking up this pill."
]


@PointClass base(Item) studio("models/items/ammopack_large.mdl") = item_ammopack_full :	"Ammo Pack Full" []
@PointClass base(Item) studio("models/items/ammopack_small.mdl") = item_ammopack_small : "Ammo Pack Small" []
@PointClass base(Item) studio("models/items/ammopack_medium.mdl") = item_ammopack_medium : "Ammo Pack Medium" []

@PointClass base(Item) studio("models/items/grenade_pack.mdl") = item_grenadepack : "Grenade Pack" []

@PointClass base(Item) studio("models/items/item_armor.mdl") = item_armor : "Armor Pack" []

@PointClass base(Item) studio("models/props_halloween/hwn_spellbook_flying.mdl") sphere(fademindist) sphere(fademaxdist) = tf_spell_pickup : "Spell"
[
	tier(choices) : "Spell Tier" : 0 : "Tier of spells that would be randomly assigned to the player" =
	[
		0 : "Common"
		1 : "Rare"
	]
]

@PointClass color(0 0 200) base(Targetname, TeamNum, EnableDisable, Toggle, Angles, PlayerTouch, FadeDistance) studio("models/crafting/moustachium.mdl") sphere(fademindist) sphere(fademaxdist) = item_bonuspack : "Bonus Pack"
[
	powerup_model(string) : "Model" : "" : "Change the model to something other than the default model." 
]

@PointClass base(Item, Parentname) studio("models/items/target_duck.mdl") sphere(fademindist) sphere(fademaxdist) = tf_halloween_pickup : "Halloween pickup"
[

	//AutoMaterialize(boolean) : "Auto-Materialize?" : 1 : "The pickup should automatically materialize after being picked up."

	pickup_sound(string) : "Sound Effect" : "" : "The sound script entry that is played when the item is picked up." 
	pickup_particle(string) : "Particle Effect" : "" : "The particle effect that is displayed when the item is picked up." 

	output OnRedPickup(void) : "Sent when Red picks-up the item."
	output OnBluePickup(void) : "Sent when Blue picks-up the item."
]

@PointClass base(Targetname, EnableDisable) studio("models/pickups/pickup_powerup_regen.mdl") sphere(fademindist) sphere(fademaxdist) = info_powerup_spawn : "Powerup spawn location. Only one of each type of Powerup will spawn in a game, so some Powerup spawn locations may not be used in some rounds. Locations and Powerup types are chosen at random. Will only spawn if tf_powerup_mode is set"
[
	team(choices) : "Owner Team" : -2 : "Teams can own spawn points. When Powerups are dropped, they resposition themselves after timing out. They will try to pick a spawn point based on what team designation they had when they repositioned. Set to Everyone to have no team bias in spawn positioning" =
	[
		-2 : "Everyone"
		2 : "Red"
		3 : "Blue"
	]
]
@PointClass base(Targetname, EnableDisable) studio("models/pickups/pickup_powerup_crit.mdl") sphere(fademindist) sphere(fademaxdist) = item_powerup_crit :	"Temporary Crit Powerup. Powerup effect wears off. Powerup respawns automatically" []
@PointClass base(Targetname, EnableDisable) studio("models/pickups/pickup_powerup_uber.mdl") sphere(fademindist) sphere(fademaxdist) = item_powerup_uber :	"Temporary Uber Powerup. Powerup effect wears off. Powerup respawns automatically" []

//
// Filters
//

@FilterClass base(TeamNum, PBaseFilter) iconsprite("editor/filter_team") = filter_activator_team :
	"A filter that filters by the team of the activator.  The team number to filter by. "
[
]

@FilterClass base(TeamNum, PBaseFilter) iconsprite("editor/filter_team") = filter_activator_tfteam :
	"A filter that filters by the team of the activator.  The team number to filter by. " +
	"If the filter mode is Allow, only entities whose team number matches the given team will " +
	"pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose team number " +
	"matches the given team will pass the filter." 
[
	controlpoint(target_destination) : "Associated Control Point" : "" : "The team_control_point associated with this filter. The filter does NOT need an associated control point to function properly, but ownership of the control point will control the team number the filter uses (setup during each round start)."
	
	// Inputs
	input RoundActivate(void) : "Activate the Control Point Finder"
	input RoundSpawn(void) : "Round Spawn"
]

@FilterClass base(PBaseFilter,Condition) iconsprite("editor-puddy/filter_tf_condition") = filter_tf_condition :
	"A filter that filters by conditions on a player"
[
]

@FilterClass base(PBaseFilter,DamageTypeP) iconsprite("editor/filter_damage_type") = filter_damage_type :
	"A damage filter that filters by the type of damage inflicted. This can only be used as a damage filter, not as an activator filter."
[
]

@FilterClass base(PBaseFilter) iconsprite("editor-puddy/filter_tf_bot_has_tag") = filter_tf_bot_has_tag : "A filter that filters based on the touching mvm bot having specific tags."
[
	tags(string) : "Tags" : "" : "Tags required to pass this filter"
	require_all_tags(choices) : "Require all tags?" : 1 : "Does this filter require all specified tags?" =
	[
		1 : "Yes"
		0 : "No"
	]
]

@FilterClass base(PBaseFilter) iconsprite("editor/filter_class") = filter_lfe_npc_has_squad : "A filter that filters based on the touching npc having specific squad."
[
	squadname(string) : "Squad Name" : "" : "Squad required to pass this filter"
]

@FilterClass base(BaseFilter) iconsprite("editor-puddy/filter_tf_class") = filter_tf_class :
	"A filter that filters by the class of the activator.  The team number to filter by. " +
	"If the filter mode is Allow, only entities whose class matches the given class will " +
	"pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose class " +
	"matches the given class will pass the filter." 
[
	tfclass(choices) : "Class" : 0 : "Class" =
	[
		// 0 is undefined
		0 : "Undefined"
		1 : "Scout"
		2 : "Sniper"
		3 : "Soldier"
		4 : "Demoman"
		5 : "Medic"
		6 : "Heavy"
		7 : "Pyro"
		8 : "Spy"
		9 : "Engineer"
	]
]

@PointClass base(Targetname,Parentname,Angles,TeamNum) studio("models/editor/cone_helper.mdl") sphere(SplashRadius) = tf_point_weapon_mimic : "An entity that shoots like player weapons."
[
	WeaponType(choices) : "Weapon Type" : 0 : "Which projectiles to fire." =
	[
		0 : "Rockets"
		1 : "Grenades"
		2 : "Arrows"
		3 : "Stickies"
	]

	FireSound(sound)		: "Fire Sound"		: ""	: "The sound to be played when we fired."
	ParticleEffect(string)	: "Particle Effect"	: ""	: "The particle effect to be played when we fired."
	ModelOverride(studio)	: "Model Override"	: ""	: "The model to apply onto projectiles we fire."
	ModelScale(float)		: "Model Scale"		: "1"	: "Scale for the projectile model."
	SpeedMin(float)			: "Minimum Speed"	: "1000": "Minimum speed for each projectile."
	SpeedMax(float)			: "Maximum Speed"	: "1000": "Maximum speed for each projectile."
	Damage(float)			: "Damage"			: "75"	: "Damage for the projectile."
	SplashRadius(float)		: "Splash Radius"	: "50"	: "Splash radius for the projectile."
	SpreadAngle(float)		: "Spread Angle"	: "0"	: "Random spread for each projectile fired."
	Crits(choices) : "Always Crits" : 0 : "All shots are crits." =
	[
		0 : "No"
		1 : "Yes"
	]

	input FireOnce(void)			: "Fire once."
	input FireMultiple(integer)		: "Fire multiple projectiles at once."
	input DetonateStickies(void)	: "Detonate stickies."
]


@PointClass base(Targetname) iconsprite("editor-puddy/tf_logic_holiday") = tf_logic_holiday : "Holiday Entity. This is used to detect a holiday map."
[	
	holiday_type(choices) : "Holiday" : 1 =
	[
		1 : "None"
		2 : "Halloween"
		3 : "Birthday"
		4 : "Christmas"
		5 : "End of the Line"
		6 : "Community Update (???)"
		7 : "Valentines Day"
		8 : "Meet the Pyro"
		9 : "Spy vs Engineer WAR (Unused)"
		10 : "Full Moon"
		11 : "Halloween or Full Moon"
		12 : "Halloween or Full Moon or Valentines Day"
		13 : "April Fools"
	]

	tauntInHell(choices) : "Taunt In Hell" : 0 : "Should players taunt when teleported to Hell." =
	[
		0 : "No"
		1 : "Yes"
	]

	allowHaunting(choices) : "Haunting" : 0 : "Allow Wheel of Doom haunting." =
	[
		0 : "No"
		1 : "Yes"
	]

	input HalloweenSetUsingSpells(integer) : "Disable/Enable spells for this map. Only works on Halloween maps. (0 disable, 1 enable)"
	input Halloween2013TeleportToHell(string) : "Teleport all players to hell."
]

@PointClass base(Targetname) iconsprite("editor-puddy/tf_logic_on_holiday") = tf_logic_on_holiday :
	"This entity allows you execute map actions on holidays. Will send all relevant outputs every time the Fire input is called."
[
	input Fire(void) : "Cause one or more appropriate outputs to fire."
	output IsNothing(void) : ""
	output IsTFBirthday(void) : ""
	output IsHalloween(void) : ""
	output IsSmissmas(void) : ""
	output IsValentines(void) : ""
	output IsFullMoon(void) : ""
	output IsAprilFools(void) : ""
]

@PointClass base(Targetname, EnableDisable) iconsprite("editor/logic_relay.vmt") = logic_difficulty : "Fires various outputs based on the current difficulty setting and number of active players."// for difficulty-based events.
[
	LowerPlayer(float) : "Lower Player Range" : 3 : "If the number of players is less than X, 'Low' Outputs will fire. ('Med' will fire between Lower and Upper ranges, inclusive.)"
	UpperPlayer(float) : "Upper Player Range" : 5 : "If the number of players is greater than X, 'High' Outputs will fire."

	input CheckSkill(void) : "Fires all applicable outputs based on the current difficulty and number of players."

	output OnEasy(void) : "Fires when CheckSkill reports, Difficulty: Easy, PlayerCount: Any."
		output OnEasyLow(void) : "Fires when CheckSkill reports, Difficulty: Easy, PlayerCount: Low."
		output OnEasyMed(void) : "Fires when CheckSkill reports, Difficulty: Easy, PlayerCount: Medium."
		output OnEasyHigh(void) : "Fires when CheckSkill reports, Difficulty: Easy, PlayerCount: High."
	output OnNormal(void) : "Fires when CheckSkill reports, Difficulty: Normal, PlayerCount: Any."
		output OnNormalLow(void) : "Fires when CheckSkill reports, Difficulty: Normal, PlayerCount: Low."
		output OnNormalMed(void) : "Fires when CheckSkill reports, Difficulty: Normal, PlayerCount: Medium."
		output OnNormalHigh(void) : "Fires when CheckSkill reports, Difficulty: Normal, PlayerCount: High."
	output OnHard(void) : "Fires when CheckSkill reports, Difficulty: Hard, PlayerCount: Any."
		output OnHardLow(void) : "Fires when CheckSkill reports, Difficulty: Hard, PlayerCount: Low."
		output OnHardMed(void) : "Fires when CheckSkill reports, Difficulty: Hard, PlayerCount: Medium."
		output OnHardHigh(void) : "Fires when CheckSkill reports, Difficulty: Hard, PlayerCount: High."

	output OnUnusual(void) : "Fires when CheckSkill reports, Difficulty: Unusual, PlayerCount: Any."
		output OnUnusualLow(void) : "Fires when CheckSkill reports, Difficulty: Unusual, PlayerCount: Low."
		output OnUnusualMed(void) : "Fires when CheckSkill reports, Difficulty: Unusual, PlayerCount: Medium."
		output OnUnusualHigh(void) : "Fires when CheckSkill reports, Difficulty: Unusual, PlayerCount: High."

	output OnHaunted(void) : "Fires when CheckSkill reports, Difficulty: Haunted, PlayerCount: Any."
		output OnHauntedLow(void) : "Fires when CheckSkill reports, Difficulty: Haunted, PlayerCount: Low."
		output OnHauntedMed(void) : "Fires when CheckSkill reports, Difficulty: Haunted, PlayerCount: Medium."
		output OnHauntedHigh(void) : "Fires when CheckSkill reports, Difficulty: Haunted, PlayerCount: High."

	output OnLow(void) : "Fires when CheckSkill reports, Difficulty: Any, PlayerCount: Low."
	output OnMed(void) : "Fires when CheckSkill reports, Difficulty: Any, PlayerCount: Medium."
	output OnHigh(void) : "Fires when CheckSkill reports, Difficulty: Any, PlayerCount: High."

	spawnflags(flags) =
	[
		1: "Remove on fire" : 1
	]
]

//
// Solid Classes
//

@SolidClass base(Targetname, EnableDisable) = func_antirush :
"For antirush purposes. Only solid to players. Has HUD notification and sound funcions. Removed by Free mode or lfe_allow_antirush 0."
[
	CanTurnOn(choices) : "Remove itself on Disable?" : 0 : "After disabling, this is removed (killed) if set to 'remove itself'." =
	[
		0 : "Remove itself"
		1 : "Just disable"
	]
	
	SoundEffect(sound) : "Sound effect" : "Hud.Hint" : "Sound effect to play when disabled."
	MessageText(string) : "Message text" : "Example message." : "Message to display when disabled. (localisable)"
	MessageIcon(string) : "Message icon" : "" : "HUD icon (from scripts/mod_textures.txt) to display with the message."
	
	CanMessage(choices) : "Message on Disable" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	CanSound(choices) : "Play sound on Disable" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	RecipientTeam(Choices) : "Audience of the message/sound" : 2 =
	[
		0 : "Everyone"
		2 : "RED Team Only"
		3 : "BLU Team Only"
	]
	
	BackgroundTeam(Choices) : "Background Panel Color" : 2 =
	[
		0 : "Grey"
		2 : "RED"
		3 : "BLU"
	]

	OnlyPlayersCollide(Choices) : "Only collide with players" : 0 =
	[
		0 : "All Collisions"
		1 : "Only players"
	]
	
	input SimpleDisable(void) : "Disable without func_antirush features."
	input SimpleToggle(void) : "Toggle on/off without func_antirush features."
	
//	vrad_brush_cast_shadows(choices) : "Shadows" : 0 : "Set this if this brush casts lightmap shadows" =
//	[
//		0 : "No"
//		1 : "Yes"
//	]	
//	input Alpha(integer) : "Sets the brush's alpha value."
]

@SolidClass base(Targetname, EnableDisable, TeamNum) = func_capturezone :
	"TF flag capture zone (set Team to 'any' for Territory Control maps)."
[
	capturepoint(integer) : "Capture Point" : 1 : "Used for Attack/Defend and Territory Control maps ONLY. This is ignored for CTF maps. Set this value to the Capture Point number for this entity."

	output OnCapture(void) : "Sent when a flag is captured in this zone."
]

@SolidClass base(Targetname, Parentname, EnableDisable, TeamNum) = func_flagdetectionzone :
	"TF flag detection zone."
[
	alarm(choices) : "Alarm" : 0 : "Trigger bomb alarm." =
	[
		0 : "No"
		1 : "Yes"
	]

	input Test( void ) : "Send OnStartTouchFlag & OnPickedUpFlag outputs if any player with flag is touching. Send OnEndTouchFlag & OnDroppedFlag outputs if no player with flag is touching."
	
	output OnStartTouchFlag(void) : "Sent when a flag or flag carrier first touches the zone."
	output OnEndTouchFlag(void) : "Sent when a flag or flag carrier stops touching the zone."
	output OnDroppedFlag(void) : "Sent when a flag is dropped in the zone."
	output OnPickedUpFlag(void) : "Sent when a flag is picked up in the zone."
]

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle, Parentname) = func_nogrenades :
	"Grenades protected area." []

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle, Parentname) = func_nobuild : "Engineer no-build area."
[
	AllowSentry(choices) : "Allow Sentries" : 0 : "Sentries are allowed to be built in this volume" =
	[
		0 : "No"
		1 : "Yes"
	]

	AllowDispenser(choices) : "Allow Dispensers" : 0 : "Dispensers are allowed to be built in this volume" =
	[
		0 : "No"
		1 : "Yes"
	]

	AllowTeleporters(choices) : "Allow Teleporters" : 0 : "Teleporters are allowed to be built in this volume" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	AllowBouncepads(choices) : "Allow Bouncepads" : 0 : "Bouncepads are allowed to be built in this volume" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle) = func_croc : "Crocs live here!"
[
	filtername(filterclass) : "Filter Name" : : "Optional filter to use to see if activator triggers me."

	croc_model(string) : "Model" : "models/props_island/crocodile/crocodile.mdl" : "The model to be used for this entity."

	// Outputs
	output OnEat(void) : "Sent when the crocs eat a player."
	output OnEatRed(void) : "Sent when the crocs eat a player on team RED."
	output OnEatBlue(void) : "Sent when the crocs eat a player on team BLU."
	output OnEatGreen(void) : "Sent when the crocs eat a player on team GRN."
	output OnEatYellow(void) : "Sent when the crocs eat a player on team YLW."
]

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle) = func_regenerate :
	"Regeneration zone for players."
[
	associatedmodel(target_destination) : "Associated Model" : "" : "The prop_dynamic that represents this zone in the world. The associated model should have appropriate open and close animations for when players interact with the zone."
]

@SolidClass base(Targetname, EnableDisable, Toggle) = func_respawnflag :
	"Designates an area that triggers the flag to reset when it touches the area." []

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle, Parentname) = func_respawnroom :
	"Designates a respawn room for a team."
[
	AllowFlag(choices) : "Allow flags inside" : 0 : "Sets whether the respawn room should allow the flag carried by a player to enter the respawn room." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(Targetname, Parentname, Origin, RenderFields, Global, Inputfilter, EnableDisable, Shadow) = func_respawnroomvisualizer :
	"Brushes that become visible to enemy players when they get close. Use them to mark areas that they're unable to enter (i.e. respawn rooms)."
[
	spawnflags(flags) =
	[
		2: "Ignore player +USE" : 1
	]

	respawnroomname(target_destination) : "Associated Respawn Room" : "" : "The func_respawnroom that this entity is visualizing. This entity will have its team matched to that for the func_respawnroom, and will have it updated if the func_respawnroom ever changes team."

	Solidity(choices) : "Solidity" : 1 : "Used to control the solidity/collision of these brushes." =
	[
		0 : "Toggle"
		1 : "Never Solid"
		2 : "Always Solid"
	]

	vrad_brush_cast_shadows(choices) : "Shadows" : 0 : "Set this if this brush casts lightmap shadows." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle) = func_changeclass :
	"ChangeClass zone for players." []

@PointClass base(Angles) studioprop("models/editor/camera.mdl") = game_intro_viewpoint :
	"A viewpoint in the intro camera."
[
	TeamNum(choices) : "Team" : 0 : "Team" =
	[
		0 : "None (Shared)"
		2 : "Red"
		3 : "Blue"
	]

	step_number(integer) : "Step Number. Intro starts at 1." : 1
	time_delay(float) : "Time to spend here." : 12
	hint_message(string) : "Hint Message here."
	event_to_fire(string) : "Game Event To Fire"
	event_delay(float) : "Game Event fire delay" : 3
	event_data_int(integer) : "Game Event data" : 0
	fov(float) : "FOV" : 0
]

@SolidClass base(Targetname) = func_proprrespawnzone :
	"Zone that handles respawning and distribution of clientside physics props." []


@SolidClass base(Targetname, EnableDisable) = func_upgradestation : "Where players go to buy upgrades for weapons and items."
[
]


//====================================================================================================================
// CAPTURE POINT HANDLING // FIXED BY THE REAL FISHMAN NOT THAT FAKE ASS BITCH
//====================================================================================================================
@PointClass base(Targetname, EnableDisable, Angles, Parentname) studio("models/effects/cappoint_hologram.mdl") = team_control_point :
	"Control Point"
[
	spawnflags(flags) =
	[
		1: "Hide Control Point on HUD" : 0
		2: "Start with model hidden" : 0
		4: "Disable shadow" : 0
		8: "Disable sounds" : 0
	]

	point_start_locked(choices) : "Start locked" : 0 : "Locked means the point will not be available for capture until it is unlocked via its input."  =
	[
		0 : "No"
		1 : "Yes"
	]
	
	point_printname(string) : "Print Name" : "TODO: Set Name" : "LOCALIZED name to print on the HUD." 
	point_group(integer) : "Group Index" : 0 : "Used for grouping points together under a team_control_point_master (not using control point rounds)."
	point_default_owner(choices) : "Default Owner" : 0 : "Default Owner of the control point."  =
	[
		0 : "Neither"
		2 : "Red"
		3 : "Blue"
	]
	point_index(integer) : "Index" : 0 : "Index of this point (must be unique)."

	point_warn_on_cap(choices) : "Warning Type" : 0 : "Type of warning to issue to the team that owns the control point when the opposing team starts to capture it."  =
	[
		0 : "Normal Announcements"
		1 : "Final Capture Point Warning"
		2 : "No Announcements"
	]

	point_warn_sound(string) : "Warning sound" : "ControlPoint.CaptureWarn" : "Sound to be played when this point is being captured (if warn on capture is set)." 
	
	random_owner_on_restart(choices) : "Randomly set the owner on restart" : 0 : "Randomly set the owner of this point during a full restart of the map. The ratio of default owners among the points with this flag will be kept when selecting random owners."  =
	[
		0 : "No"
		1 : "Yes"
	]

	// Per team data
	team_timedpoints_2(integer) : "Time-based point value for RED." : 0
	team_timedpoints_3(integer) : "Time-based point value for BLUE." : 0

	team_capsound_0(sound) : "Reset Sound" : "" : "Sound made when point resets."
	team_capsound_2(sound) : "Red Capture Sound" : "" : "Sound made when RED captures."
	team_capsound_3(sound) : "Blue Capture Sound" : "" : "Sound made when BLUE captures."
	team_capsound_4(sound) : "Green Capture Sound" : "" : "Sound made when GREEN captures."
	team_capsound_5(sound) : "Yellow Capture Sound" : "" : "Sound made when YELLOW captures."

	team_model_0(studio) 	: "Reset Model" : "models/effects/cappoint_hologram.mdl" : "Model when point reset."
	team_model_2(studio) 	: "RED Model" : "models/effects/cappoint_hologram.mdl" : "Model when RED owns the point."
	team_model_3(studio) 	: "BLUE Model" : "models/effects/cappoint_hologram.mdl" : "Model when BLUE owns the point."
	team_model_4(studio) 	: "GREEN Model" : "models/effects/cappoint_hologram.mdl" : "Model when GREEN owns the point."
	team_model_5(studio) 	: "YELLOW Model" : "models/effects/cappoint_hologram.mdl" : "Model when YELLOW owns the point."

	team_bodygroup_0(integer) : "Reset model bodygroup" : 3
	team_bodygroup_2(integer) : "RED model bodygroup" : 1
	team_bodygroup_3(integer) : "BLUE model bodygroup" : 1
	team_bodygroup_4(integer) : "GREEN model bodygroup" : 1
	team_bodygroup_5(integer) : "YELLOW model bodygroup" : 1

	team_icon_0(material)	: "HUD icon neutral" : "sprites/obj_icons/icon_obj_neutral" : "HUD icon material when no one owns the point."
	team_icon_2(material)	: "HUD icon RED" : "sprites/obj_icons/icon_obj_red" : "HUD icon material when RED owns the point."
	team_icon_3(material)	: "HUD icon BLUE" : "sprites/obj_icons/icon_obj_blu" : "HUD icon material when BLUE owns the point."
	team_icon_4(material)	: "HUD icon GREEN" : "sprites/obj_icons/icon_obj_grn" : "HUD icon material when GREEN owns the point."
	team_icon_5(material)	: "HUD icon YELLOW" : "sprites/obj_icons/icon_obj_ylw" : "HUD icon material when YELLOW owns the point."

	team_overlay_0(material) : "HUD overlay neutral" : "" : "HUD material that will overlay the icon when no one owns the point."
	team_overlay_2(material) : "HUD overlay RED" : "" : "HUD material that will overlay the icon when RED owns the point."
	team_overlay_3(material) : "HUD overlay BLUE" : "" : "HUD material that will overlay the icon when BLUE owns the point."
	team_overlay_4(material) : "HUD overlay GREEN" : "" : "HUD material that will overlay the icon when GREEN owns the point."
	team_overlay_5(material) : "HUD overlay YELLOW" : "" : "HUD material that will overlay the icon when YELLOW owns the point."

 	team_previouspoint_2_0(target_source) : "RED Previous Required Point 1" : "" : "The name of a previous capture point that RED must own to be able to capture this point. If empty, the team must own all points preceding this one."
	team_previouspoint_2_1(target_source) : "RED Previous Required Point 2" : "" : "The name of a second previous capture point that RED must own to be able to capture this point."
	team_previouspoint_2_2(target_source) : "RED Previous Required Point 3" : "" : "The name of a third previous capture point that RED must own to be able to capture this point."
	team_previouspoint_3_0(target_source) : "BLUE Previous Required Point 1" : "" : "The name of a previous capture point that BLUE must own to be able to capture this point. If empty, the team must own all points preceding this one."
	team_previouspoint_3_1(target_source) : "BLUE Previous Required Point 2" : "" : "The name of a second previous capture point that BLUE must own to be able to capture this point."
	team_previouspoint_3_2(target_source) : "BLUE Previous Required Point 3" : "" : "The name of a third previous capture point that BLUE must own to be able to capture this point."

	team_previouspoint_4_0(target_source) : "GREEN Previous Required Point 1" : "" : "The name of a previous capture point that GREEN must own to be able to capture this point. If empty, the team must own all points preceding this one."
	team_previouspoint_4_1(target_source) : "GREEN Previous Required Point 2" : "" : "The name of a second previous capture point that GREEN must own to be able to capture this point."
	team_previouspoint_4_2(target_source) : "GREEN Previous Required Point 3" : "" : "The name of a third previous capture point that GREEN must own to be able to capture this point."
	team_previouspoint_5_0(target_source) : "YELLOW Previous Required Point 1" : "" : "The name of a previous capture point that YELLOW must own to be able to capture this point. If empty, the team must own all points preceding this one."
	team_previouspoint_5_1(target_source) : "YELLOW Previous Required Point 2" : "" : "The name of a second previous capture point that YELLOW must own to be able to capture this point."
	team_previouspoint_5_2(target_source) : "YELLOW Previous Required Point 3" : "" : "The name of a third previous capture point that YELLOW must own to be able to capture this point."

	// Outputs
	output OnOwnerChangedToTeam1(void) : "Sent when owner is changed to RED."
	output OnOwnerChangedToTeam2(void) : "Sent when owner is changed to BLUE."

	output OnCapReset(void) : "Sent when owner is changed to neutral."

	output OnRoundStartOwnedByTeam1(void) : "Sent when a round is starting and the point is owned by RED."
	output OnRoundStartOwnedByTeam2(void) : "Sent when a round is starting and the point is owned by BLUE."

	output OnCapTeam1(void) : "Sent when RED capture this point."
	output OnCapTeam2(void) : "Sent when BLUE capture this point."

	output OnUnlocked(void) : "Sent when point is unlocked via the SetLocked(0) or SetUnlockTime inputs."
	
	input SetOwner(integer) : "Set the owner of the point."
	input HideModel(void) : "Hide the control point model."
	input ShowModel(void) : "Show the control point model again."

	input SetLocked(integer) : "Lock the control point. 0 = unlocked, 1 = locked"
	input SetUnlockTime(integer) : "This will automatically unlock the control point in the specified amound of time (seconds)."
]

@PointClass base(Targetname, EnableDisable) iconsprite("editor-puddy/team_control_point_round") = team_control_point_round :
	"Control Point Round (you may have as many of these in the map as you would like)."
[
	cpr_printname(string) : "Print Name" : "" : "LOCALIZED name to print on the RoundInfo panel"

	cpr_priority(integer) : "Priority" : 0 : "The priority value for this round (must be >= 0). Higher priority rounds will be picked first. If multiple rounds have the same priority value, a random selection will be used."

	cpr_cp_names(string) : "Control points in this round" : "" : "Names of the control points included in this round (space delimited). Control points may belong to more than one control point round.  The names of the control points (and the rounds) should all be unique."

	cpr_restrict_team_cap_win(choices) : "Restrict team from winning" : 0 : "Prevent this team from winning by capping all the points" =
	[
		0 : "Neither"
		1 : "Both"
		2 : "Red"
		3 : "Blue"
	]

	output OnStart(void) : "Sent when this round is selected to be played."
	output OnEnd(void) : "Sent when this round is finished."
	output OnWonByTeam1(void) : "Sent when RED wins this round."
	output OnWonByTeam2(void) : "Sent when BLUE wins this round."
]

@PointClass base(Targetname,EnableDisable) iconsprite("editor-puddy/team_control_point_master") = team_control_point_master : "Control Point Master"
[
	team_base_icon_2(material) : "Material for the RED Base icon" : "sprites/obj_icons/icon_base_red"
	team_base_icon_3(material) : "Material for the BLUE Base icon" : "sprites/obj_icons/icon_base_blu"
	caplayout(string) : "Cap Layout" : "" : "A string that tells the HUD how to lay out the cap points. It should be a string with indexes of cap points seperated by commas to denote a new line. So <2,0 1> would create a pyramid, with cap point 2 on the top and cap points 0 & 1 on the bottom."
	custom_position_x(float) : "Custom cap position X" : -1 : "Set the cap layout custom X position [0,1]"
	custom_position_y(float) : "Custom cap position Y" : -1 : "Set the cap layout custom Y position [0,1]"
	
	cpm_restrict_team_cap_win(choices) : "Restrict team from winning" : 0 : "Prevent this team from winning by capping all the points. This field is ignored if you're using control_point_rounds in your map (set this field inside the rounds)." =
	[
		0 : "Neither"
		1 : "Both"
		2 : "Red"
		3 : "Blue"
	]

	switch_teams(choices) : "Switch teams on map win?" : 0 : "Switch the teams when one team has won the map and the game is going to be reset." =
	[
		0 : "No"
		1 : "Yes"
	]

	score_style(choices) : "Scoring style" : 0 : "Sets the style of scoring used for capture point maps." = 
	[
		0 : "Add team score for each round won"
		1 : "Add team score for each captured point"
	]
	
	play_all_rounds(choices) : "Play all rounds before changelevel" : 0 : "Determines whether the server may changelevel when mp_timelimit is up before all mini-rounds have been completed (for maps like Dustbowl)." = 
	[
		0 : "Changelevel normally"
		1 : "Only changelevel after all mini-rounds have been played to completion"
	]	
	
	partial_cap_points_rate(float) : "Partial cap rate" : 0 : "Rate at which to give partial cap points for area captures."
	
	output OnWonByTeam1(void) : "Sent when RED wins the game."
	output OnWonByTeam2(void) : "Sent when BLUE wins the game."

	input SetWinner(integer) : "Set the winner of the round to this team (0 for a stalemate)."
	input SetCapLayout(string) : "Set the cap layout string."
	input SetCapLayoutCustomPositionX(float) : "Set the cap layout custom X position [0,1]"
	input SetCapLayoutCustomPositionY(float) : "Set the cap layout custom Y position [0,1]"
]

@SolidClass base(Targetname, EnableDisable, Parentname) = trigger_capture_area : "Capture Area"
[
	area_cap_point(target_source) : "Control point" : "" : "Name of the control point this area is linked to."

	team_cancap_2(choices) : "Can RED Cap?" : 1 =
	[
		1 : "Yes"
		0 : "No"
	]
	team_cancap_3(choices) : "Can BLUE Cap?" : 1 =
	[
		1 : "Yes"
		0 : "No"
	]
	
	team_cancap_4(choices) : "Can GREEN Cap?" : 1 =
	[
		1 : "Yes"
		0 : "No"
	]
	team_cancap_5(choices) : "Can YELLOW Cap?" : 1 =
	[
		1 : "Yes"
		0 : "No"
	]
	
	team_startcap_2(integer) : "Number of RED players to start capping" : 1 
	team_startcap_3(integer) : "Number of BLUE players to start capping" : 1 

	team_numcap_2(integer) : "Number of RED players to cap" : 1
	team_numcap_3(integer) : "Number of BLUE players to cap" : 1
	
	team_startcap_4(integer) : "Number of GREEN players to start capping" : 1 
	team_startcap_5(integer) : "Number of YELLOW players to start capping" : 1 

	team_numcap_4(integer) : "Number of GREEN players to cap" : 1
	team_numcap_5(integer) : "Number of YELLOW players to cap" : 1

	team_spawn_2(integer) : "Red Spawn Adjust" : 0 : "Adjust the minimum respawn time for the red team by this amount (in seconds) when red captures this point. If the red team owns this point when blue captures it, this adjustment is reversed."
	team_spawn_3(integer) : "Blue Spawn Adjust" : 0 : "Adjust the minimum respawn time for the blue team by this amount (in seconds) when blue captures this point. If the blue team owns this point when red captures it, this adjustment is reversed."

	area_time_to_cap(integer) : "Time to cap (sec)" : 5

	// Outputs
	output OnStartTeam1(void) : "Sent when RED start capture."
	output OnBreakTeam1(void) : "Sent when a RED capture is broken."
	output OnCapTeam1(void)   : "Sent when RED end capture."

	output OnStartTeam2(void) : "Sent when BLUE start capture."
	output OnBreakTeam2(void) : "Sent when a BLUE capture is broken."
	output OnCapTeam2(void)   : "Sent when BLUE end capture."

	output OnStartCap(void) : "Sent when either team starts capture."
	output OnBreakCap(void) : "Sent when either team break capture."
	output OnEndCap(void)   : "Sent when either team end capture."

	output OnNumCappersChanged(integer) : "Sent when the number of cappers changes, passes the value in int."
	output OnNumCappersChanged2(integer) : "Sent when the number of cappers changes, passes the value in int (-1 for capture blocked)."
	
	// Inputs
	input SetTeamCanCap(string) : "Set whether a specific team is allowed to capture this point. Format is: <team number> <(0/1)>. i.e. '2 0' would prevent RED from capturing this point, whereas '3 1' would allow BLUE to cap it."

	input SetControlPoint(string) : "Assign area capture to the passed control point."
	input CaptureCurrentCP(string) : "If we're being capped, forces the current point to capture."	
]

@PointClass base(Targetname, TeamNum, EnableDisable) iconsprite("editor-puddy/team_train_watcher") = team_train_watcher :
	"Entity that tracks the train progress through train escort maps"
[
	train_can_recede(choices) : "Can the train recede?" : 1 : "Used to hide the HUD countdown." = 
	[
		1 : "Yes"
		0 : "No"
	]
	
	train_recede_time(integer) : "Train recede time (in seconds)" : 0 : "Length of time before the train begins to recede. 0 = use TF2 default setting of 30 seconds."
	
	handle_train_movement(choices) : "Handle train movement?" : 0 : "Should the train watcher handle all train movement?" = 
	[
		1 : "Yes"
		0 : "No"
	]
	
	speed_forward_modifier(float) : "Speed Forward Modifier" : 1 : "Applies the given modifier to all forward speeds. Only used if the watcher is handling the train movement. [0, 1]"
	
	env_spark_name(string) : "Train spark sprites" : "" : "Name of the env_spark entities used under the train for backward movement. They should all have the same entity name. Only used if the watcher is handling the train movement."
	
	train(target_destination) : "Train to watch."
	start_node(target_destination) : "Node that the path starts at."
	goal_node(target_destination) : "Node that the path ends at."
	
	linked_pathtrack_1(target_destination) : "Linked PathTrack 1"
	linked_cp_1(target_destination) : "Linked CP 1"
	
	linked_pathtrack_2(target_destination) : "Linked PathTrack 2"
	linked_cp_2(target_destination) : "Linked CP 2"
	
	linked_pathtrack_3(target_destination) : "Linked PathTrack 3"
	linked_cp_3(target_destination) : "Linked CP 3"
	
	linked_pathtrack_4(target_destination) : "Linked PathTrack 4"
	linked_cp_4(target_destination) : "Linked CP 4"
	
	linked_pathtrack_5(target_destination) : "Linked PathTrack 5"
	linked_cp_5(target_destination) : "Linked CP 5"
	
	linked_pathtrack_6(target_destination) : "Linked PathTrack 6"
	linked_cp_6(target_destination) : "Linked CP 6"
	
	linked_pathtrack_7(target_destination) : "Linked PathTrack 7"
	linked_cp_7(target_destination) : "Linked CP 7"
	
	linked_pathtrack_8(target_destination) : "Linked PathTrack 8"
	linked_cp_8(target_destination) : "Linked CP 8"
		
	hud_min_speed_level_1(float) : "Min Speed for Speed Level 1" : 30
	hud_min_speed_level_2(float) : "Min Speed for Speed Level 2" : 60
	hud_min_speed_level_3(float) : "Min Speed for Speed Level 3" : 90
	
	// Inputs
	input SetNumTrainCappers(integer) : "Set Number of players capping the train"
	input SetSpeedForwardModifier(float) : "Set the speed forward modifier. Only used if the watcher is handling the train movement. [0, 1]"
	input SetTrainRecedeTime(integer) : "Set the number of seconds before the train starts to recede."
	input SetTrainCanRecede(bool) : "Determines whether or not the train can recede."
	input SetTrainRecedeTimeAndUpdate(integer) : "Set the number of seconds before the train starts to recede and update the current recede time."
	
	// Outputs
	output OnTrainStartRecede(void)   : "Sent when the train should start receding"
]

@PointClass base(Targetname) iconsprite("editor-puddy/game_text_tf") = game_text_tf : 
	"An entity that displays text on player's screens, in pretty tf hud format" 
[
	message(string) : "Message Text" : "" : "Message to display onscreen."
	
	icon(string) : "Icon" : "" : "Hud icon ( from scripts/mod_textures.txt ) to display."
	
	display_to_team(Choices) : "Audience" : 0 =
	[
		0 : "Everyone"
		2 : "RED Team Only"
		3 : "BLU Team Only"
	]
	
	background(Choices) : "Background Panel Color" : 0 =
	[
		0 : "Grey"
		2 : "RED"
		3 : "BLU"
	]

	// Inputs
	input Display(void) : "Display the message text."
]

@PointClass base(Targetname,Parentname,BaseObject,TeamNum,Angles) studio("models/buildables/dispenser_light.mdl") = obj_dispenser : 
	"TF2 Dispenser" 
[
	defaultupgrade(choices) : "Starting Upgrade Level" : 0 =
	[
		0 : "Level 1"
		1 : "Level 2"
		2 : "Level 3"	
	]

	spawnflags(flags) = 
	[
		4: "Upgradable" : 0
	]

	// Outputs
	output OnDestroyed(void) : "Fired when this entity is destroyed."
]

@PointClass base(Targetname,Parentname,BaseObject,TeamNum,Angles) studio("models/buildables/sentry3.mdl") = obj_sentrygun : 
	"TF2 Sentrygun" 
[
	defaultupgrade(choices) : "Starting Upgrade Level" : 0 =
	[
		0 : "Level 1"
		1 : "Level 2"
		2 : "Level 3"	
	]
	
	spawnflags(flags) = 
	[
		4: "Upgradable" : 0
		8: "Infinite Ammo" : 0
	]

	// Outputs
	output OnDestroyed(void) : "Fired when this entity is destroyed."
]

@PointClass base(Targetname,Parentname,BaseObject,TeamNum,Angles) studio("models/buildables/teleporter_light.mdl") = obj_teleporter : 
	"TF2 Teleporter" 
[
	defaultupgrade(choices) : "Starting Upgrade Level" : 0 =
	[
		0 : "Level 1"
		1 : "Level 2"
		2 : "Level 3"	
	]

	spawnflags(flags) = 
	[
		4: "Upgradable" : 0
	]

	teleporterType(choices) : "Type" : 1 =
	[
		1 : "Entrance"
		2 : "Exit"
	]

	matchingTeleporter(target_destination) : "Matching Teleporter" : : "The teleporter linked to this one."

	// Outputs
	output OnDestroyed(void) : "Fired when this entity is destroyed."
]

@PointClass base(Targetname) = bot_roster : "Entity specifies what classes TFBots can choose"
[
	team(choices) : "Team" : "auto" : "Team" =
	[
		"auto" : "Any"
		"red" : "Red"
		"blue" : "Blue"
		"green" : "Green"
		"yellow" : "Yellow"
	]

	allowClassChanges(choices) : "Allow Class Changes" : 1 : "Allow TFBots to choose a new class when they respawn." =
	[
		0 : "No"
		1 : "Yes"
	]

	allowScout(choices) : "Allow Scout" : 1 : "Allow TFBots to choose Scouts as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowSniper(choices) : "Allow Sniper" : 1 : "Allow TFBots to choose Snipers as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowSoldier(choices) : "Allow Soldier" : 1 : "Allow TFBots to choose Soldiers as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowDemoman(choices) : "Allow Demoman" : 1 : "Allow TFBots to choose Demoman as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowMedic(choices) : "Allow Medics" : 1 : "Allow TFBots to choose Medics as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowHeavy(choices) : "Allow Heavy" : 1 : "Allow TFBots to choose Heavy as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowPyro(choices) : "Allow Pyro" : 1 : "Allow TFBots to choose Pyro as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowSpy(choices) : "Allow Spy" : 1 : "Allow TFBots to choose Spy as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowEngineer(choices) : "Allow Engineer" : 1 : "Allow TFBots to choose Engineer as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	allowCivilian(choices) : "Allow " : 1 : "Allow TFBots to choose Civilian as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowJohn(choices) : "Allow " : 1 : "Allow TFBots to choose John as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowMercenary(choices) : "Allow " : 1 : "Allow TFBots to choose Mercenary as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowCombine(choices) : "Allow " : 1 : "Allow TFBots to choose Repressor as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowZombie(choices) : "Allow " : 1 : "Allow TFBots to choose Enforcer as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowAntlion(choices) : "Allow " : 1 : "Allow TFBots to choose Jerry as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowSaxton(choices) : "Allow " : 1 : "Allow TFBots to choose Saxton as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowRobo(choices) : "Allow " : 1 : "Allow TFBots to choose Telecon as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	allowAgent(choices) : "Allow " : 1 : "Allow TFBots to choose Agent as a class." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Inputs
	input SetAllowScout(bool) : "Sets whether TFBots can choose Scouts as a class. 0 = No, 1 = Yes"
	input SetAllowSniper(bool) : "Sets whether TFBots can choose Snipers as a class. 0 = No, 1 = Yes"
	input SetAllowSoldier(bool) : "Sets whether TFBots can choose Soldiers as a class. 0 = No, 1 = Yes"
	input SetAllowDemoman(bool) : "Sets whether TFBots can choose Demoman as a class. 0 = No, 1 = Yes"
	input SetAllowMedic(bool) : "Sets whether TFBots can choose Medics as a class. 0 = No, 1 = Yes"
	input SetAllowHeavy(bool) : "Sets whether TFBots can choose Heavy as a class. 0 = No, 1 = Yes"
	input SetAllowPyro(bool) : "Sets whether TFBots can choose Pyro as a class. 0 = No, 1 = Yes"
	input SetAllowSpy(bool) : "Sets whether TFBots can choose Spy as a class. 0 = No, 1 = Yes"
	input SetAllowEngineer(bool) : "Sets whether TFBots can choose Engineer as a class. 0 = No, 1 = Yes"
	
	input SetAllowCivilian(bool) : "Sets whether TFBots can choose Civilian as a class. 0 = No, 1 = Yes"
	input SetAllowJohn(bool) : "Sets whether TFBots can choose John as a class. 0 = No, 1 = Yes"
	input SetAllowMercenary(bool) : "Sets whether TFBots can choose Mercenary as a class. 0 = No, 1 = Yes"
	input SetAllowCombine(bool) : "Sets whether TFBots can choose Repressor as a class. 0 = No, 1 = Yes"
	input SetAllowZombie(bool) : "Sets whether TFBots can choose Enforcer as a class. 0 = No, 1 = Yes"
	input SetAllowAntlion(bool) : "Sets whether TFBots can choose Jerry as a class. 0 = No, 1 = Yes"
	input SetAllowSaxton(bool) : "Sets whether TFBots can choose Saxton as a class. 0 = No, 1 = Yes"
	input SetAllowRobo(bool) : "Sets whether TFBots can choose Telecon as a class. 0 = No, 1 = Yes"
	input SetAllowAgent(bool) : "Sets whether TFBots can choose Agent as a class. 0 = No, 1 = Yes"
]

@SolidClass base(Trigger, Targetname, DamageTypeP) = trigger_hurt :
	"A trigger volume that damages entities that touch it."
[
	master(string) : "Master (Obsolete)" : : "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
	damage(integer) : "Damage" : 10 : "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt."
	damagecustomtype(integer) : "Damage Custom Type" : 0 : "Custom Damage Type."
	damagecap(integer) : "Damage Cap" : 20 : "Maximum damage dealt per second. This field is only used if you select the Doubling w/Forgiveness damage model, via the spawnflag."
	damagemodel(choices) : "Damage Model" : 0 : "How damage is dealt. Normal always does the specified amount of damage each half second. Doubling starts with the specified amount and doubles it each time it hurts the toucher. Forgiveness means that if the toucher gets out of the trigger the damage will reset to the specified value. Good for making triggers that are deadly over time without having to cause massive damage on each touch." =
	[
		0 : "Normal"
		1 : "Doubling w/forgiveness"
	]
	
	nodmgforce(choices) : "Zero Damage Force" : 0 : "Should the damaged entity receive no physics force from this trigger." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Inputs
	input SetDamage(float) : "Set a new amount of damage for this trigger."
	
	// Outputs
	output OnHurt(void) : "Fired whenever this trigger hurts something other than a player."
	output OnHurtPlayer(void) : "Fired whenever this trigger hurts a player."
]

@PointClass base(Targetname,Parentname,BaseObject) iconsprite("editor-puddy/mapobj_cart_dispenser") = mapobj_cart_dispenser : 
	"TF2 Dispenser" 
[
	spawnflags(flags) =
	[
		4: "Ignore line of sight check" : 1
		8: "Don't heal disguised/stealthed spies" : 1
	]
	
	touch_trigger(target_destination) : "Custom Touch Trigger"
	
	input FireHalloweenBonus(integer) : "Trigger bonus effect on players near this dispenser"
	input SetDispenserLevel(integer) : "Set the dispenser level: 1, 2, or 3"
	input Enable(void) : "Enable this entity."
	input Disable(void) : "Disable this entity."
]

@SolidClass base(Parentname,Targetname,Trigger) = dispenser_touch_trigger : "Trigger for dispenser healing bounds"
[
]

@PointClass base(Targetname,EnableDisable) iconsprite("editor-puddy/tf_logic_arena") = tf_logic_arena : "Enables Arena Mode."
[	

	CapEnableDelay(float) : "Capture Point Enable Time" : 0

// Outputs
	output OnArenaRoundStart(void)	: "Fired the moment an arena match starts"
	output OnCapEnabled(void)	: "Fired when the specified time elapses and the cap becomes enabled"

]

@PointClass base(Targetname) iconsprite("editor-puddy/tf_logic_multiple_escort") = tf_logic_multiple_escort : "Activates Payload Race Mode."
[
]

@PointClass base(Targetname) iconsprite("editor-puddy/tf_logic_koth") = tf_logic_koth : "King of the Hill Entity. This is used to detect a KOTH map."
[	
	timer_length(integer) : "Timer length (in seconds)" : 180 : "Initial timer length for each team."
	unlock_point(integer) : "Unlock Point (in seconds)" : 30 : "Time to wait before unlocking the point in CP KOTH maps."

	input SetRedTimer(integer)	:	"Set the time remaining for the RED timer."
	input SetBlueTimer(integer)	:	"Set the time remaining for the BLUE timer."

	input AddRedTimer(integer)	:	"Add time to the RED timer."
	input AddBlueTimer(integer)	:	"Add time to the BLUE timer."

]	

@PointClass base(Targetname,Parentname,Angles ) studio("models/bots/bot_worker/bot_worker_a.mdl")= tf_robot_destruction_robot_spawn : "Robot Destruction Robot spawn point."
[	
	health(integer) : "Health" : 500 : "The health for the robot"
	gibs(integer) : "Gibs" : 0 : "The number of point-giving gibs to spawn on death"
	type(choices) : "Robot Style" : 0 =
	[
		0 : "Frustum"
		1 : "Sphere"
		2 : "King"
		3 : "Finale"
	]
	spawngroup(target_source) : "Spawn Group" : : "Which group this spawn belongs to"
	startpath(target_source) : "Start Path" : : "Which path_track to head towards first"

	input SpawnRobot(void)	:	"Spawn a robot on this spawnpoint.  Does nothing if there's already a robot."
	output OnRobotKilled(void) : "Sent when this spawn point's robot dies."
]


@PointClass base(Targetname) = tf_robot_destruction_spawn_group : "Robot Destruction spawn group. This groups the Robot Destruction spawn points"
[	
	respawn_time(float) : "Respawn Time" : 0 : "Respawn time for this group"
	group_number(integer) : "Group Number" : 0 : "This group's number.  Affect's UI position and spawn priority"
	team_number(choices) : "Team Number" : 2 =
	[
		2 : "Red"
		3 : "Blue"
		4 : "Green"
		5 : "Yellow"
	]
	hud_icon(string) : "HUD Icon Name" : "../HUD/hud_bot_worker_outline_blue" : "HUD icon to use for this group"
	respawn_reduction_scale(float) : "Team Respawn Reduction Scale" : 0 : "Scale the owning team's respawn time by this amount when this group is dead."

	output OnRobotsRespawn(void) : "Sent when this group's robots respawn."
	output OnAllRobotsDead(void ) : "Sent when the last robot alive in this group dies."
]

@BaseClass = RobotDestruction
[	

]

@PointClass base(Targetname,RobotDestruction) = tf_logic_robot_destruction : "Robot Destruction Entity. This is used to detect a Robot Destruction map."
[
	score_interval(float) : "Robot Scoring Interval (in seconds)" : 1 : "How often a robot should score a point while hacking."
	loser_respawn_bonus_per_bot(float) : "Loser Respawn Bonus Per Bot (percentage)" : 0 : "How much faster the losing team will respawn per bot difference."
	red_respawn_time(float) : "Red Respawn Time (in seconds)" : 10 : "Respawn times for Red"
	blue_respawn_time(float) : "Blue Respawn Time (in seconds)" : 10 : "Respawn times for Blue"
	green_respawn_time(float) : "Green Respawn Time (in seconds)" : 10 : "Respawn times for Green"
	yellow_respawn_time(float) : "Yellow Respawn Time (in seconds)" : 10 : "Respawn times for Yellow"
	max_points(integer) : "Max Points" : 200 : "The number of points a team must get to unlock their win condition."
	finale_length(float) : "Finale Length" : 30 : "The amount of time from after max score is reached a team will win."
	res_file(string) : "HUD Res File" : "resource/UI/HudObjectiveRobotDestruction.res" : "What res file to use for the HUD"
	
	output OnBlueHitMaxPoints(void) : "Sent when Blue hits the max points."
	output OnRedHitMaxPoints(void) : "Sent when Red hits the max points."
	output OnBlueLeaveMaxPoints(void) : "Sent when blue goes from max points to fewer."
	output OnRedLeaveMaxPoints(void) : "Sent when red goes from max points to fewer."
	output OnBlueHitZeroPoints(void) : "Sent when Blue hits 0 points."
	output OnRedHitZeroPoints(void) : "Sent when Red hits 0 points"
	output OnBlueHasPoints(void) : "Sent when Blue goes from 0 to any points"
	output OnRedHasPoints(void) : "Sent when Red goes from 0 to any points"

	output OnRedFinalePeriodEnd(void) : "Sent when the red finale period ends."
	output OnBlueFinalePeriodEnd(void) : "Sent when the blue finale period ends."

	output OnRedFirstFlagStolen(void) : "Sent when red's first flag gets stolen."
	output OnRedFlagStolen(void) : "Sent when a flag gets stolen from red."
	output OnRedLastFlagReturned(void) : "Sent when red's last stolen flag gets returned."
	output OnBlueFirstFlagStolen(void) : "Sent when blue's first flag gets stolen."
	output OnBlueFlagStolen(void) : "Sent when a flag gets stolen from blue."
	output OnBlueLastFlagReturned(void) : "Sent when blue's last stolen flag gets returned."


	output OnGreenHitMaxPoints(void) : "Sent when Green hits the max points."
	output OnYellowHitMaxPoints(void) : "Sent when Yellow hits the max points."
	output OnGreenLeaveMaxPoints(void) : "Sent when blue goes from max points to fewer."
	output OnYellowLeaveMaxPoints(void) : "Sent when red goes from max points to fewer."
	output OnGreenHitZeroPoints(void) : "Sent when Green hits 0 points."
	output OnYellowHitZeroPoints(void) : "Sent when Yellow hits 0 points"
	output OnGreenHasPoints(void) : "Sent when Green goes from 0 to any points"
	output OnYellowHasPoints(void) : "Sent when Yellow goes from 0 to any points"

	output OnYellowFinalePeriodEnd(void) : "Sent when the red finale period ends."
	output OnGreenFinalePeriodEnd(void) : "Sent when the blue finale period ends."

	output OnYellowFirstFlagStolen(void) : "Sent when red's first flag gets stolen."
	output OnYellowFlagStolen(void) : "Sent when a flag gets stolen from red."
	output OnYellowLastFlagReturned(void) : "Sent when red's last stolen flag gets returned."
	output OnGreenFirstFlagStolen(void) : "Sent when blue's first flag gets stolen."
	output OnGreenFlagStolen(void) : "Sent when a flag gets stolen from blue."
	output OnGreenLastFlagReturned(void) : "Sent when blue's last stolen flag gets returned."


]

@PointClass base(Targetname) = tf_logic_player_destruction : "Player Destruction Entity. This is used to detect a Player Destruction map."
[
	prop_model_name(studio) : "Prop Model Name" : "models/flag/flag.mdl" : "model of prop that drops from player on death"
	prop_drop_sound(sound) : "Prop Drop Sound" : "" : "sound when player drops prop"
	prop_pickup_sound(sound) : "Prop Pickup Sound" : "" : "sound when player picks up prop"
	input ScoreRedPoints(void) : "Score points for red."
	input ScoreBluePoints(void) : "Score points for blue."
	input EnableMaxScoreUpdating(void) : "Allow the max score to update based on player count."
	input DisableMaxScoreUpdating(void) : "Disallow the max score to update based on player count."
	input SetCountdownTimer(integer) : "Set the countdown time and start the timer."
	input SetCountdownImage(string) : "Set the countdown image."
	input SetFlagResetDelay(integer) : "Set the length of time (in seconds) before a dropped flag resets."
	input SetPointsOnPlayerDeath(integer) : "Set number of points per flag dropped upon player death."

	red_respawn_time(float) : "Red Respawn Time (in seconds)" : 10 : "Respawn times for Red"
	blue_respawn_time(float) : "Blue Respawn Time (in seconds)" : 10 : "Respawn times for Blue"
	min_points(integer) : "Min Points" : 10 : "The minimum points to win"
	points_per_player(integer) : "Point Per Player" : 5 : "How many points to increase the max points by per player"
	finale_length(float) : "Finale Length" : 30 : "The amount of time from after max score is reached a team will win."
	res_file(string) : "HUD Res File" : "resource/UI/HudObjectivePlayerDestruction.res" : "What res file to use for the HUD"
	flag_reset_delay(integer) : "Flag Reset Delay (in seconds)" : 60 : "Length of time (in seconds) before a dropped flag resets."
	heal_distance(integer) : "Heal Distance" : 450 : "The distance for the team leader's ability to heal teammates."
	
	output OnBlueHitMaxPoints(void) : "Sent when Blue hits the max points."
	output OnRedHitMaxPoints(void) : "Sent when Red hits the max points."
	output OnBlueLeaveMaxPoints(void) : "Sent when blue goes from max points to fewer."
	output OnRedLeaveMaxPoints(void) : "Sent when red goes from max points to fewer."
	output OnBlueHitZeroPoints(void) : "Sent when Blue hits 0 points."
	output OnRedHitZeroPoints(void) : "Sent when Red hits 0 points"
	output OnBlueHasPoints(void) : "Sent when Blue goes from 0 to any points"
	output OnRedHasPoints(void) : "Sent when Red goes from 0 to any points"

	output OnRedFinalePeriodEnd(void) : "Sent when the red finale period ends."
	output OnBlueFinalePeriodEnd(void) : "Sent when the blue finale period ends."

	output OnRedFirstFlagStolen(void) : "Sent when red's first flag gets stolen."
	output OnRedFlagStolen(void) : "Sent when a flag gets stolen from red."
	output OnRedLastFlagReturned(void) : "Sent when red's last stolen flag gets returned."
	output OnBlueFirstFlagStolen(void) : "Sent when blue's first flag gets stolen."
	output OnBlueFlagStolen(void) : "Sent when a flag gets stolen from blue."
	output OnBlueLastFlagReturned(void) : "Sent when blue's last stolen flag gets returned."

	output OnRedScoreChanged(float) : "Send when score changes, and is a value representing total progress from [0..1]."
	output OnBlueScoreChanged(float) : "Send when score changes, and is a value representing total progress from [0..1]."

	output OnCountdownTimerExpired(void) : "Sent when the countdown timer expires."
]

@SolidClass base(Trigger, Targetname, TeamNum) = trigger_rd_vault_trigger :
	"A trigger used to mark where players can steal credits."
[
	output OnPointsStolen(void) : "Sent during every point stealing 'pulse'."
	output OnPointsStartStealing(void) : "Sent when points start being stolen."
	output OnPointsEndStealing(void) : "Send when points stop being stolen."
]
	
	
@SolidClass base(Targetname) = func_nav_blocker : "A brush entity that can block nav areas touching its AABB." 
[
	input BlockNav(string) : "Starts blocking nav areas."
	input UnblockNav(void) : "Stops blocking nav areas."

	teamToBlock(choices) : "Team(s) to block" : -1 : "Block the nav for bots on this team" =
	[
		-1 : "Everyone"
		2 : "Red"
		3 : "Blue"
		4 : "Green"
		5 : "Yellow"
	]
	
	affectsFlow(choices) : "Affects Flow?" : 0 : "Does this func_nav_blocker block flow in the level? Only func_nav_blockers with this enabled will cause flow recomputation on blocking/unblocking." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(Targetname) = func_nav_avoid : "Influence bots to avoid this region by increasing the pathfinding cost within it."
[
	tags(string) : "Tags" : "" : "A space delimited list of tags. A tag is a label with no spaces. If a TFBot has at least one matching tag, it will pay attention to this entity. Tags that are automatically set on TFBots include bomb_carrier, common, mission_sniper, mission_spy, mission_sentry_buster, or any class name." 

	team(choices) : "Team" : -2 : "Which team will avoid this region" =
	[
		-2 : "Everyone"
		2 : "Red"
		3 : "Blue"
		4 : "Green"
		5 : "Yellow"
	]

	start_disabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@SolidClass base(Targetname) = func_nav_prefer : "Influence bots to prefer this region by decreasing the pathfinding cost within it."
[
	tags(string) : "Tags" : "" : "A space delimited list of tags. A tag is a label with no spaces. If a TFBot has at least one matching tag, it will pay attention to this entity. Tags that are automatically set on TFBots include bomb_carrier, common, mission_sniper, mission_spy, mission_sentry_buster, or any class name." 

	team(choices) : "Team" : -2 : "Which team will prefer this region" =
	[
		-2 : "Everyone"
		2 : "Red"
		3 : "Blue"
		4 : "Green"
		5 : "Yellow"
	]

	start_disabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@SolidClass base(Trigger, Targetname) = func_nav_prerequisite : "A trigger volume that requires bots to do perform a task before they can move through it."
[
	Task(choices) : "Task" : 1 : "What must be done to move through this volume" =
	[
		1 : "Destroy Entity (Value = max range to attack from. -1 for no range restriction)"
		2 : "Move to Entity"
		3 : "Wait (Value = seconds to wait)"
	]

	Entity(target_destination) : "Task Entity" : : "The subject entity of the Task"

	Value(float) : "Task Value" : 0 : "A Task-specific value"

	start_disabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@PointClass base(Targetname) iconsprite("editor-puddy/entity_spawn_manager") = entity_spawn_manager : 
    "An entity that spawns an entity class at entity_spawn_points."
[
	entity_name(string) : "Entity Name" :  : "Name of the entity class we are supposed to spawn."
	entity_count(integer) : "Count" : 0 : "Max number of entities to have spawned at one time, if points are available."
	respawn_time(integer) : "Respawn Time" : 0 : "Time to wait before we spawn a new entity when one is destroyed."
	drop_to_ground(choices) : "Drop to Ground?" : 0 : "Should entities spawn on the ground beneath the entity_spawn_point or float at its location?" =
	[
		0 : "No"
		1 : "Yes"
	]
	random_rotation(choices) : "Random Rotation?" : 0 : "Should entities be rotated to random angles upon spawn?" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname, Angles) iconsprite("editor-puddy/entity_spawn_point") = entity_spawn_point : 
    "A spawn location associated with an entity_spawn_manager."
[
	spawn_manager_name(string) : "Spawn Manager Name" :  : "Name of the spawn manager entity we are associated with."
]

@PointClass base(Item) studio("models/props_halloween/pumpkin_explode.mdl") = tf_pumpkin_bomb :
    "tf_pumpkin_bomb is a explosive hazard generally used in the official Team Fortress 2 Halloween maps. In the official maps, they are spawned by a entity_spawn_manager."
[
]

@PointClass base(Targetname,Studiomodel,Origin,Angles) studioprop() = tf_generic_bomb :
    "An explosive hazard. Identical to tf_pumpkin_bomb, but more customizable."
[
	damage(float) : "Explosion Damage" : 50 : "Amount of damage to do when exploding."
	radius(float) : "Explosion Radius" : 100 : "Explosion radius."
	health(integer) : "Health" : 1 : "Health of the bomb."
	explode_particle(string) : "Explosion Particle" :  : "Name of the particle effect to play when exploding."
	sound(sound) : "Explosion Sound" :  : "Name of the sound effect to play when exploding."
	friendlyfire(choices) : "Friendly Fire" : 0 : "Set the friendly fire mode." =
	[
		0 : "Damage attacker and enemies"
		1 : "Damage everyone"
	]

	input Detonate(void) : "Force detonation."

	output OnDetonate(void) : "Fired when this bomb detonates."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = tf_player_equip : 
	"An entity that gives equipment to the player who activates it."
[
	spawnflags(flags) =
	[
		1: "Use Only" : 0
	]

	stripweapons(Choices) : "Strip weapons" : 0 : "Remove players' current weapons before equipping new ones" =
	[
		0 : "No"
		1 : "Yes"
	]

	weapon1(integer) : "Weapon 1" : 0 : "ID of Weapon"
	weapon2(integer) : "Weapon 2" : 0 : "ID of Weapon"
	weapon3(integer) : "Weapon 3" : 0 : "ID of Weapon"

	// Inputs
	//input EquipWeapons(void) : "Equips all of the players on the current server with the specified weapons."
]

@PointClass color(0 0 255) size(-1 -1 -64, 1 1 -8) sidelist(sides) iconsprite("editor/env_cubemap.vmt") = env_cubemap : 
	"An entity that creates a sample point for the Cubic Environment Map."
[
	cubemapsize(choices) : "Cubemap Size" : 0 =
	[
		0 : "Default"
		1 : "1x1"
		2 : "2x2"
		3 : "4x4"
		4 : "8x8"
		5 : "16x16"
		6 : "32x32"
		7 : "64x64"
		8 : "128x128"
		9 : "256x256"
	]
	sides(sidelist) : "Brush faces": : "(Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Use CTRL while clicking to add or remove from the selection."
]

@PointClass base(Targetname,Parentname,EnableDisable) sphere() iconsprite("editor/env_soundscape") line(255 255 255, targetname, position0) line(255 255 255, targetname, position1) line(255 255 255, targetname, position2) line(255 255 255, targetname, position3) line(255 255 255, targetname, position4) line(255 255 255, targetname, position5) line(255 255 255, targetname, position6) line(255 255 255, targetname, position7) = env_soundscape : 
	"An entity to control sound in an area. The active soundscape at any time is the last one that had line-of-sight to the player, and was within the radius."
[
	radius(integer) : "Radius" : 128 : "If set to -1, then the player can hear the soundscape as long as he can see it (regardless of distance to it)."
	soundscape(choices) : "Soundscape" : : "The name of the soundscape to use. Corresponds to an entry in the soundscapes*.txt file in the scripts directory." =
	[
		"tf2.general_ambient" : "tf2.general_ambient"
		"tf2.respawn_room" : "tf2.respawn_room"
		"2fort.Underground" : "2fort.Underground"
		"2fort.Underground2" : "2fort.Underground2"
		"2fort.OutdoorPond" : "2fort.OutdoorPond"
		"2fort.OutdoorFort" : "2fort.OutdoorFort"
		"2fort.Indoor" : "2fort.Indoor"
		"Badlands.Inside" : "Badlands.Inside"
		"Badlands.Outside" : "Badlands.Outside"
		"Badlands.OutsideInterior" : "Badlands.OutsideInterior"
		"barnblitz.inside" : "barnblitz.inside"
		"barnblitz.outside" : "barnblitz.outside"
		"CactusV.Inside" : "CactusV.Inside (Decoy)"
		"CactusV.RespawnA" : "CactusV.RespawnA (Decoy)"
		"CactusV.Outside" : "CactusV.Outside (Decoy)"
		"Chariots.Inside" : "Chariots.Inside (Pipeline)"
		"Chariots.Outside" : "Chariots.Outside (Pipeline)"
		"Deathpit.Inside" : "Deathpit.Inside (Coaltown)"
		"Deathpit.RespawnA" : "Deathpit.RespawnA (Coaltown)"
		"Deathpit.Outside" : "Deathpit.Outside (Coaltown)"
		"DoubleCross.Inside" : "DoubleCross.Inside"
		"DoubleCross.Outside" : "DoubleCross.Outside"
		"Dustbowl.Indoors" : "Dustbowl.Indoors"
		"Dustbowl.Outdoors" : "Dustbowl.Outdoors"
		"Egypt.Indoor" : "Egypt.Indoor"
		"Egypt.Outdoor" : "Egypt.Outdoor"
		"Goldrush.DeepInside" : "Goldrush.DeepInside"
		"Goldrush.Outside" : "Goldrush.Outside"
		"Goldrush.Inside" : "Goldrush.Inside"
		"Gorge.Inside" : "Gorge.Inside"
		"Gorge.Outside" : "Gorge.Outside"
		"Granary.Outside" : "Granary.Outside"
		"GravelPit.Outside" : "GravelPit.Outside"
		"Halloween.Inside" : "Halloween.Inside"
		"Halloween.Outside" : "Halloween.Outside"
		"Halloween.Underworld" : "Halloween.Underworld"
		"Halloween.hell" : "Halloween.hell"
		"harbor.inside_blue_spawn_01" : "harbor.inside_blue_spawn_01 (Foundry)"
		"harbor.inside_blue_hq" : "harbor.inside_blue_hq (Foundry)"
		"harbor.indoor_blue_fuel" : "harbor.indoor_blue_fuel (Foundry)"
		"harbor.outdoor_blue" : "harbor.outdoor_blue (Foundry)"
		"harbor.inside_red_spawn_01" : "harbor.inside_red_spawn_01 (Foundry)"
		"harbor.inside_red_hq" : "harbor.inside_red_hq (Foundry)"
		"harbor.indoor_red_fuel" : "harbor.indoor_red_fuel (Foundry)"
		"harbor.outdoor_red" : "harbor.outdoor_red (Foundry)"
		"harbor.outdoor_central" : "harbor.outdoor_central (Foundry)"
		"HighTower.Inside" : "HighTower.Inside"
		"HighTower.Outside" : "HighTower.Outside"
		"Hydro.Outside" : "Hydro.Outside"
		"Lakeside.Cave" : "Lakeside.Cave"
		"Lakeside.Inside" : "Lakeside.Inside"
		"Lakeside.Lake" : "Lakeside.Lake"
		"Lakeside.Outside" : "Lakeside.Outside"
		"Lakeside.Temple" : "Lakeside.Temple"
		"Lakeside.Wood" : "Lakeside.Wood"
		"Lumberyard.Inside" : "Lumberyard.Inside"
		"Lumberyard.Outside" : "Lumberyard.Outside"
		"Mannworks.InsideCellars" : "Mannworks.InsideCellars"
		"Mannworks.InsideWood" : "Mannworks.InsideWood"
		"Mannworks.Outside" : "Mannworks.Outside"
		"Mannworks.Respawn" : "Mannworks.Respawn"
		"Medieval.Inside" : "Medieval.Inside"
		"Medieval.Outside" : "Medieval.Outside"
		"mountainlab.Bluspawn" : "mountainlab.Bluspawn"
		"mountainlab.Cpoint" : "mountainlab.Cpoint"
		"mountainlab.Inside" : "mountainlab.Inside"
		"mountainlab.Outside1" : "mountainlab.Outside1"
		"Nightfall.Cavern" : "Nightfall.Cavern"
		"Nightfall.Indoors" : "Nightfall.Indoors"
		"Nightfall.Outdoors" : "Nightfall.Outdoors"
		"Nucleus.Inside" : "Nucleus.Inside"
		"Nucleus.Outside" : "Nucleus.Outside"
		"Ravine.Inside" : "Ravine.Inside"
		"Ravine.Outside" : "Ravine.Outside"
		"Rottenburg.Alcove" : "Rottenburg.Alcove"
		"Rottenburg.Clearing" : "Rottenburg.Clearing"
		"Rottenburg.Spawn" : "Rottenburg.Spawn"
		"Rottenburg.Town" : "Rottenburg.Town"
		"Sawmill.Inside" : "Sawmill.Inside"
		"Sawmill.InsideNoLights" : "Sawmill.InsideNoLights"
		"Sawmill.InsideWaterfall" : "Sawmill.InsideWaterfall"
		"Sawmill.Outside" : "Sawmill.Outside"
		"soho_generic" : "soho_generic (Kong King)"
		"soho_indoor" : "soho_indoor (Kong King)"
		"soho_square" : "soho_square (Kong King)"
		"underground_soho" : "underground_soho (Kong King)"
		"stormfront.Underground" : "stormfront.Underground (Coldfront)"
		"stormfront.Outside" : "stormfront.Outside (Coldfront)"
		"ThunderMountain.Inside" : "ThunderMountain.Inside"
		"ThunderMountain.Outside" : "ThunderMountain.Outside"
		"Upward.Inside" : "Upward.Inside"
		"Upward.Outside" : "Upward.Outside"
		"Viaduct.Inside" : "Viaduct.Inside"
		"Viaduct.Outside" : "Viaduct.Outside"
		"warehouse.inside_boilers" : "warehouse.inside_boilers (Mannhattan)"
		"warehouse.inside_mainhall" : "warehouse.inside_mainhall (Mannhattan)"
		"warehouse.inside_spawn_foyer" : "warehouse.inside_spawn_foyer (Mannhattan)"
		"warehouse.inside_spawn_int" : "warehouse.inside_spawn_int (Mannhattan)"
		"warehouse.outside" : "warehouse.outside"
		"Well.DeepInside" : "Well.DeepInside"
		"Well.Inside" : "Well.Inside"
		"Well.Outside" : "Well.Outside"
	]
	position0(target_destination) : "Sound Position 0" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position1(target_destination) : "Sound Position 1" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position2(target_destination) : "Sound Position 2" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position3(target_destination) : "Sound Position 3" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position4(target_destination) : "Sound Position 4" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position5(target_destination) : "Sound Position 5" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position6(target_destination) : "Sound Position 6" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."
	position7(target_destination) : "Sound Position 7" : "" : "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world."

	// Inputs
	input Enable(void) : "Enable the soundscape."
	input Disabled(void) : "Disable the soundscape."
	input ToggleEnabled(void) : "Toggle the soundscape enabled state."

	// Outputs
	output OnPlay(void) : "Fired when this soundscape becomes the active one."
]

@PointClass base(Targetname, Angles) iconsprite("editor-abs/env_sun") color(255 0 0) = env_sun : 
	"An entity to control & draw a sun effect in the sky."
[
	target(target_destination) : "Viewer entity" : : "Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the env_sun entity."
	
	use_angles(choices) : "UseAngles" : 0 : "The old way to orient env_sun is to point it at a target. The new way is to specify the angles. If you use the new way, set this property to YES." = 
	[
		0 : "No"
		1 : "Yes"
	]

	pitch(integer) : "Pitch" : 0

	rendercolor(color255) : "Sun Color (R G B)" : "100 80 80"
	overlaycolor(color255) : "Overlay Color (R G B)" : "0 0 0" : "A value of 0 0 0 will act the old way."
	
	size(integer) : "Size" : 16
	overlaysize(integer) : "Overlay Size" : -1 : "A value of -1 means the overlay will act the old way."
	
	material(sprite) : "Material Name" : "sprites/light_glow02_add_noz" : "Material of the inner glow."
	overlaymaterial(sprite) : "Overlay Material Name" : "sprites/light_glow02_add_noz" : "Material of the overlay glow."

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."

	// Inputs
	input TurnOn(void) : "Enable sun rendering."
	input TurnOff(void) : "Disable sun rendering."
	input SetColor(color255) : "Change the sun's color. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
]

// Weapons

@PointClass base(Weapon) studio("models/weapons/w_physics.mdl") = tf_weapon_physcannon : "TF Gravity Gun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_bat.mdl") = tf_weapon_bat : "Scout Bat" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_bonesaw.mdl") = tf_weapon_bonesaw : "Medic Bonesaw" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_bottle.mdl") = tf_weapon_bottle : "Demoman Bottle" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_toolbox.mdl") = tf_weapon_builder : "Engineer PDA" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_machete.mdl") = tf_weapon_club : "Sniper Club" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_fireaxe.mdl") = tf_weapon_fireaxe : "Pyro Fireaxe" []
@PointClass base(Weapon) studio("models/weapons/v_models/v_fist_heavy.mdl") = tf_weapon_fists : "Heavy Fists" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_flamethrower.mdl") = tf_weapon_flamethrower : "Pyro Flamethrower" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_grenadelauncher.mdl") = tf_weapon_grenadelauncher : "Demoman GrenadeLauncher" []
@PointClass base(Weapon) studio("models/weapons/v_models/v_watch_spy.mdl") = tf_weapon_invis : "Spy Clock" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_knife.mdl") = tf_weapon_knife : "Spy Knife" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_medigun.mdl") = tf_weapon_medigun : "Medic Medigun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_minigun.mdl") = tf_weapon_minigun : "Heavy MiniGun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_builder.mdl") = tf_weapon_objectselection : "Engineer PDA"[]
@PointClass base(Weapon) studio("models/weapons/w_models/w_pda_engineer.mdl") = tf_weapon_pda_engineer_destroy : "Engineer Destory PDA" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_cigarette_case.mdl") = tf_weapon_pda_spy : "Spy Disguie PDA" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_stickybomb_launcher.mdl") = tf_weapon_pipebomblauncher : "Demoman PipeBomb Launcher" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_pistol.mdl") = tf_weapon_pistol_scout : "Scout Pistol" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_pistol.mdl") = tf_weapon_pistol : "Engineer Pistol" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_revolver.mdl") = tf_weapon_revolver : "Spy Revolver" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_rocketlauncher.mdl") = tf_weapon_rocketlauncher : "Soldier RocketLauncher" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_scattergun.mdl") = tf_weapon_scattergun : "Scout Scattergun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_shotgun.mdl") = tf_weapon_shotgun_hwg : "Heavy Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_shotgun.mdl") = tf_weapon_shotgun_primary : "Engineer Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_shotgun.mdl") = tf_weapon_shotgun_pyro : "Pyro Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_shotgun.mdl") = tf_weapon_shotgun_soldier : "Soldier Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_shovel.mdl") = tf_weapon_shovel : "Soldier Shovel" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_smg.mdl") = tf_weapon_smg : "Sniper SMG" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_sniperrifle.mdl") = tf_weapon_sniperrifle : "Sniper SniperRife" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_syringegun.mdl") = tf_weapon_syringegun_medic : "Medic SyringGun" []
@PointClass base(Weapon) studio("models/weapons/w_models/w_wrench.mdl") = tf_weapon_wrench : "Engineer Wrench" []

@SolidClass base(Targetname, Parentname) = func_precipitation : 
	"A brush entity that creates rain and snow inside its volume."
[
	renderamt(integer) : "Density (0-100%)" : 100	
	rendercolor(color255) : "Color (R G B)" : "100 100 100"
	preciptype(choices) : "Precipitation Type" : 0 =	
	[
		0 : "Rain"
		1 : "Snow"
		2 : "Ash"
		3 : "Snowfall"
		4 : "Particle Rain"
		5 : "Particle Ash"
		6 : "Particle Rainstorm"
		7 : "Particle Snow"
	]
	minSpeed(float) : "Minimum speed (snowfall only)" : 25
	maxSpeed(float) : "Maximum speed (snowfall only)" : 35
]

@SolidClass base(Targetname) = func_precipitation_blocker : 
	"A brush entity that block rain and snow inside its volume."
[
]

@SolidClass base(Targetname, TeamNum, EnableDisable, Toggle) = func_flag_alert : "Alerts are triggered when an enemy carrying a flag starts touching the area (or any player for an area with no team)."
[
	playsound(choices) : "Play alert sound" : 1 : "Play the sound when the alert is triggered." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	alert_delay(integer) : "Delay between alerts (in seconds)" : 10 : "The amount of time between alerts being triggered (per team)."
	
	output OnTriggeredByTeam1(void) : "Sent when RED triggers the alert."
	output OnTriggeredByTeam2(void) : "Sent when BLUE triggers the alert."
]

@SolidClass base(Targetname, TeamNum, Parentname, Origin, RenderFields, EnableDisable) = func_forcefield : 
	"Brushes that become visible to players when they get close. Use them to mark areas that they're unable to enter." 
[
]

@PointClass base(Targetname, EnableDisable, Item, Condition) studio("models/pickups/pickup_powerup_regen.mdl") sphere(fademindist) sphere(fademaxdist) = item_powerup_rune_custom :	"Customize Powerup" 
[
	ModelName(string)    : "Model override" : "models/pickups/pickup_powerup_regen.mdl"
	PickupSound(sound)  : "Pickup sound" : "HealthKit.Touch"
]

@PointClass base(Targetname, EnableDisable, Item, Condition) studio("models/pickups/pickup_powerup_regen.mdl") sphere(fademindist) sphere(fademaxdist) = item_powerup_rune_temp :	"Temporary Customize Powerup. Powerup effect wears off. Powerup respawns automatically" 
[
	ModelName(string)    : "Model override" : "models/pickups/pickup_powerup_regen.mdl"
	PickupSound(sound)  : "Pickup sound" : "HealthKit.Touch"
]

@PointClass base(Targetname, EnableDisable, Item) studio("models/pickups/pickup_powerup_crit.mdl") sphere(fademindist) sphere(fademaxdist) = item_powerup_crit :	"Temporary Crit Powerup. Powerup effect wears off. Powerup respawns automatically" 
[
	ModelName(string)    : "Model override" : "models/pickups/pickup_powerup_crit.mdl"
	PickupSound(sound)  : "Pickup sound" : "HealthKit.Touch"
	RespawnTime(integer) : "Respawn delay (in seconds)" : 60
]

@PointClass base(Targetname, EnableDisable, Item) studio("models/pickups/pickup_powerup_uber.mdl") sphere(fademindist) sphere(fademaxdist) = item_powerup_uber :	"Temporary Uber Powerup. Powerup effect wears off. Powerup respawns automatically"
[
	ModelName(string)    : "Model override" : "models/pickups/pickup_powerup_uber.mdl"
	PickupSound(sound)  : "Pickup sound" : "HealthKit.Touch"
	RespawnTime(integer) : "Respawn delay (in seconds)" : 60
]

@SolidClass base(Trigger,Condition) = trigger_add_tf_player_condition :
	"A trigger that will add a condition to tf players or npc."
[
	duration(float)			: "Duration"		:  0	: "The duration of the condition. NOTE: -1 duration means last until the player exits the trigger."
]

@SolidClass base(Trigger,Condition) = trigger_remove_tf_player_condition :
	"A trigger that will remove a condition (or all if set to INVALID) from tf players."
[
]

@SolidClass base(Trigger,Origin,EnableDisable,Toggle,Targetname,TriggerOnce,PAttributes) = trigger_add_or_remove_tf_player_attributes  :
	"A trigger that will add a attributes to players."
[
	duration(float)		: "Duration"		:  -1	: "The duration of the Attributes. NOTE: -1 duration means last until the player exits the trigger."
	value(float)		: "Value"		:  "1.0"	: "The value which affects the attribute chosen."
	add_or_remove(choices) : "Add or Remove" : 0 : "Add or Remove Attribute." =
	[
		0 : "Add"
		1 : "Remove"
	]
]

@PointClass base(Targetname, Angles) studio("models/player/soldier.mdl") = lfe_logic_playerteleport : "Teleports a team's players."  
[
	team_to_teleport(choices) : "Team to Teleport" : 1 =
	[
		1 : "RED"
		2 : "BLU"
	]

	link_trigger(string) : "Linked Trigger" : "" : ""

	input TeleportPlayers(void) : "Teleport the team's players."
]

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_logic_coop.vmt") = fc_logic_coop : "Forced Co-Op Logic" []

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_logic_coop.vmt") = fc_logic_zombie : "Forced Zombie Co-op Logic" []

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_logic_blucoop.vmt") = fc_logic_blucoop : "Forced BLU Co-Op Logic" []

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_logic_vs.vmt") = lfe_logic_vs : "Forced Versus Logic" []

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_logic_horde.vmt") = lfe_logic_horde : "Horde Logic"
[
	// Inputs
	input ForceTeleportToTeamSpawn(void) : "Teleport all alive player to info_player_teamspawn and freeze them."
	input ReleaseTeamSpawn(void) : "Unfreeze all player that were teleported."
	//input ForceFinaleStart(void) : "Force Finale Event."
	//input StartIntro(void) : "Start Cutscene intro."
	//input FinishIntro(void) : "Finish Cutscene intro."
]

@PointClass base(Targetname) iconsprite("editor/logic_relay.vmt") = fc_logic_deathmatch : "Deathmatch Logic"
[
	FragLimit(integer) : "Frag Limit" : : "How many frags per round."
	Rounds(integer) : "Rounds" : : "How many rounds there are before map change."
	
	// Outputs
	output OnDeathmatchRoundStart(void)	: "Fired on deathmatch round started."
	output OnDeathmatchRoundEnd(void)	: "Fired on deathmatch round end."
]

@PointClass base(Targetname, Origin, EnableDisable, Angles) iconsprite("editor-lfe/lfe_vehiclespawner.vmt") = lfe_vehiclespawner : "Vehicle spawner."
[
	vehicle_to_spawn(choices) : "Vehicle Type" : 1 : "" =
	[
		1 : "Airboat"
		2 : "Jeep"
		3 : "Jalopy"
	]
	max_vehicles(integer) : "Max Vehicles" : : "Maximum owned vehicles at a time."
	delay(integer) : "Spawn Delay" : : "Delay before spawning vehicles."

	// Inputs
	input EnableGun(void) : "Enable vehicle guns."
	input DisableGun(void) : "Disable vehicle guns."
	input RemoveVehicles(void) : "Remove all vehicles."
	input ForceSpawn(void) : "Spawn vehicles."
]

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_building_manager.vmt")= lfe_building_manager : "Engineer Building Manager."
[
	// Inputs
	input DetonateAllBuilding(void) : "Detonate all Buildings."
	input DetonateAllSentry(void) : "Detonate all Sentries."
	input DetonateAllDispenser(void) : "Detonate all Dispenser."
	input DetonateAllTeleporterEntrance(void) : "Detonate all Teleporter Entrance."
	input DetonateAllTeleporterExit(void) : "Detonate all Teleporter Exit."

	input RemoveAllBuilding(void) : "Delete all Buildings."
	input RemoveAllSentry(void) : "Delete all Sentries."
	input RemoveAllDispenser(void) : "Delete all Dispenser."
	input RemoveAllTeleporterEntrance(void) : "Delete all Teleporter Entrance."
	input RemoveAllTeleporterExit(void) : "Delete all Teleporter Exit."
]

@PointClass base(Targetname,EnableDisable) iconsprite("editor-lfe/lfe_logic_date.vmt") = lfe_logic_date : 	"Logic Entity fired on computer's date"
[	
	year(integer) : "Year" : 0 : "Years since 1900"
	month(integer) : "Month" : 0 : "Months since January - [0,11]"
	day(integer) : "Day" : 0 : "Day of the month - [1,31]"
	hour(integer) : "Hour" : 0 : "Hours since midnight - [0,23]"
	minute(integer) : "Minute" : 0 : "Minutes after the hour - [0,59]"
	second(integer) : "second" : 0 : "Seconds after the minute - [0,59]"

// Outputs
	output OnDate(void)	: "Fired when the computer's date is matched"
]

@PointClass base(Targetname, DamageFilter) size(-8 -8 -8, 8 8 8) = logic_playerproxy :
	"An entity that is used to relay inputs/ouputs to the player and back to the world."
[
	// Outputs
	output OnFlashlightOn(float) 			: "Fired when the player turns on his flashlight. This output has the value of how much energy the player had when this happened [0..1]."
	output OnFlashlightOff(float) 			: "Fired when the player turns off his flashlight. This output has the value of how much energy the player had when this happened [0..1]."
	input RequestPlayerHealth(void) 		: "Requests the current player's health from the proxy. This will fire the PlayerHealth output with the value."
	output PlayerHealth(integer)			: "The player's current health value."
	output PlayerMissedAR2AltFire(void)		: "Player fired an AR2 combine ball that didn't kill any enemies."

	input SetFlashlightSlowDrain(void)		: "Puts the player's flashlight in slow-power-drain mode (for Episodic darkness)"
	input SetFlashlightNormalDrain(void)		: "Puts the player's flashlight to default power drain"

	input SetPlayerHealth(integer)			: "Sets the player's health to this value."
	
	input RequestAmmoState(void)			: "Request the ammo state of the player. It will fire PlayerHasAmmo or PlayerHasNoAmmo outputs."
	output PlayerHasAmmo(void) 				: "Fired by request if the player has any ammo."
	output PlayerHasNoAmmo(void) 			: "Fired by request if the player doesn't have any ammo."
	
	output PlayerDied(void) 				: "Fires when the player dies."

	input LowerWeapon(void)					: "Lowers the players weapon."
	
	input EnableCappedPhysicsDamage(void)	:	 "Cause player to take less damage from physics objects, and never more than 30 points from any individual strike."
	input DisableCappedPhysicsDamage(void)	: "Undo effects of EnableCappedPhysicsDamage"
	input SetLocatorTargetEntity(string)	: "Set the entity that the HUD locator should track. (Usually a vehicle)"

	// LFE Inputs
	input IgniteAllPlayer(void)				: "Ignite all player"
	input ExtinguishAllPlayer(void)			: "Extinguish all player"
	input SpeakResponseConcept(string)		: "Forced all player to speak a concept"
	input SetForcedTauntCam(bool)			: "Forced all player to switch to thirdperson"
	input SetHUDVisibility(bool)			: "Toggle Hud visible for all player"
	input HandleMapEvent(string) 			: "Handles map events. This will be different events for different maps."
	input SetFogController(string) 			: "Set new env_fog_controller for all player"
	input BleedAllPlayer(void) 				: "Bleed all player"
]

//-------------------------------------------------------------------------
//
// Half-Life
//
//-------------------------------------------------------------------------

@NPCClass base(BaseCombine) studio("models/combine_soldier_synth.mdl") = npc_combine_synth_base : "Combine Synth"
[
]

@NPCClass base(BaseCombine) studio("models/combine_guard.mdl") = npc_combineguard : "Combine Guard"
[
]

@NPCClass base(BaseCombine) studio("models/conscript.mdl") = npc_conscript : "Combine Conscript"
[
]

@NPCClass base(BaseCombine) studio("models/conscript_red.mdl") = npc_conscriptred : "Rebel Conscript"
[
]

@NPCClass base(BaseCombine) studio("models/cremator_npc.mdl") = npc_cremator : "Combine Cremator"
[
]

@NPCClass base(BaseCombine) studio("models/cremator_npc.mdl") = npc_crematorred : "Rebel Cremator"
[
]

@NPCClass base(BaseCombine) studio("models/fassassin.mdl") = npc_assassin : "Combine Assassin"
[
]

//-------------------------------------------------------------------------
//
// NPCs
//
//-------------------------------------------------------------------------
@PointClass base(BasePropPhysics) studioprop() = prop_combine_ball :
	"A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges "+
	"or other constraints. It can also be configured to break when it takes enough damage."
[
	// Inputs
	input Explode(void) : "Explode"
]

@SolidClass base(Trigger, Angles) = trigger_physics_trap :
	"A volumetric trigger that disintegrates enemies"
[
	dissolvetype(choices) : "Dissolve Type" : "Energy" =
	[
		0 : "Energy"
		1 : "Heavy electrical"
		2 : "Light electrical"
	]
]

@SolidClass base(Trigger) = trigger_weapon_dissolve :
	"A volumetric trigger that dissolves all weapons within it"
[
	emittername(target_destination) : "Emitter Name" : "" : "Name of a single or multiple entities to use as the basis for the emitted effects."

	// Outputs
	output OnDissolveWeapon(void) : "Fires when one weapon is starting to dissolve in the trigger volume."
	output OnChargingPhyscannon(void) : "Fires when the trigger begins to charge the physcannon."

	// Inputs
	input StopSound(void) : "Stops all sounds."
]

@SolidClass base(Trigger) = trigger_weapon_strip :
	"A volumetric trigger that strips combat characters of all weapons"
[
	KillWeapons(choices) : "Kill Weapons" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@SolidClass base(CombineBallSpawners) = func_combine_ball_spawner :
    "Spawns Combine balls."
[
	output OnBallReinserted(void) : "Fired when a combine ball is reinserted into the field (only gets triggered when Combine Power supply is checked)"
	output OnLastBallGrabbed(void) : "Fired when the last combine ball is grabbed from the field by a mega physcannon"
]

@PointClass base(CombineBallSpawners) = point_combine_ball_launcher :
	"Launches Combine balls."
[
	launchconenoise(float) : "Noise to launch direction" : "0.0" : "Noise in degrees added to the launch direction."
	bullseyename(string) : "Name of bullseye" : "" : "If you select the Attach Bullseye spawnflag, you may specify a name here which will be given to the bullseye."
	maxballbounces(integer) : "Max number of bounces" : 8 : "Maximum number of bounces the balls are allowed to do before they are removed."

	spawnflags(Flags) =
	[
		1 : "Attach Bullseye" : 0
		2 : "Balls should collide against player" : 0
	]

    // Inputs
	input LaunchBall(void) : "Launch a ball from the spawner."
]

@NPCClass base(BaseNPC) studio("models/combine_soldier.mdl") = npc_blob : "Blob"
[
	input FormPathShape(string) : "Tells the group to go distribute themselves along a shape defined by path corner entities" 

	input SetRadius(float) : "Force the group to change the radius (density)"
]


@NPCClass base(BaseNPC) studio("models/Weapons/w_grenade.mdl") = npc_grenade_frag : "Hand Grenade"
[
	input SetTimer(float) : "This input makes the grenade live, and specifies how many seconds before it explodes."
]


@NPCClass base(BaseNPC) sphere(sightdist) studio("models/combine_soldier.mdl") = npc_combine_cannon : "Combine Cannon"
[
	sightdist(float) : "Sight radius" : 1024 : "Radius distance at which the cannon is able to aquire enemies."
]

@NPCClass base(BaseNPC) sphere(innerradius) sphere(outerradius) studio("models/combine_camera/combine_camera.mdl") = npc_combine_camera :
	"Combine security camera"
[
	spawnflags(Flags) = 
	[
		32 : "Always Become Angry On New Enemy" : 1
		64 : "Ignore Enemies (Scripted Targets Only)" : 0
		128 : "Start Inactive" : 0
	]
	
	innerradius(integer) : "Inner radius" : 300 : "The camera will only lock onto enemies that are within the inner radius."
	outerradius(integer) : "Outer radius" : 450 : "The camera will flash amber when enemies are within the outer radius, but outside the inner radius."

	minhealthdmg(integer) : "Min req'd damage for hurting camera" : 0
	defaulttarget(target_destination) : "Default target" : "" : "The default target is the entity that the camera follows when it has no other target to track."

	// Inputs
	input Disable(void) : "Disables the camera. If open, the camera closes."
	input Enable(void) : "Enables the camera. If closed, the camera opens."
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input SetDefaultTargetEntity(string) : "Sets the entity for the camera to track when it has nothing better to track, by name."
	input SetTargetEntity(string) : "Sets the entity for the camera to track now, by name."
	input SetAngry(void) : "Causes the camera to become angry as if it has seen something upsetting."
	input SetIdle(void) : "Causes the camera to calm down if it is angry."
	
	output OnFoundPlayer(string) : "Fired when the player is spotted within the inner radius"
	output OnFoundEnemy(void) : "Fired when a non-player enemy is spotted within the inner radius."
]


@PointClass base(BaseNPC, Parentname, AlyxInteractable) studio( "models/combine_turrets/ground_turret.mdl" ) = npc_turret_ground : "Combine ground turret"
[
	input Enable(void) : "Turn turret on."
	input Disable(void) : "Turn turret off."

	output OnAreaClear(void) : "Fires when the turret can't find any more enemies (7 second delay)"
]

@PointClass base(Targetname, Angles, Studiomodel) studio( "models/combine_turrets/ceiling_turret.mdl" ) = npc_turret_ceiling : "Combine Ceiling Turret"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 1
		64 : "Start Inactive" : 0
		128 : "Never Retire" : 0
		256 : "Out of Ammo" : 0
	]

	minhealthdmg(integer) : "Min req'd damage for hurting turret" : 0		

	// Inputs
	input Enable(void) : "If closed, open."
	input Disable(void) : "If open, close."
	input Toggle(void) : "Toggle - If open, close. If closed, open."

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
]


@PointClass base(Targetname, Angles) studio( "models/combine_turrets/floor_turret.mdl" ) = npc_turret_floor : "Combine Floor Turret"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
		128 : "Fast Retire" : 0
		256 : "Out of Ammo" : 0
		512 : "Citizen modified (Friendly)" : 0
	]

	SkinNumber(integer) : "Skin Number" : 0 : "Which skin to use for this turret. Set to 0 to select randomly."

	// Inputs
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input Enable(void) : "Enable the turret."
	input Disable(void) : "Disable the turret."
	input DepleteAmmo(void) : "Depletes all the ammo from a turret, causing it to dry-fire."
	input RestoreAmmo(void) : "Restores ammo to a turret, allowing it to fire live rounds again."
	input SelfDestruct(void) : "Causes the turret to warn and then explode."

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
	output OnPhysGunPickup(void) : "Picked up with physgun"
	output OnPhysGunDrop(void) : "Released by physgun"
]

@NPCClass base(VehicleDriverNPC) studio("models/roller.mdl") = npc_vehicledriver : 
	"NPC used to drive a target vehicle."
[
	drivermaxspeed(float) : "Maxspeed (percentage of vehicle's maxspeed)." : 1
	driverminspeed(float) : "MinSpeed (percentage of vehicle's maxspeed)." : 0

	input SetDriversMaxSpeed(float) : "Set the Maxspeed (percentage of vehicle's maxspeed)."
	input SetDriversMinSpeed(float) : "Set the Minspeed (percentage of vehicle's maxspeed)."
	input StartForward(void) : "Tell the driver to start driving."
	input Stop(void) : "Tell the driver to stop driving."
]

@NPCClass base(VehicleDriverNPC) studio("models/roller.mdl") = npc_cranedriver : 
	"NPC used to drive cranes."
[
	releasepause(float) : "Pause time before dropping a ForceDrop specified object." : 0

	// Inputs
	input ForcePickup(string) : "Force the driver to pickup the specified entity (by targetname)"
	input ForceDrop(string) : "Force the driver to drop the currently held object at the specified entity's location."

	// Outputs
	output OnPickedUpObject(void)  : "Fired when the ForcePickup specified object has been picked up."
	output OnDroppedObject(void)  : "Fired when the ForceDrop specified object has been dropped."
	output OnPausingBeforeDrop(void): "Fired at the start of the pause before dropping the ForceDrop specified object."
]

@NPCClass base(VehicleDriverNPC) studio("models/roller.mdl") = npc_apcdriver : 
	"NPC used to drive an APC vehicle."
[
	spawnflags(Flags) = 
	[
		65536 :  "No Rocket Attacks" : 0
		131072 : "No Gun Attacks" : 0
	]

	drivermaxspeed(float) : "Maxspeed (percentage of vehicle's maxspeed)." : 1
	driverminspeed(float) : "MinSpeed (percentage of vehicle's maxspeed)." : 0

	input SetDriversMaxSpeed(float) : "Set the Maxspeed (percentage of vehicle's maxspeed)."
	input SetDriversMinSpeed(float) : "Set the Minspeed (percentage of vehicle's maxspeed)."
	input StartForward(void) : "Tell the driver to start driving."
	input Stop(void) : "Tell the driver to stop driving."

	input DisableFiring(float) : "Disables firing from happening"
	input EnableFiring(float) : "Enables firing to start. Firing is enabled by default"
]


@NPCClass base(BaseNPC,AlyxInteractable) studio("models/roller.mdl") = npc_rollermine : "Roller Mine"
[
	spawnflags(Flags) = 
	[
		65536 :  "Friendly" : 0
		131072 : "Use prop_physics collision rules"	: 0
	]

	startburied(choices) : "Start Buried" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	uniformsightdist(choices) : "Sight Distance" : 0 = 
	[
		0 : "Ignore distant targets not in a vehicle (default)."
		1 : "Equal visibility for all targets."
	]

	input TurnOn(void) : "Restore this rollermine to normal functionality."
	input TurnOff(void) : "Make this rollermine completely inert. Does not run AI and NPCs will ignore it." 

	output OnPhysGunPickup(void) : "Picked up with physgun"
	output OnPhysGunDrop(void) : "Released by physgun"
]

//@NPCClass base(BaseNPC) studio("models/missile_defense.mdl") = npc_missiledefense : "Missile Defense"
//[
//]

@NPCClass base(BaseNPC) studio("models/missile_defense.mdl") = npc_missiledefense : "A turret who takes down rockets from the player"
[
	spawnflags(flags) = 
	[
		65536  :  "Vulnerable to bullets" : 0
	]

	Health(Integer) : "Health" : 10
	TurretModel(studio) : "Turret Model" : "models/missile_defense.mdl"
	GibModel(studio) : "Gib Model" : "models/gibs/missile_defense_gibs.mdl"
	FireSound(sound) : "Fire Sound" : "npc/turret_floor/shoot1.wav"
	RotateSound(sound) :	"Rotate Sound": "npc/turret_floor/ping.wav"
	ReloadSound(sound) :	"Reload Sound": "vehicles/tank_readyfire1.wav"
	
	StartOn(choices) : "Start On" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Inputs
	input TurnOn(void) : "Turn on: Look for enemies"
	input TurnOff(void) : "Turn off: Stop looking for enemies"
]

@NPCClass base(BaseNPC) studio("models/combine_soldier.mdl") = npc_sniper : "Sniper"
[
	radius(integer) : "Patience Radius" : 0 : "Sniper will hold fire until the target is within this radius. After that, sniper will always attack, even if the target retreats outside of this radius"
	misses(integer) : "Initial Misses" : 0 : "How many times to miss a target on purpose before beginning to fire accurately."
	beambrightness(integer) : "Beam Brightness (0 to 255)" : 100 : "How bright the laser sight beam should be. (0 - 255)"
	shootZombiesInChest(choices) : "Shoot zombies in chest" : 0 : "If true, aim for chest instead of headcrab. Useful when at great distance and height." =
	[
		0 : "No"
		1 : "Yes"
	]	

	shielddistance(float) : "Bullet shield distance" : 64 : "Obsolete"
	shieldradius(float) : "Bullet shield radius" : 48 : "Obsolete"
	
	PaintInterval(float): "Paint interval" : 1 : "Sniper will keep a target painted for this many seconds before shooting. 'Faster Shooting' sniper flag multiplies this by 0.75."
	PaintIntervalVariance(float): "Paint interval variance" : "0.75" : "When shooting at NPCs, a random number between 0 and this is added to PaintInterval for every shot."
	

	// Inputs
	input EnableSniper(void) : "Enable Shooting"
	input DisableSniper(void) : "Disable Shooting"
	input SetDecoyRadius(integer) : "Set Decoy Radius"
	input SweepTarget(string) : "Sweep a Target"
	input SweepTargetHighestPriority(string) : "Drop everything and sweep this target!"
	input SweepGroupRandomly(string) : "Randomly Sweep a Group"
	input StopSweeping(void) : "Stop any target sweeping operation started by entity I/O"
	input ProtectTarget(target_destination) : "Protect the specified enemy. The sniper will attempt to shoot the enemy nearest the protect target at all times."
	input SetPaintInterval(float) : "Set PaintInterval field."
	input SetPaintIntervalVariance(float) : "Set PaintIntervalVariance field."

	output OnShotFired(void) : "Fires when sniper fires a shot"

	spawnflags(Flags) = 
	[
		65536 :  "Hidden" : 0
		131072 : "Laser Viewcone" : 0
		262144 : "No Corpse" : 0
		524288 : "Start Disabled" : 0
		1048576 : "Faster shooting (Episodic)" : 0
		2097152 : "No sweep away from target (Episodic)" : 0
	]
]


@PointClass base(Targetname, Parentname, EnableDisable) iconsprite("editor/info_target.vmt") sphere(radius) = info_radar_target : "Jalopy Radar Beacon"
[
	radius(float) : "Effective Radius" : 6000 : "How close the Jalopy must be to detect this beacon. If this radius is -1, the range is infinite"

	type(choices) : "Type of target" : 0 = 
	[
		0 : "Generic Citizen Beacon"
		1 : "Magnussen RDU Beacon"
		2 : "Dog"
		3 : "Ally Installation"
	]

	mode(choices) : "Mode" : 0 =
	[
		0 : "Default"
		1 : "Sticky - once detected, ignore effective radius."
	]
]


@PointClass base(Targetname, Angles, EnableDisable) iconsprite("editor/info_target.vmt") = info_target_vehicle_transition : "Vehicle Transition Point"
[
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_snipertarget : "Sniper Target"
[
	speed(integer) : "Sweep to speed" : 2
	groupname(string) : "Group Name"
	spawnflags(Flags) =
	[
		1 : "Shoot Me" : 0
		2 : "No Interruptions" : 0
		// 4 : "Snap Shot" : 0 OBSOLETE NOW but don't overwrite, in case some levels need legacy support.
		8 : "Resume if Interrupted" : 0
		16: "Snap to me" : 0
	]
]

@PointClass base(Targetname, Angles) studio() = prop_thumper : "Thumper"
[
	model(studio) : "World model" : "models/props_combine/CombineThumper002.mdl"

	dustscale(choices) : "Dust Scale" : "Small Thumper" =
	[
		128 : "Small Thumper"
		256 : "Large Thumper"
	]

	input Enable(void) : "Enable Thumper"
	input Disable(void) : "Disable Thumper"

	output OnThumped(void) : "Fires when thumper impacts the ground."
	
	EffectRadius(integer) : "Effect Radius" : 1000 : "Radius of the thumper's sound. EPISODIC ONLY."
]

@NPCClass base(BaseNPC) studio("models/antlion.mdl") sphere() = npc_antlion :
	"Antlions will run away from ai_sound, type: Thumper."
[
	startburrowed(choices) : "Start Burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		65536 : "Burrow when eluded" : 0
		131072 : "Use Ground Checks" : 0
		262144 : "Worker Type" : 0
	]

	radius(integer) : "Alert Radius" : 256
	eludedist(integer) : "Distance until eluded" : 1024 : "Only available when Burrow When Eluded is flagged"
	
	ignorebugbait(choices) : "Ignore Bugbait" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	unburroweffects(choices) : "Suppress unburrow effects" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	input Unburrow(void) : "Unburrow from the ground"
	input Burrow(void) : "Burrow into the ground"
	input BurrowAway(void) : "Burrow into the ground and remove the antlion"
	input FightToPosition(string) : "Fight to position"
	input EnableJump(void) : "Allow non-navigational jumping"
	input DisableJump(void) : "Disallow non-navigational jumping"
	input IgnoreBugbait(void) : "Ignore bugbait"
	input HearBugbait(void) : "Hear bugbait"

	output	OnReachedFightGoal(void) : "Fires when the antlion reaches his specified fight-to location"
	output	OnUnBurrowed(void) : "Fires when the antlion unburrows"

]

@NPCClass base(BaseNPC) studio("models/antlion_guard.mdl") = npc_antlionguard : "Antlion Guard"
[
	spawnflags(Flags) =
	[
		65536 : "Create server-side ragdoll on death" : 0
		131072 : "Use inside footsteps" : 0
	]

	startburrowed(choices) : "Start Burrowed" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	allowbark(choices) : "Allow Bark" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	cavernbreed(choices) : "Cavern Guard Model and Texture" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	incavern(choices) : "Use inside-Cavern Behavior" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	shovetargets(string) : "Shove Targets" : ""

	// Inputs
	input Unburrow(void) : "Unburrow from the ground"
	input SetShoveTarget(string) : "Sets a shove target to attack"
	input SetChargeTarget(string) : "Sets a charge target to attack.  Parameters are the name of the entity to start at and the name of the entity to charge towards, separated by a space (i.e. start target)"
	input ClearChargeTarget(void) : "Clear the charge target"
	input SetCoverFromAttack(integer) : "Sets whether or not the creature will protect itself from attacks"
	input Ragdoll(void) : "Causes the antlion guard to die, regardless of health"
	input EnableBark(void) : "Allow the antlion guard to try and summon antlions"
	input DisableBark(void) : "Stop the antlion guard from trying to summon antlions"
	input InvestigateHint(string) : "Sniff around at a hint group until told otherwise"
	input StopInvestigating(void) : "Stop trying to sniff out the player"

	input EnablePreferPhysicsAttack(void) : "Prefer to use physics attacks if at all possible, even when inside a cavern."
	input DisablePreferPhysicsAttack(void) : "Do not prefer to use physics attacks if at all possible, even when inside a cavern."

		
	// Outputs
	output OnSeeHiddenPlayer(void) : "Fires when the current enemy is seen while trying to hide"
	output OnSmellHiddenPlayer(void) : "Fires when the current enemy is smelled while trying to hide"
	output OnSummon(void) : "Antlion guard is attempting to summon antlions"
]


@NPCClass base(BaseNPC) studio("models/crow.mdl") = npc_crow : "Crow"
[
	input FlyAway( string ) : "Forces the crow to fly to the nearest crow flyto hint node."

	deaf(choices) : "Deaf?" : 0 =
	[
		0 : "No."
		1 : "Yes. Ignore sounds."
	]
]

@NPCClass base(BaseNPC) studio("models/seagull.mdl") = npc_seagull : "Seagull"
[
	input FlyAway( string ) : "Forces the seagull to fly to the nearest crow flyto hint node."

	deaf(choices) : "Deaf?" : 0 =
	[
		0 : "No."
		1 : "Yes. Ignore sounds."
	]
]

@NPCClass base(BaseNPC) studio("models/pigeon.mdl") = npc_pigeon : "Pigeon"
[
	input FlyAway( string ) : "Forces the pigeon to fly to the nearest crow flyto hint node."

	deaf(choices) : "Deaf?" : 0 =
	[
		0 : "No."
		1 : "Yes. Ignore sounds."
	]
]

@NPCClass base(BaseNPC) studio("models/ichthyosaur.mdl") = npc_ichthyosaur : "Ichthyosaur. Not fully functional"
[
]

@NPCClass base(BaseHeadcrab, Parentname) studio("models/Headcrabclassic.mdl") = npc_headcrab : "Headcrab"
[
]
@NPCClass base(BaseHeadcrab) studio("models/Headcrab.mdl") = npc_headcrab_fast : "Fast Headcrab"
[
]
@NPCClass base(BaseHeadcrab) studio("models/Headcrabblack.mdl") = npc_headcrab_black : "Black Headcrab"
[
]

@NPCClass base(BaseNPC) studio("models/Stalker.mdl") = npc_stalker : "Stalker"
[
	BeamPower(choices) : "Beam Power" : "Low" =
	[
		0 : "Low"		 
		1 : "Medium"		 
		2 : "High"		 
	]
]


@NPCClass base(Parentname, BaseNPC) iconsprite("editor/bullseye.vmt") color(255 0 0) = npc_bullseye : "Bullseye"
[
	// Unlike other NPCs level designers are allowed to set the health on bullseyes
	health(Integer) : "Health" : 35

	minangle(string) : "Minimum Angle" : "360" : "Angle from the bullseye required for bullseye to be a valid enemy"
	mindist(string) : "Minimum Distance" : "0" : "Distance from the bullseye required for bullseye to be a valid enemy"

	autoaimradius(float) : "Autoaim Radius" : "0" : "Radius of autoaim influence. Use ent_autoaim <picker> to visualize."

	spawnflags(Flags) = 
	[
		65536   : "Not Solid" : 0
		131072  : "Take No Damage" : 0
		262144  : "Enemy Damage Only" : 0
		524288  : "Bleed" : 0
		1048576 : "Perfect Accuracy" : 0
		2097152 : "Collide against physics objects (Creates VPhysics Shadow)" : 0
	]
	output OnTargeted(void) : "Fires when targeted"
	output OnReleased(void) : "Fires when no longer targeted"
]


@NPCClass base(Parentname, BaseNPC) iconsprite("editor/npc_enemyfinder.vmt") color(255 150 0) = npc_enemyfinder :
	"This NPC is invisible, immobile, and does not cause collisions."+
	"Its sole purpose is to notify the squad mates whenever an enemy comes into the its view."
[
	spawnflags(flags) =
	[
		65536 : "Check Visibility" : 1
		131072 : "APC Visibility checks" : 0
		262144 : "Short memory" : 0
		524288  : "Can be an enemy" : 0
	]
	FieldOfView(string) : "FieldOfView" : "0.2" : "How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)"
	MinSearchDist(integer) : "Min Search Dist" : 0
	MaxSearchDist(integer) : "Max Search Dist" : 2048

	freepass_timetotrigger(float) : "Player pass issue time" : 0 : "Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted"
	freepass_duration(float) : "Player pass duration" : 0 : "After granted 'free pass', the amount of time a target is allowed before reaquire"
	freepass_movetolerance(float) : "Player pass move tolerance" : 120 : "After granted 'free pass', the distance the target is allowed to move before reaquire"
	freepass_refillrate(float) : "Player pass refill rate" : "0.5" : "After free pass begins expiring, how much the time the target gets back for every second they hide again"
	freepass_peektime(float) : "Player pass peek time" : 0 : "How long targets in cover are allowed to peek without penalty"

	StartOn(choices) : "Start On" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input TurnOn(void) : "Turn on: Look for enemies"
	input TurnOff(void) : "Turn off: Stop looking for enemies"

	output OnLostEnemies(void) : "Fires when the enemy finder has no enemies."
	output OnAcquireEnemies(void) : "Fires when the enemy finder acquires enemies."
]

@NPCClass base(Parentname, BaseNPC) size(-16 -16 -16, 16 16 16) color(255 150 0) = npc_enemyfinder_combinecannon : "EnemyFinder Specifically for use with func_tank_combine_cannon"
[
	spawnflags(flags) =
	[
		65536 : "Check Visibility" : 1
		131072 : "APC Visibility checks" : 0
		262144 : "Short memory" : 0
		524288  : "Can be an enemy" : 0
	]
	FieldOfView(string) : "FieldOfView" : "0.2" : "How far to look (1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions)"
	MinSearchDist(integer) : "Min Search Dist" : 0
	MaxSearchDist(integer) : "Max Search Dist" : 2048

	SnapToEnt(target_destination) : "Name of entity to snap to" : "" : "Since it can be hard to position these entities with respect to the func_tank brushwork, you can specify an entity name here and this enemyfinder will position itself at the center of that entity."

	freepass_timetotrigger(float) : "Player pass issue time" : 0 : "Amount of time an enemy is hidden after which a 'free pass' on reaquire is granted"
	freepass_duration(float) : "Player pass duration" : 0 : "After granted 'free pass', the amount of time a target is allowed before reaquire"
	freepass_movetolerance(float) : "Player pass move tolerance" : 120 : "After granted 'free pass', the distance the target is allowed to move before reaquire"
	freepass_refillrate(float) : "Player pass refill rate" : "0.5" : "After free pass begins expiring, how much the time the target gets back for every second they hide again"
	freepass_peektime(float) : "Player pass peek time" : 0 : "How long targets in cover are allowed to peek without penalty"

	StartOn(choices) : "Start On" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input TurnOn(void) : "Turn on: Look for enemies"
	input TurnOff(void) : "Turn off: Stop looking for enemies"
	input SetWideFOVForSeconds(float) : "Gives this enemyfinder a 180 degree viewcone for the number of seconds specified in the parameter override"

	output OnLostEnemies(void) : "Fires when the enemy finder has no enemies."
	output OnAcquireEnemies(void) : "Fires when the enemy finder acquires enemies."
]



@NPCClass base(BaseNPC,Parentname, TalkNPC, PlayerCompanion ) studio() = npc_citizen : "Citizen"
[

	spawnflags(Flags) =
	[
		65536 : "Follow player on spawn" : 0
		131072 : "Medic" : 0
		262144 : "Random Head" : 1
		524288 : "Ammo Resupplier" : 0
		1048576 : "Not Commandable" : 0
		2097152 : "Don't use Speech Semaphore - OBSOLETE" : 0
		4194304 : "Random male head" : 0
		8388608 : "Random female head" : 0
		16777216 : "Use RenderBox in ActBusies" : 0
	]

	additionalequipment(choices) : "Weapons" : "0" =
	[
		"weapon_smg1" : "SMG1"
		"weapon_ar2" : "AR2"
		"weapon_stunstick" : "Stun Stick"
		"weapon_crowbar" : "Crow Bar"
		"weapon_shotgun" : "Shotgun"
		"weapon_beerbottle" : "Beer Bottle"
		"weapon_beerbottle2" : "Beer Bottle2"
		"weapon_rpg" : "RPG"
		"0"  : "Nothing"
	]

	ammosupply(choices) : "Ammo to Resupply (if spawnflag set)" : "SMG1" =
	[
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"SMG1_Grenade" : "SMG1 Grenade"
		"AR2" : "AR2"
		"Buckshot" : "Shotgun"
		"RPG_Round" : "RPG"
		"Grenade" : "Grenade"
		"XBowBolt" : "Crossbow Bolt"
	]
	ammoamount(integer) : "Amount of ammo to give" : 1

	citizentype(choices) : "Type" : "Default" =
	[
		0 : "Default"	 
		1 : "Downtrodden"
		2 : "Refugee"
		3 : "Rebel"
		4 : "Unique"
	]

	expressiontype(choices) : "Expression Type" : "Random" =
	[
		0 : "Random"
		1 : "Scared"
		2 : "Normal"
		3 : "Angry"
	]

	//!!!BUGBUG - don't ship with these names
	//!!!FIXME - don't ship with these names
	model(choices) : "Model" : "models/humans/group01/male_01.mdl" =
	[
		"models/humans/group01/male_01.mdl" : "Male 1"
		"models/humans/group01/male_02.mdl" : "Male 2"
		"models/humans/group01/male_03.mdl" : "Male 3"
		"models/humans/group01/male_04.mdl" : "Male 4"
		"models/humans/group01/male_05.mdl" : "Male 5"
		"models/humans/group01/male_06.mdl" : "Male 6"
		"models/humans/group01/male_07.mdl" : "Male 7"
		"models/humans/group01/male_08.mdl" : "Male 8"
		"models/humans/group01/male_09.mdl" : "Male 9"
		"models/humans/group01/female_01.mdl" : "Female 1"
		"models/humans/group01/female_02.mdl" : "Female 2"
		"models/humans/group01/female_03.mdl" : "Female 3"
		"models/humans/group01/female_04.mdl" : "Female 4"
		"models/humans/group01/female_06.mdl" : "Female 5"
		"models/humans/group01/female_07.mdl" : "Female 6"
		"models/humans/male_cheaple.mdl" : "Cheaple Male 1"
		"models/odessa.mdl" : "Odessa. DO NOT USE."
	]

	ExpressionOverride(string) : "Facial expression override"

	notifynavfailblocked(choices) : "Fire output when Nav is blocked?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	neverleaveplayersquad(choices) : "Permanent squad member?" : 0 : "A permanent squad member cannot leave the player's squad unless killed or explicity removed by entity I/O. Only use this if you're sure you want to override the default AI." =
	[
		0 : "No. This is default behavior."
		1 : "Yes, stay in squad until death."
	]

	denycommandconcept(string) : "Deny command speech concept" : "" : "If you want your citizens to squad with the player but not obey commands the player gives to move the squad, put a concept here and this citizen will speak the concept instead of obeying the order."

    //Inputs
	input RemoveFromPlayerSquad(void) : "Remove from player squad, instantly."
	input SetExpressionOverride(string) : "Set facial expression override"

	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input SetCommandable(void) : "Make a previously uncommandable citizen commandable"
	input SetMedicOn(void) : "Set the medic flag on. Will not change the model or skin of the citizen."
	input SetMedicOff(void) : "Set the medic flag off. Will not change the model or skin of the citizen."
	input SetAmmoResupplierOn(void) : "Set the ammo-resupplier flag on. Will not change the model or skin of the citizen."
	input SetAmmoResupplierOff(void) : "Set the ammo-resupplier flag off. Will not change the model or skin of the citizen."

	// Outputs
	output OnJoinedPlayerSquad(void) : "Fires when joins player squad"
	output OnLeftPlayerSquad(void) : "Fires when leaves player squad"
	output OnFollowOrder(void) : "Fires when ordered to follow player"
	output OnStationOrder(void) : "Fires when ordered to a location by player"
	output OnPlayerUse(void) : "Fires when a player +USEs the citizen"
	output OnNavFailBlocked(void) : "Fires when this Citizen's movement fails because he/she is blocked."
]

@NPCClass base(BaseNPC) studio("models/Barney.mdl") = npc_fisherman : "Fisherman"
[
	ExpressionOverride(string) : "Facial expression override"
	input SetExpressionOverride(string) : "Set facial expression override"
]

@NPCClass base(TalkNPC, BaseNPC, PlayerCompanion) studio("models/Barney.mdl") = npc_barney : "Barney"
[
	additionalequipment(choices) : "Weapons" : "weapon_pistol" =
	[
		"weapon_pistol" : "Pistol"
		"weapon_smg1" : "SMG1"
		"weapon_stunstick" : "Stun Stick"
		"weapon_shotgun" : "Shotgun"
		"weapon_ar2" : "AR2"
		"0" : "Nothing"
	]

	ExpressionOverride(string) : "Facial expression override"
	input SetExpressionOverride(string) : "Set facial expression override"

	// Outputs
	output OnPlayerUse(void) : "Fires when a player +USEs Barney"
]

@NPCClass base(BaseCombine) studio("models/Combine_Soldier.mdl") = npc_combine_s : "Combine Soldier"
[
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	model(choices) : "Model" : "models/combine_soldier.mdl" : "Regular Soldier" = 
	[
		"models/combine_soldier.mdl" : "Regular Soldier"
		"models/combine_soldier_prisonguard.mdl" : "Nova Prospekt Soldier"
		"models/combine_super_soldier.mdl" : "Elite Soldier"
	]

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Pressure the enemy (Keep advancing)"
		"2" : "Pressure until within 30ft, then normal"
	]
	
	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. WARNING: this animation only has a north component. For use under very special circumstances only." =
	[
		"0" : "No"
		"2" : "Yes"
	]
]


@PointClass base(Parentname, BaseNPC) studio("models/junk/w_traffcone.mdl") = npc_launcher : "Launcher"
[

	spawnflags(Flags) = 
	[
		65536  :  "Check LOS" : 1
	]

	StartOn(choices) : "Start On" : 0 = 
	[
		0: "Off"
		1: "On"
	] 
	MissileModel(studio) : "Missile Model" : "models/Weapons/wscanner_grenade.mdl"
	LaunchSound(sound) : "Launch Sound" : "npc/waste_scanner/grenade_fire.wav"
	FlySound(sound) :	"Fly Sound": "ambient/objects/machine2.wav"

	SmokeTrail(choices) : "Smoke Trail" : 1 = 
	[
		0: "Off"
		1: "On"
		2: "On Homing"
	] 
	LaunchSmoke(choices) : "Launch Smoke" : 1 = 
	[
		0: "Off"
		1: "On"
	] 
	LaunchDelay(integer) : "Launch Delay" : 8	    : "When ON, how long to wait between each launch"
	LaunchSpeed(string) : "Launch Speed" : 200   : "Initial launch speed of missile (in up direction)"
	PathCornerName(target_destination) : "Path Corner Name" : "" : "Name of a path corner.  If set launches a pathfollowing missing, rather than a homing missile"
	HomingSpeed(string) : "Homing Speed" : 0	    : "Speed to reach when homing"
	HomingStrength(integer) : "Homing Strength" : 10    : "How strong in homing effect (0-100)"
	HomingDelay(string) : "Homing Delay" : 0 : "Number of seconds to delay before homing starts"
	HomingRampUp(string) : "Homing Ramp Up" : "0.5" : "Number of seconds it takes to reach full homing strength after homing delay"
	HomingDuration(string) : "Homing Duration" : 5     : "Number of seconds the homing effect lasts"
	HomingRampDown(string) : "Homing Ramp Down" : "1.0" : "Number of seconds it takes homing effect to decay after homing duration"
	Gravity(string) : "Gravity" : "1.0" : "Scale for effect of gravity. (1.0 = normal gravity)"
	MinRange(integer) : "Min Range" : 100   : "Minimun distance a target can be to be attacked"
	MaxRange(integer) : "Max Range" : 2048  : "Maximum distance a target can be to be attacked"
	SpinMagnitude(string) : "Spin Magnitude" : 0	    : "Strength of spin in missile trajectory"
	SpinSpeed(string) : "Spin Speed" : 0     : "How fast does the spin rotate through 360"
	Damage(string) : "Damage" : 50    : "How much damage does each missile do"
	DamageRadius(string) : "DamageRadius" : 200   : "How far away from impact does the missle do damage"

	// Outputs
	output OnLaunch(void) : "Fires when missile is launched"

	// Inputs
	input TurnOn(void) : "Turn on Launcher"
	input TurnOff(void) : "Turn off Launcher"
	input LOSCheckOn(void) : "Start checking line of sight before firing"
	input LOSCheckOff(void) : "Stop checking line of sight before firing"
	input SetEnemyEntity(string) : "Set entity I should attack. Ignores visibility. (output from other entity only)"
	input ClearEnemyEntity(void) : "Clear set enemy enemy"
	input FireOnce(void) : "Fire Once (if have enemy)"
]


@NPCClass base(BaseNPC) studio("models/hunter.mdl") = npc_hunter :
	"A smaller, faster, strider that can pursue the player into buildings."
[
	FollowTarget(target_destination) : "Strider to Follow" : "" : "The name of the strider that this hunter should follow."
	
    // Inputs
    input FollowStrider(target_destination) : "Sets the name of the strider that this hunter should follow."
    
	input SetMinigunTime(float) : "Time to shoot at any set minigun target."
	input SetMinigunTarget(string) : "Hunter will shoot minigun at the named target."

	input DisableShooting(void) : "Forces the hunter to be melee-only."
	input EnableShooting(void) : "Allows the hunter to use range attacks or melee attacks."

	input DisableSquadShootDelay(void) : "Disables the delay between range attacks for squads of hunters, allowing them to shoot as frequently as they wish."
	input EnableSquadShootDelay(void) : "Enables the delay between range attacks for squads of hunters."
	
	input EnableUnplantedShooting(void) : "Used mainly for scripted attacks against bullseyes. Enables the hunter to shoot without having to plant first."
	input DisableUnplantedShooting(void) : "Returns the hunter to normal after a call to EnableUnplantedShooting."

	input DoPhysicsBlast(void) : "Hunter will instantly do the defensive physics blast."

	input Crouch(void) : "Crouch down."
	input Stand(void) : "Stand up from crouch."
	input DisableCrouchWalk(void) : "UNUSED: Prevents the hunter from crouch walking."
	input EnableCrouchWalk(void) : "UNUSED: Allows the hunter to crouch walk."

	input UseSiegeTargets(string) : "Pass in the name of info_targets to shoot at when I can't shoot at the player."
]


@PointClass base(npc_template_maker) iconsprite("editor/npc_maker.vmt") = npc_hunter_maker : 
	"An entity that creates hunters. The NPCs it creates are clones of a template NPC."
[
]


@NPCClass base(BaseNPC) studio() = npc_advisor :
	"An adorable sluglike alien with benevolent psychic powers."
[
	model(studio) : "World model" : "models/advisor.mdl"
	
	levitationarea(string) : "Levitation Area" : "" : "Trigger volume inside which levitated objects reside"
	
	levitategoal_bottom(target_destination) : "Levitation Goal Bottom" : "" : "Objects will levitate at least this high"
	levitategoal_top(target_destination)    : "Levitation Goal Top" : "" : "Objects will levitate at least this high"
	
	staging_ent_names(string) : "Staging Position Names"  : "" : "All entities with this name will be considered staging positions for the throw behavior."
	priority_grab_name(string) : "Priority Name For Grabbing" : "" : "If any entities named this are present, the advisor will preferentially pick them up for throwing at the player."
	


	output OnPickingThrowable(void) : "Fires just before I pick something to hurl"
	output OnThrowWarn(void)        : "Fires when I trigger the warning green glow before tossing"
	output OnThrow(void)            : "Fires just after I throw something"
	output OnHealthIsNow(integer)       : "When I am damaged, my hitpoints thereafter"
	
	input SetThrowRate(float) : "Advisor will throw an object once per this many seconds (plus a little more)"
	input WrenchImmediate(string) : "Advisor will immediately start levitating all objects with this name"
	input SetStagingNum(integer): "Advisor will stage this many objects at once, then barrage the player."
	input PinPlayer(string) : "Advisor will wrench the player to this point in the air. Use a null param to let go."
	input BeamOn(string) : "Start a psychic-TK effect beam from the advisor to the specified object. You must remember to turn it off later."
	input BeamOff(string) : "Turn off a psychic-TK effect beam from the advisor to the specified object."
	
	input ELightOn(void) : "Turn on an entity light at my location. Please remember to turn this off."
	input ELightOff(void) : "Turn off my entity light."
	
	input DoNothing(void) : ""
]


@PointClass base(Targetname, Parentname, EnableDisable) = env_sporeexplosion : "Bugbait Spore Effect"
[
	spawnrate(float) : "Spawn Rate (as percentage)" : "25" : "How dense the spore effect is"
]

@PointClass base(Targetname, Parentname, Targetname, EnableDisable) = env_gunfire : "Gunfire Effect"
[
	target(target_destination) : "Target" : "" : "Shoot at this target. REMEMBER - this is an effect only! It does not do damage!"

	minburstsize(integer) : "Min Burst Size" : 2 : "Minimum number of rounds in a burst."
	maxburstsize(integer) : "Max Burst Size" : 7 : "Maximum number of rounds in a burst."

	minburstdelay(float) : "Min Delay Between Bursts" : 2 : "Minimum delay between bursts. (seconds)"
	maxburstdelay(float) : "Max Delay Between Bursts" : 5 : "Maximum delay between bursts. (seconds)"

	rateoffire(float) : "Rate of fire" : 10 : "Expressed as rounds per second"

	spread(choices) : "Bullet spread" : 5 : "The 'cone of inaccuracy' of the shots fired by this entity." =
	[
		1 : "1 Degree"
		5 : "5 Degrees"
		10 : "10 Degrees"
		15 : "15 Degrees"
	]

	bias(choices) : "Bullet distribution should be..." : 1 : "How to distribute bullets within the spread. Even distribution is a true scatter throughout the spread. Biased towards the outside makes the shots 'miss' the target by tending towards the outside of the spread." =
	[
		1 : "Evenly distributed"
		-1 : "Biased towards the outside"
	]

	collisions(choices) : "Collision detection" : 0 : "Whether/how to handle bullet collision detection. NOTE: If you select NONE, this entity will be very cheap to use, but all bullets will stop short at their target's position in space and there will be no impact effects. Normal collision detection does the same things NPCs do when they fire their guns (except harm anything)." =
	[
		0 : "None. Cheap for performance."
		1 : "Normal collision detection."
	]

	shootsound(choices) : "Shoot Sound" : "Weapon_AR2.NPC_Single" : "Gunfire sound to make" = 
	[
		"Weapon_AR2.NPC_Single" : "AR2"
		"Weapon_SMG1.NPC_Single" : "SMG1"
	]

	tracertype(choices) : "Tracer" : "AR2TRACER" : "Type of tracer to display" = 
	[
		"Tracer" : "Default"
		"AR2TRACER" : "AR2"
	]
]

@PointClass base(Parentname,Angles,Targetname) sphere(DamageRadius) studio("models/props_combine/headcrabcannister01b.mdl") = env_headcrabcanister : "Headcrab canister"
[
	spawnflags(Flags) = 
	[
		1 :  "No Impact Sound" : 0
		2 :  "No Launch Sound" : 0
		4096 : "Start Impacted" : 0
		8192 : "Land at initial position" : 0
		16384 : "Wait for input to open" : 0
		32768 : "Wait for input to spawn headcrabs" : 0
		65536 : "No smoke" : 0
		131072 : "No shake" : 0
		262144 : "Remove on impact" : 0
		524288 : "No impact effects" : 0
	]
	HeadcrabType(choices) : "Which headcrab to spawn?" : 0 =
	[
		0 : "Normal headcrabs"
		1 : "Fast Headcrabs"
		2 : "Poison Headcrabs"
	]
	HeadcrabCount(integer) : "Headcrab count" : 6 : "Number of headcrabs to spawn on impact"
	FlightSpeed(float) : "Flight Speed" : 3000  : "Speed to fly through the air"
	FlightTime(float) : "Flight Time" : 5	    : "Time to fly through the air in seconds"
	StartingHeight(float) : "Starting Height" : 0 : "Relative height from the landing position at which the canister should be launched. Positive values mean launch it above the impact point, negative values mean launch it below."
	MinSkyboxRefireTime(float) : "Min Refire Time" : 0 : "Min number of seconds before the cannister is refired. This will only work for cannisters placed in the skybox."
	MaxSkyboxRefireTime(float) : "Max Refire Time" : 0 : "Max number of seconds before the cannister is refired. This will only work for cannisters placed in the skybox."
	SkyboxCannisterCount(integer) : "Cannister count" : 1 : "Number of cannisters to fire in the skybox (0 means fire continuously, forever)."
	Damage(float) : "Impact damage" : 150 : "Max damage the canister applies on impact"
	DamageRadius(float) : "Impact damage radius": 750 : "Max radius of the impact damage for the canister"
	SmokeLifetime(float) : "Smoke Duration" : 30 : "Duration that the canister smokes.  -1 means always smoke."
	LaunchPositionName(target_destination) : "Launch Position Name" : "" : "If the canister should launch to it's origin from another point within the world, this should specify an info_target at the launch origin."

	// Inputs
	input FireCanister(void) : "Fire the canister"
	input OpenCanister(void) : "Opens the canister (must be called after the OnImpacted output is fired)"
	input SpawnHeadcrabs(void) : "Spawns headcrabs (must be called after the OnImpacted output is fired and after OpenCanister is triggered, if the Wait for Input to open spawnflag is checked.)"
	input StopSmoke(void) : "Stops the smoke if it's on"

	// Outputs
	output OnLaunched(string) : "Fired when the canister is launched"
	output OnImpacted(void) : "Fires when canister hits the ground"
	output OnOpened(void) : "Fires when canister has finished opening"
]

@NPCClass base(BaseNPC, TalkNPC, PlayerCompanion) studio() = npc_vortigaunt : "Vortigaunt"
[
	model(studio) : "World model" : "models/vortigaunt.mdl"

	ArmorRechargeEnabled(choices) : "Allow Armor Recharging" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	HealthRegenerateEnabled(choices) : "Regenerate Health" : 0 : "Whether or not the vortigaunt will recover his own health over time like vital allies, while in combat" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input EnableArmorRecharge(void) : "Allow armor recharging on players"
	input DisableArmorRecharge(void) : "Do not allow armor recharging on players"
	input ExtractBugbait(string) : "Causes the vortigaunt to extract bugbait from the named target passed in."
	input ChargeTarget(string) : "Force the vortigaunt to charge the named target."
	input EnableHealthRegeneration(void) : "Allow the vortigaunt to start regenerating his health over time, like vital allies."
	input DisableHealthRegeneration(void) : "Stop the vortigaunt from regenerating his health. (Default behavior)"
	input TurnBlue(bool) : "If true, turn blue. If false, turn green. (Episodic)."
	input TurnBlack(bool) : "If true, turn black. If false, be seen. (Episodic)."
	input BeginCarryNPC(void) : "Begin to override our animations for 'carrying' an NPC. (Episodic)"
	input EndCarryNPC(void) : "Stop overriding our animations for 'carrying' an NPC. (Episodic)"

	// Outputs
	output OnFinishedExtractingBugbait(void) : "Fires when the vortigaunt's finished extracting bugbait from a target."
	output OnFinishedExtractingTauCannon(void) : "Fires when the vortigaunt's finished extracting the tau cannon from the jeep."
	output OnFinishedChargingTarget(void) : "Fires when the vortigaunt has finished charging a target."
	output OnPlayerUse(void) : "Fires when a player +USEs the vortigaunt."
]

@NPCClass base(BaseNPC) = npc_spotlight : "Spotlight"
[
	spawnflags(Flags) = 
	[
		65536  :  "Start Track On" : 1
		131072 :  "Start Light On" : 1
		262144 :  "No Dynamic Light" : 0
		524288 :  "Never Move" : 0
	]

	health(Integer) : "Health" : 100
	YawRange(integer) : "YawRange" : 90
	PitchMin(integer) : "PitchMin" : 35
	PitchMax(integer) : "PitchMax" : 50
	IdleSpeed(integer) : "IdleSpeed" : 2
	AlertSpeed(integer) : "AlertSpeed" : 5
	spotlightlength(integer) : "SpotlightLength" : 500
	spotlightwidth(integer) : "SpotlightWidth" : 50
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	
	// Inputs
	input LightOn(void) : "LightOn"
	input LightOff(void) : "LightOff"
	input TrackOn(void) : "TrackOn"
	input TrackOff(void) : "TrackOff"

	// Outputs
	output OnAlert(void) : "Fires when the spotlight alerted by sound"
	output DetectedEnemy(string) : "Outputs enemy entity when spotlight finds and starts tracking enemy"
	output LostEnemy(string) : "Outputs enemy entity when spotlight loses enemy that it's tracking, if enemy still exists"
	output SquadDetectedEnemy(string) : "Outputs enemy entity when squad finds and starts tracking enemy"
	output SquadLostEnemy(string) : "Outputs enemy entity when squad loses enemy that it's tracking, if entity still exists"
	output LightPosition(string) : "Position of the end of the spotlight beam"
]

@NPCClass base(BaseNPC) studio() = npc_strider : "Strider"
[
	model(choices) : "Model" : "models/combine_strider.mdl" : "Standard strider" = 
	[
		"models/combine_strider.mdl" : "Standard strider"
		"models/combine_strider_vsdog.mdl" : "The Strider that fights Dog"
	]

	spawnflags(Flags) = 
	[
		65536 :  "Can Stomp Player" : 0		
		131072 :  "Minimal damage taken from NPCs (1 point per missile)" : 0
	]

	//Inputs
	input SetMinigunTime(float) : "Time to shoot at any set minigun target"
	input SetMinigunTarget(string) : "Strider will shoot minigun at this"
	input DisableMinigun(void) : "Disables the minigun until further notice by the EnableMinigun input."
	input EnableMinigun(void) : "Enables the minigun if it was disabled by the DisableMinigun input."
	input SetCannonTarget(string) : "Strider will shoot cannon at this"
	input FlickRagdoll(void) : "Strider will flick anyone he's skewered"

	input StartPatrol(void) : "Start patrolling back and forth along the current track."
	input StopPatrol(void) : "Stop patrolling back and forth along the track. This will cause the helicopter to come to rest at the track which he's currently flying toward."
	input ChooseFarthestPathPoint(void) : "When tracking an enemy, choose the point on the path furthest from the enemy, but still in firing range"
	input ChooseNearestPathPoint(void) : "When tracking an enemy, choose the point on the path nearest from the enemy"
	input Crouch(void) : "Crouch down"
	input CrouchInstantly(void) : "Crouch instantly. This makes the Strider pop to a crouch. Do not do this where players can observe."
	input Stand(void) : "Stand up from crouch"
	input DisableCrouchWalk(void)
	input EnableCrouchWalk(void)
	
	input SetTargetPath(string) : "Set a path for the strider to patrol. The strider will first move to the closest point on the path"
	input ClearTargetPath(void) : "Clear the strider patrol path"

	input EnableAggressiveBehavior(void) : "Use aggressive behavior. Fire faster, more frequently"
	input DisableAggressiveBehavior(void) : "Stop using aggressive behavior. (Revert to normal)"

	input StopShootingMinigunForSeconds(float) : "Stop shooting the minigun for a period of time (specify seconds as parameter)"

	input DisableCrouch(void) : "Prevent the Strider from crouching"
	input DisableMoveToLOS(void) : "Prevent the Strider from seeking Line of Sight to target. (Hold position)"
	
	input DisableCollisionWith(string) : "Disable collision with a given object."
	input EnableCollisionWith(string) : "Reenable collision with a given object."
	
	input ScaleGroundSpeed(float) : "Scale the movement speed of the strider"

	disablephysics(choices) : "Disable physics (reduce CPU)" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
]

@NPCClass base(BaseNPC, BaseFadeProp) studio("models/Barnacle.mdl") sphere(fademindist) sphere(fademaxdist) = npc_barnacle : "Barnacle"
[
	spawnflags(Flags) =
	[
		65536 : "Cheap death" : 0
		131072 :  "Ambush Mode"		: 0
	]

	RestDist(float) : "Rest Distance" : 16 : "Distance above the ground that the tongue should lie when the barnacle is at rest"

	input DropTongue(void) : "Drop tongue"
	input SetDropTongueSpeed(integer) : "Set Drop Tongue speed"
	
	input LetGo(void) : "Let go of anything I am holding."
	
	output OnGrab(string)    : "When I attach my tongue to something"
	output OnRelease(string) : "When I let go of something"
]

@NPCClass base(BaseHelicopter) studio("models/gunship.mdl" ) = npc_combinegunship : "Combine Gunship"
[

	// Inputs
	input OmniscientOn(void) : "Gunship knows target's location even when target is out of sight or behind cover"
	input OmniscientOff(void) : "Gunship relies on normal sight functions to locate target"
	input BlindfireOn(void ) : "Gunship will fire at an unseen target, attempting to punch through to them"
	input BlindfireOff(void ) : "Gunship only fires at viusible target"
	input SetPenetrationDepth( float ) : "Set penetration depth of bullets"

	input SetDockingBBox( void ) : "Shrink Bounding Box"
	input SetNormalBBox( void ) : "Set Bounding Box to normal size"

	input EnableGroundAttack( void ) : "Allow the gunship to use its ground attack"
	input DisableGroundAttack( void ) : "Don't allow the gunship to use its ground attack"
	input DoGroundAttack( string ) : "Causes the gunship to execute its ground attack"

	input BecomeInvulnerable( void ): "Stops the gunship from taking damage, but still makes sounds effects"
	input BecomeVulnerable( void ): "Makes the gunship act normally to damage"

	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"

	// Outputs
	output OnFireCannon(void)  : "Fires when the gunship fires a cannon round"
	output OnFirstDamage( void ) : "Fired when the first damage is done to the gunship."
	output OnSecondDamage( void ) : "Fired when the second damage is done to the gunship."
	output OnThirdDamage( void ) : "Fired when the third damage is done to the gunship."
	output OnFourthDamage( void ) : "Fired when the fourth damage is done to the gunship."

	spawnflags(Flags) =
	[
		4096 : "No ground attack" : 0
	]
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_target_helicopter_crash : "Helicopter Crash Target"
[
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = info_target_gunshipcrash : "Gunship Crash Target"
[
	input Enable(void) : "Enable the crash target."
	input Disable(void) : "Disable the crash target."
]

@NPCClass base(BaseHelicopter) studio("models/combine_dropship.mdl" ) = npc_combinedropship : "Combine Dropship"
[
	spawnflags(Flags) =
	[
		32768 : "Wait for input before dropoff" : 0
	]

	LandTarget(target_destination) : "Land target name"
	GunRange(float) : "Crate Gun Range" : 2048 : "If the dropship's carrying a crate with a gun on it, it'll only shoot targets within this range."

	RollermineTemplate(target_destination) : "Name of Rollermine Template" : "" : "If this dropship drops any rollermines due to the 'DropMines' input being fired, it will use this template for the rollermines it creates. If left blank, ordinary rollermines will be dropped."

	NPCTemplate(target_destination) : "Name of Template NPC 1"
	NPCTemplate2(target_destination) : "Name of Template NPC 2"
	NPCTemplate3(target_destination) : "Name of Template NPC 3"
	NPCTemplate4(target_destination) : "Name of Template NPC 4"
	NPCTemplate5(target_destination) : "Name of Template NPC 5"
	NPCTemplate6(target_destination) : "Name of Template NPC 6"

	Dustoff1(target_destination) : "Name of dustoff point for NPC 1"
	Dustoff2(target_destination) : "Name of dustoff point for NPC 2"
	Dustoff3(target_destination) : "Name of dustoff point for NPC 3"
	Dustoff4(target_destination) : "Name of dustoff point for NPC 4"
	Dustoff5(target_destination) : "Name of dustoff point for NPC 5"
	Dustoff6(target_destination) : "Name of dustoff point for NPC 6"

	APCVehicleName(target_destination) : "Name of the APC to drop"
	Invulnerable(Choices) : "Invulnerable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	CrateType(Choices) : "Crate Type" : 2 =
	[
		-3 : "Jeep (No crate)"
		-2 : "APC (No crate)"
		-1 : "Strider (No crate)"
		0 : "Roller Hopper"
		1 : "Soldier Crate"
		2 : "None"
	]

	// Inputs
	input LandLeaveCrate(integer) : "Land, drop soldiers, and leave the crate behind. Specify the number of troops to drop off in the parameter."
	input LandTakeCrate(integer) : "Land, drop soldiers, but don't leave the crate behind. Specify the number of troops to drop off in the parameter."
	input DropMines(integer) : "Drop Rollermines. Specify the number of mines to drop in the parameter."
	input DropStrider(void) : "Drop the Strider you're carrying. Now."
	input DropAPC(void) : "Drop the APC you're carrying. Now."
	input Hover(target_destination) : "Hover over a named target entity until told to fly to a path."
	input Pickup(string) : "Pickup an entity."
	input SetLandTarget(string) : "Set my land target name."
	input SetGunRange(float) : "Set my crate gun's range."

	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"

	input StopWaitingForDropoff(void) : "Stop waiting for the dropoff. Dropoff as soon as possible."


	// Outputs
	output OnFinishedDropoff(void)  : "Fires when the dropship has finished a dropoff."
	output OnFinishedPickup(void) : "Fires when the dropship has finished a pickup."

	output OnCrateShotDownBeforeDropoff(float) : "Fires when the container was shot down before it dropped off soldiers. The parameter contains the number of soldiers that weren't successfully dropped off."
	output OnCrateShotDownAfterDropoff(void) : "Fires when the container was shot down after it dropped off soldiers."

]

@NPCClass base(BaseHelicopter) studio("models/combine_helicopter.mdl" ) = npc_helicopter : "Helicopter"
[
	spawnflags(Flags) = 
	[
		65536 :  "Loud rotor wash sound" : 0
		131072 : "Electrical drone" : 0
		262144 : "Helicopter lights" : 0
		524288 : "Ignore avoid spheres+boxes" : 0
		1048576 : "More aggressive attacks" : 0
		2097152 : "Cast long shadow" : 0
	]

	InitialSpeed(string) : "Initial Speed" : "0"
	GracePeriod(float) : "Grace Period" : "2.0" : "Time in seconds the helicopter has to see the player before he starts shooting"
	PatrolSpeed(float) : "Patrol Speed" : "0" : "Speed at which the helicopter moves if he has no enemy."

	noncombat(choices) : "Non-combat (Do not precache gibs)" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input GunOn(void) : "GunOn"
	input GunOff(void) : "GunOff"
	input MissileOn(void) : "MissileOn"
	input MissileOff(void) : "MissileOff"
	input EnableRotorWash(void) : "Turns on rotor wash effects"
	input DisableRotorWash(void) : "Turns off rotor wash effects"
	input EnableRotorSound(void) : "Turns on rotor sounds"
	input DisableRotorSound(void) : "Turns off rotor sounds"
	input StartBombingVehicle(void) : "Starts the chopper leading enemy vehicles and dropping bombs on them."
	input StartTrailingVehicle(void) : "Starts the chopper trailing enemy vehicles and shooting at them."
	input StartDefaultBehavior(void) : "Starts the chopper in the mode where he always stops at nav points instead of stopping anywhere in between nav points."
	input StartAlwaysLeadingVehicle(void) : "Starts the chopper *always* leading enemy vehicles (regardless of how they are moving w/respect to the path) and dropping bombs on them. This mode is different from StartBombingVehicle in that it never uses the machine gun."
	input StartSprinkleBehavior(void) : "Starts the chopper dropping bombs randomly + shooting at the player."
	input StartBullrushBehavior(void) : "Starts the chopper bullrushing the player."
	input SetHealthFraction(float) : "Sets the chopper health as a percentage of max health"

	input EnableDeadlyShooting(void) : "Starts the chopper being deadly to on-foot players"
	input DisableDeadlyShooting(void) : "Stops the chopper being deadly to on-foot players"

	input StartNormalShooting(void) : "The chopper will fire in short bursts. Good for on-foot experiences"
	input StartLongCycleShooting(void) : "The chopper fires in long bursts"
	input StartContinuousShooting(void) : "The chopper fires continuously."
	input StartFastShooting(void) : "The chopper fires normal bursts, but does not 'charge up' the gun. Fires immediately."

	input ResetIdleTime(void) : "Allows the helicopter to fire immediately if he's not in the middle of charging or firing"
	input SetAngles(string) : "Instantly snaps the orientation of the helicopter (Pitch Yaw Roll)"
	input DropBomb(void) : "Immediately drops a bomb based on normal bomb dropping rules"
	input DropBombStraightDown(void) : "Immediately drops a bomb directly downwards"
	input DropBombAtTarget(target_destination) : "Immediately drops a bomb directly at the target destination, but only if the player isn't right there"
	input DropBombAtTargetAlways(target_destination) : "Immediately drops a bomb directly at the target destination, no matter whether it's fair or not."
	input DropBombDelay(float) : "Add a delay before the next bomb is dropped"
	input BecomeIndestructible(void) : "Makes the helicopter take no more damage"

	input DisablePathVisibilityTests(void) : "When the helicopter moves, he will not check for visibility from the path_track to the enemy to cull out path_tracks"
	input EnablePathVisibilityTests(void) : "When the helicopter moves, he will only move to path_tracks that have line-of-sight to the enemy"

	input StartCarpetBombing(void) : "Starts the helicopter constantly dropping megabombs until StopCarpetBombing input"
	input StopCarpetBombing(void) : "Stop the carpet bombing behavior"

	// Outputs
	output OnHealthChanged(integer) : "Fires when the helicopter health changes. The integer is the percentage of health the chopper has from 0-100."
	output OnShotDown(void) : "Fires the instant the helicopter is killed"
]

@PointClass base(Targetname, Parentname) studio("models/combine_helicopter/helicopter_bomb01.mdl") = grenade_helicopter : "Helicopter bomb"
[
	spawnflags(Flags) = 
	[
		65536 :  "Is a dud" : 0
	]

	// Inputs
	input ExplodeIn(float) : "Tells the bomb to explode in X seconds."
	
	// Outputs
	output OnPhysGunOnlyPickup(void) : "Fired when a player picks this object up WITH THE PHYSGUN. +USE pickups do not fire this output."
]


@PointClass base(Targetname, Parentname) iconsprite("editor/env_firesource") color(255 255 0) sphere(radius) = npc_heli_avoidsphere : "Helicopter avoidance sphere"
[
	spawnflags(Flags) = 
	[
		65536 :  "Avoid the sphere above and below" : 0
	]
	radius(float) : "Radius" : 128
]

@SolidClass base(Origin, Angles, Parentname) color(255 255 0) = npc_heli_avoidbox : "Helicopter avoidance box"
[
	spawnflags(Flags) = 
	[
		65536 :  "Avoid the box above and below" : 0
	]
]

@SolidClass base(Origin, Angles, Parentname) color(255 255 0) = npc_heli_nobomb : "Helicopter bombing suppressor"
[
]

@NPCClass base(BaseNPC, BaseZombie) studio("models/Zombie/fast.mdl") = npc_fastzombie : "Fast Zombie"
[
	input AttachToVehicle(string) : "Attach to a specified vehicle entity"
]

@NPCClass base(BaseNPC, BaseZombie) studio("models/Zombie/Fast_torso.mdl") = npc_fastzombie_torso : "Fast Zombie Torso"
[

]

@NPCClass base(BaseNPC, BaseZombie) studio("models/Zombie/Classic.mdl") = npc_zombie : "Zombie"
[
]

@NPCClass base(BaseNPC, BaseZombie) studio("models/zombie_s/zombie.mdl") = npc_zombie_s : "Survival Zombie"
[
]

@NPCClass base(BaseNPC, BaseZombie) studio("models/Zombie/Classic_torso.mdl") = npc_zombie_torso : "Zombie Torso"
[
]

@NPCClass base(BaseNPC, BaseZombie) studio("models/Zombie/zombie_soldier.mdl") = npc_zombine : "Combine Soldier Zombie"
[
	input StartSprint(void) : "Forces the zombine to sprint."
	input PullGrenade(void) : "Forces the zombine to pull a grenade."
]

@NPCClass base(BaseNPC) studio("models/Zombie/Poison.mdl") = npc_poisonzombie :
	"A bloated, disgusting, fluid-spurting zombie created by a poison headcrab."
[
	crabcount(choices) : "Crabs in nest" : 3 =
	[
		1 : "1 Crab"
		2 : "2 Crabs"
		3 : "3 Crabs"
	]
]

@NPCClass base(BaseNPC, BaseZombie) studio("models/Zombie/female_classic.mdl") = npc_rusher : "Rusher"
[
]

@NPCClass base(BaseNPC) studio("models/combine_scanner.mdl") = npc_cscanner : "City Scanner"
[
	spawnflags(Flags) = 
	[
		65536 :  "No Dynamic Light" : 0
		131072: "Strider Scout Scanner" : 0
	]

	spotlightlength(integer) : "SpotlightLength" : 500
	spotlightwidth(integer) : "SpotlightWidth" : 50	
	
	spotlightdisabled(choices) : "SpotlightDisabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	ShouldInspect(choices) : "Should inspect" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	OnlyInspectPlayers(choices) : "Only Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	NeverInspectPlayers(choices) : "Never Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	// Inputs
	input DisableSpotlight(void) : "DisableSpotlight"
	input InspectTargetPhoto(string) : "Tells the scanner to photograph the given entity, named by classname or by target name. !activator or !player works here also."
	input InspectTargetSpotlight(string) : "Tells the scanner to spotlight the given entity, named by classname or by target name. !activator or !player works here also."
	input InputSetFlightSpeed(integer) : "Sets the flight speed of the scanner"
	input InputShouldInspect(integer) : "Set whether should inspect or not"
	input SetFollowTarget(string) : "Set target to follow until told otherwise"
	input ClearFollowTarget(void) : "Stop following our target"
	input SetDistanceOverride(float) : "Override the distance the scanner will attempt to keep between inspection targets and itself"

	input DeployMine(void) : "Drop landmine (if carrying one)"
	input EquipMine(void) : "Equip with landmine"
	
	// Outputs
	output OnPhotographPlayer(void) : "Fired any time the scanner takes a picture of the player."
	output OnPhotographNPC(void) : "Fired any time the scanner takes a picture of an NPC."
]


@NPCClass base(BaseNPC) studio("models/shield_scanner.mdl") = npc_clawscanner : "Claw Scanner"
[
	spawnflags(Flags) = 
	[
		65536 :  "No Dynamic Light" : 0
		131072: "Strider Scout Scanner" : 0
	]

	spotlightlength(integer) : "SpotlightLength" : 500
	spotlightwidth(integer) : "SpotlightWidth" : 50	
	
	spotlightdisabled(choices) : "SpotlightDisabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	ShouldInspect(choices) : "Should inspect" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	OnlyInspectPlayers(choices) : "Only Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	NeverInspectPlayers(choices) : "Never Inspect Players" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	// Inputs
	input DisableSpotlight(void) : "DisableSpotlight"
	input InspectTargetPhoto(string) : "Tells the scanner to photograph the given entity, named by classname or by target name. !activator or !player works here also."
	input InspectTargetSpotlight(string) : "Tells the scanner to spotlight the given entity, named by classname or by target name. !activator or !player works here also."
	input InputSetFlightSpeed(integer) : "Sets the flight speed of the scanner"
	input InputShouldInspect(integer) : "Set whether should inspect or not"
	input SetFollowTarget(string) : "Set target to follow until told otherwise"
	input ClearFollowTarget(void) : "Stop following our target"
	input SetDistanceOverride(float) : "Override the distance the scanner will attempt to keep between inspection targets and itself"

	input DeployMine(void) : "Drop landmine (if carrying one)"
	input EquipMine(void) : "Equip with landmine"
	
	// Outputs
	output OnPhotographPlayer(void) : "Fired any time the scanner takes a picture of the player."
	output OnPhotographNPC(void) : "Fired any time the scanner takes a picture of an NPC."
]

@NPCClass base(BaseNPC,AlyxInteractable) studio("models/manhack.mdl") = npc_manhack : "Manhack"
[
	spawnflags(Flags) = 
	[
		65536 : "Start packed up (folded and engine off)" : 0
		131072 : "Don't use any damage effects" : 0
		262144 : "Use Air Nodes" : 0
		1048576 : "No Danger Sounds" : 0
	]

	input DisableSwarm(void) : "Disable the manhack swarm behavior."
	input Unpack(void) : "Causes the manhack to stop being packed up."
	ignoreclipbrushes(choices): "Ignore NPC Clip brushes" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]
]


@NPCClass base(BaseNPC) studio("models/mortarsynth.mdl") = npc_mortarsynth : "Mortar Synth"
[
]


@NPCClass base(BaseNPC,RappelNPC) studio("models/Police.mdl") = npc_metropolice : "MetroPolice"
[
	additionalequipment(choices) : "Weapons" : "weapon_pistol" =
	[
		"weapon_pistol" : "Pistol"
		"weapon_smg1"  : "SMG1"
		"weapon_stunstick"  : "Stun Stick"
		"weapon_shotgun"  : "Shotgun"
		"0"  : "Nothing"
	]

	manhacks(Choices) : "Number of Manhacks" : 0 =
	[
		0 : "None"
		1 : "1"
		2 : "2"
	]

	weapondrawn(Choices) : "Pistol starts drawn" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	spawnflags(Flags) =
	[
		131072 : "Simple cops" : 0
		262144 : "Rappel (UNCHECK THIS IF IT IS CHECKED!)" : 0
		524288 : "Always stitch" : 0
		1048576 : "No chatter" : 0
		2097152 : "Arrest enemies" : 0
		4194304 : "No far stitching" : 0
		8388608 : "Prevent manhack toss" : 0
		16777216: "Allowed to respond to thrown objects" : 0
		33554432: "Mid-range attacks (halfway between normal + long-range)" : 0
	]
	  
	// Inputs
	input EnableManhackToss(void) : "Enables manhack toss (which had been disabled by the spawnflag)"
	input SetPoliceGoal(string) : "Causes the NPC to police the area defined by an ai_goal_police"
	input ActivateBaton(void) : "Set the baton to active"

	// Outputs
	output OnStunnedPlayer(void) : "Fires when the player is hit by a stunstick by this NPC."
	output OnCupCopped(void) : "Fires if the player hits me with the cupcop can. ONLY use for x360 achievement."
]

@NPCClass base(BaseNPC) studio("models/Synth.mdl") = npc_crabsynth : "Crab Synth"
[
]

@NPCClass base(TalkNPC) studio("models/Monk.mdl") = npc_monk : "Monk"
[
	additionalequipment(choices) : "Weapons" : "weapon_annabelle" =
	[
		"weapon_annabelle" : "Annabelle"
		"weapon_smg1" : "SMG1"
		"weapon_ar2" : "AR2"
		"weapon_stunstick" : "Stun Stick"
		"weapon_crowbar" : "Crow Bar"
		"weapon_shotgun" : "Shotgun"
		"weapon_beerbottle" : "Beer Bottle"
		"weapon_beerbottle2" : "Beer Bottle2"
		"weapon_rpg" : "RPG"
		"0"  : "Nothing"
	]

	HasGun(choices) : "Has Gun" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input PerfectAccuracyOn(void) : "Make every shot at a zombie a headshot"
	input PerfectAccuracyOff(void) : "Return to normal accuracy"
]


@NPCClass base(TalkNPC,Parentname, PlayerCompanion) studio() = npc_alyx : "Alyx"
[
	model(studio) : "World model" : "models/alyx.mdl"

	additionalequipment(choices) : "Weapons" : "weapon_alyxgun" =
	[
		"weapon_alyxgun" : "Alyx Gun"
		"weapon_shotgun" : "Shotgun"
		"0"  : "Nothing"
	]

	DontPickupWeapons(choices) : "Prevent picking up weapons?" : "1" : "If yes, this NPC will NOT be allowed to pick up weapons they find on the ground." =
	[
		0 : "No"
		1 : "Yes"	
	]

	ShouldHaveEMP(choices) : "Should alyx have her EMP?" : "1" =
	[
		0 : "No"
		1 : "Yes"
	]


    // Inputs
	input AllowInteraction(void) : "Allow Alyx's 'hacking' AI to run."
	input DisallowInteraction(void) : "Disallow Alyx's 'hacking' AI."
	input AllowDarknessSpeech(bool) : "Enables or disables Alyx's darkness speech ('where are you', etc)." 
	input SetAnimLockedEntity(string) : "Sets Alyx to take her animation and cycle position from another entity."
	input ClearAnimLockedEntity(void) : "Stops Alyx from taking her animation locking from another character."
	input GiveEMP(bool): "Gives or removes the EMP tool."

    //Outputs
	output OnFinishInteractWithObject(void) : "Fires when Alyx finishes interacting with an object (usually hacking it)."
	output OnPlayerUse(void) : "Fires when a player +USEs Alyx."

	// Vehicle entry/exit input (ultimately will reside in TalkNPC)
	input EnterVehicle(string) : "Make Alyx enter the vehicle specified by name."
	input EnterVehicleImmediately(string) : "Make Alyx enter the vehicle specified by name immediately via teleportation."
	input ExitVehicle(void) : "Make Alyx exit the vehicle she's in."
	input CancelEnterVehicle(void) : "Stops Alyx from trying to enter the vehicle if she's outside of it."

	// Outputs
	output OnPlayerUse(void) : "Fires when a player +USEs Alyx"
]

@PointClass base(Targetname, EnableDisable) = ai_goal_operator : "Indicates items in the world that some NPCs may operate upon"
[
	actor(target_name_or_class) : "Actor to affect" : "" : "NPC that should perform this operation"

	target(target_destination) : "Position entity" : "" : "Name of the entity that the NPC should move to in order to perform the operation."

	contexttarget(target_destination) :"Context target" : "" : "(Optional) Name of an entity that the operator will use within context."

	state(choices) : "Initial State" : 0 = 
	[
		0 : "Not ready (closed, locked, etc)"
		1 : "Ready (open and accessible)"
	]

	moveto(choices) : "How should NPC approach?" : 1 =
	[
		0 : "DO NOT USE THIS SETTING"
		1 : "Walk"
		2 : "Run"
	]
	
	input Activate( void ) : "Begin operating on the object"
//	input Deactivate( void ) : "Cease contesting position"
	input SetStateReady(void) : "Set the object's state to READY. Fire this input when the object has been unlocked/opened or otherwise made ready for interaction."
	input SetStateFinished(void) : "Fire this input when the NPC has completed the interaction with this object."

	output OnBeginApproach(void) : "Fired when the NPC begins to approach the position"
	output OnMakeReady(void) : "Make the item ready to operate"
	output OnBeginOperating(void) : "Fired when the NPC is ready to operate"
	output OnFinished(void) : "The item is done"
]

@PointClass base(Targetname, EnableDisable) sphere(LightRadius) = info_darknessmode_lightsource
[
	LightRadius(float) : "Light Radius" : "256.0" : "The radius around this lightsource in which Alyx will be able to see enemies."
]

@NPCClass base(TalkNPC) studio() = npc_kleiner : "Kleiner"
[
	model(studio) : "World model" : "models/kleiner.mdl"
]

@NPCClass base(TalkNPC,Parentname) studio() = npc_eli : "Eli Vance"
[
	model(studio) : "World model" : "models/eli.mdl"
]

@NPCClass base(TalkNPC) studio() = npc_magnusson : "Magnusson"
[
	model(studio) : "World model" : "models/magnusson.mdl"
]

@NPCClass base(TalkNPC) studio() = npc_breen : "Dr Breen"
[
	model(studio) : "World model" : "models/breen.mdl"

	spawnflags(Flags) = 
	[
		65536 : "Ignore speech semaphore" : 0
	]
]

@NPCClass base(TalkNPC) studio("models/mossman.mdl") = npc_mossman : "Dr Mossman"
[
]

@NPCClass base(TalkNPC) studio("models/gman.mdl") = npc_gman : "The G-Man"
[
]

@NPCClass base(BaseNPC) studio("models/dog.mdl") = npc_dog : "d0g"
[
	//Inputs
	input SetPickupTarget(string) : "Sets the target entity for dog to pickup."
	input StartCatchThrowBehavior(string) : "Tells d0g to start playing with the player. You can pass in the name of the object you want him to play with otherwise he'll find the closes phys_object."
	input StopCatchThrowBehavior(string) : "Stop the catch and throw behavior."
	input PlayerPickupObject(void) : "Tells d0g the physgun just picked up an object."
	input StartWaitAndCatch(void) : "Tells d0g to wait for the player to throw an object at him."
	input StopWaitAndCatch(void) : "Tells d0g to stop waiting for the player."
	input SetThrowArcModifier(float) : "Used to pass in a modifier for d0g's object flight arc."
	input SetThrowTarget(string) : "Set d0g's throw target (pass in !player if you want the player)"
	input TurnBoneFollowersOff(void) : "Turn dog's bone followers off"
	input TurnBoneFollowersOn(void) : "Turn dog's bone followers on"
	
	// Outputs
	output OnDogThrow(void) : "Fires when dog throws an object."
	output OnDogPickup(void) : "Fires when dog picks up an object."
	output OnDogCatch(void) : "Fires when dog catches an object."
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = monster_generic : "Generic Script NPC"
[
	spawnflags(Flags) = 
	[
		65536 : "Not solid" : 0
	]
	model(studio) : "Model"
	body(Integer) : "Body" : 0
]


@PointClass base(BaseNPC, Parentname, RenderFields, Shadow) studio() = generic_actor : "Generic Actor NPC"
[
	model(studio) : "Model"

	hull_name(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = cycler_actor : "Actor Cycler"
[
	model(studio) : "Model"
	Sentence(string) : "Sentence Group" : ""

	input Alpha(integer) : "Set Alpha Value"
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = npc_maker : "NPC Maker"
[
	spawnflags(Flags) = 
	[
		16 : "Fade Corpse" : 0
	]

	NPCType(npcclass) : "Class name of spawned NPC"
	NPCTargetname(string) : "Childrens' Name"
	NPCSquadname(string) : "Childrens' Squad Name"
	NPCHintGroup(string) : "Childrens' Hint Group"
	
	additionalequipment(choices) : "Weapons" : "0" =
	[
		"weapon_pistol" : "Pistol"
		"weapon_ar2" : "AR2"
		"weapon_shotgun" : "Shotgun"
		"weapon_smg1" : "SMG1"
		"weapon_stunstick" : "Stun Stick"
		"weapon_annabelle"	:"Grigori's Shotgun"
		"0" : "Nothing"
	]
]

@PointClass base(Angles, BaseNPCMaker) size(-8 -8 -8, 8 8 8) color(0 0 255) = npc_antlion_template_maker : "Antlion Template Maker"
[
	spawnflags(Flags) = 
	[
		1024 : "Random spawn node" : 0
		2048 : "Try to spawn close to the current target" : 0
		4096 : "Pick a random fight target" : 0
		8192 : "Try to play blocked effects near the player" : 0
	]

	TemplateName(target_destination) : "Name of template NPC"

	spawngroup(string) : "Spawn on Hint Group" : "" : "If specified, children will spawn on a hint node from this group, nearest the target."
	spawnradius(float) : "Spawn radius" : 512 : "Target must be within this distance of any node in the hint group specified above. If the target is outside the radius, no NPC will spawn."
	spawntarget(string): "Spawn target" : "" : "Targetname of the entity to try and spawn near."
	fighttarget(string): "Fight target" : "" : "Targetname of an entity used as a goal for the children to fight to."
	followtarget(string): "Follow target" : "" : "Targetname of an entity used as a goal for the children to follow."
	vehicledistance(float): "Vehicle Spawn Distance" : "1" : "This is a modifier of the current spawn distance. Spawn distance on a vehicle is based on speed, so this is just a modifier for it."
	workerspawnrate(float): "Random Worker Spawn Rate" : "0" : "Percentage chance that a spawned antlion will be a worker. (0 = no chance, 1 = 100% chance)"
	
	ignorebugbait(choices): "Ignore Bugbait" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]

	pool_start(integer) : "Initial antlions in the pool." : 0 : "Number of antlions in the pool at map start."
	pool_max(integer) : "Max antlions in the pool." : 0 : "Maximum number of antlions allowed in the pool. If 0, pool behavior is turned off."
	pool_regen_amount(integer) : "Pool regen amount." : 0 : "This is the number of antlions added to the pool every time it regenerates."
	pool_regen_time(float) : "Pool regen time." : 0 : "Time interval between pool regeneration ticks."

	// Inputs
	input SetFightTarget(string) : "Sets the target entity for children to fight to."
	input ClearFightTarget(void) : "Clears the fight target goal for this spawner."
	input SetFollowTarget(string) : "Sets the target entity for children to follow."
	input ClearFollowTarget(void) : "Clears the follow target goal for this spawner."
	input SetSpawnRadius(float) : "Sets the Spawn Radius."
	input AddToPool(integer) : "Add the number of antlions specified in the parameter to the pool."
	input SetMaxPool(integer) : "Set the maximum number of antlions allowed in the pool at any time. Setting it to 0 turns off the pool behavior."
	input SetPoolRegenAmount(integer) : "Set the number of antlions added to the pool every time it regenerates."
	input SetPoolRegenTime(float) : "Set the time interval between pool regeneration ticks."
	input ChangeDestinationGroup(string) : "Change the spawn group for this spawner."

    // Outputs
	output OnAllBlocked(void) : "Fires when all the hint nodes are blocked."

	createspores(choices): "Create Spore effect" : "0" =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(Targetname) sphere(repelradius) color(0 0 255) = point_antlion_repellant : "Antlion Repellant"
[
	repelradius(float): "Repell radius" : 512 : "Antlions aren't allowed to be inside this radius"
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@PointClass sphere() iconsprite("editor/scripted_sentence.vmt") base(Targetname) = scripted_sentence : "Scripted Sentence"
[
	spawnflags(Flags) = 
	[
		1 : "Fire Once"  : 1
		2 : "Followers Only" : 0
		4 : "Interrupt Speech" : 1
		8 : "Concurrent" : 0
		16 : "Speak to Activator" : 1
	]

	sentence(string) : "Sentence Name" : ""
	entity(string) : "Speaker Type"
	delay(string) : "Additional Sentence Time" : "0"
	radius(integer) : "Search Radius" : 512
	refire(string) : "Delay Before Refire" : "3"
	listener(string) : "Listener Type"
	volume(string) : "Volume 0-10" : "10"
	attenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]

	// Inputs
	input BeginSentence(void) : "Starts the scripted sentence."

	// Outputs
	output OnBeginSentence(void) : "Fires when the sentence begins"
	output OnEndSentence(void) : "Fires when the sentence ends"
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = scripted_target : "Scripted Target"
[
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	m_iszEntity(npcclass) : "Target NPC"
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	MoveSpeed(integer) : "Move Speed" : 5			// How quickly should target move between scripted targets
	PauseDuration(integer) : "Pause Duration" : 0		// How long should target pause at scripted target
	EffectDuration(integer) : "Effect Duration" : 2		// How long should any associated effect last

	target(target_destination) : "Next Target"		// Next scripted target

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output AtTarget(void) : "Fires when NPC reaches this target"
	output LeaveTarget(void) : "Fires when NPC leaves this target"
]

@PointClass base(Targetname) iconsprite("editor/ai_relationship.vmt") sphere() = ai_relationship : 
	"AI Relationship - Sets relationships between groups of NPCs in the AI."
[
	subject(target_name_or_class) : "Subject(s)" : "" : "This is the NPC(s) whose disposition will change. May be a targetname or a classname."
	target(target_name_or_class) : "Target(s)" : "" : "This is the NPC(s) about whom the Subject(s) will change their disposition. May be a tarGetname or a classname."
	disposition(choices) : "Disposition" : 3 : "Choose the way the Subject(s) should feel about the Target(s)" =
	[
		// These MUST match the enum in the code! (basecombatcharacter.h)
		1 : "Hate"
		2 : "Fear"
		3 : "Like"
		4 : "Neutral"
	]

	radius(float) : "Radius for subject" : 0

	rank(integer) : "Disposition Priority" : 0 : "How much the Subject(s) should Like/Hate/Fear the Target(s). Higher priority = stronger feeling."

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	Reciprocal(choices) : "Reciprocal" : 0 : "Set this to YES to have the new relationship mirrored by Target"  =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(flags) =
	[
		1 : "Notify subject of target's location" : 0
		2 : "Notify target of subject's location" : 0
	]
	
	// Inputs
	input ApplyRelationship(void) : "Apply relationship changes. This will change all Subject entities' relationships to all Target entities. \n\nIMPORTANT: Once you ApplyRelationships, this entity is then 'ALWAYS ON' until you send a Disable input or RevertRelationship input. During the time this entity is 'ON', any entities that spawn who match the Subject or Target names will be affected. \n\nIMPORTANT: Unpredictable results may occur when two ai_relationship entities refer to the same set or subset of target or subject entities. This situation should be avoided."

	input RevertRelationship(void) : "Revert relationship changes. This will return the relationship to what it was at the time the ApplyRelationship input was called (or when this ai_relationship was spawned if StartActive is set)."
	input RevertToDefaultRelationship(void) : "Revert relationship changes to the default relationship, which may have changed since this ai_relationship was applied. This returns control of the entity relationship to the code."
]

@PointClass base(Targetname) = ai_ally_manager : "AI Ally Manager"
[
	maxallies(integer) : "Maximum number of allies" : 5
	maxmedics(integer) : "Maximum number of medics" : 1

	// Inputs
	input SetMaxAllies(integer) : "Set maximum number of allies"
	input SetMaxMedics(integer) : "Set maximum number of medic allies"
	input Replenish(void) : "Replenish player allies"

	// Outputs
	output SpawnMedicAlly(void) : "Spawn Medic Ally"
	output SpawnAlly0(void) : "Spawn Ally 0"
	output SpawnAlly1(void) : "Spawn Ally 1"
	output SpawnAlly2(void) : "Spawn Ally 2"
	output SpawnAlly3(void) : "Spawn Ally 3"
	output SpawnAlly4(void) : "Spawn Ally 4"
	output SpawnAlly5(void) : "Spawn Ally 5"
	output SpawnAlly6(void) : "Spawn Ally 6"
	output SpawnAlly7(void) : "Spawn Ally 7"
	output SpawnAlly8(void) : "Spawn Ally 8"
	output SpawnAlly9(void) : "Spawn Ally 9"

	output OnZeroAllies(void) : "Fires when there are no more allies"
	output OnZeroMedicAllies(void) : "Fires when there are no more allies"
]

@PointClass base(LeadGoalBase) iconsprite("editor/ai_goal_lead.vmt") = ai_goal_lead : "AI Goal Lead"
[
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	]
]

@PointClass base(LeadGoalBase) iconsprite("editor/ai_goal_lead.vmt") = ai_goal_lead_weapon : 
	"AI Goal Lead (Weapon). A version of the ai_goal_lead entity that requires the player to have the specified weapon before the Actor(s) will lead the player to their target."
[
	WeaponName(choices) : "Weapon" : "weapon_bugbait" =
	[
		"weapon_bugbait" : "Bugbait"
		"weapon_smg1" : "SMG1"
		"weapon_ar2"  : "AR2"
	]

	MissingWeaponConceptModifier(string) : "Missing weapon concept modifier"
	
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 
]

@PointClass base(FollowGoal) iconsprite("editor/ai_goal_follow.vmt") = ai_goal_follow : "AI Goal Follow"
[
]

@PointClass base(FollowGoal) iconsprite("editor/ai_goal_follow.vmt") = ai_goal_injured_follow : "AI Goal Injured Follow"
[
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Angles, Parentname) studio("models/pigeon.mdl") = ai_battle_line : "Battle line"
[																									  
	// Spawnflags
	spawnflags(Flags) = 
	[
		1 : "Use parent's orientation" : 0
	]

	actor(target_name_or_class) : "Actor(s) or squad to affect"

	Active(choices) : "Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	Strict(choices) : "Strict" : 1 : "Player orders can override, applies to allies only" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Activate(void)
	input Deactivate(void)
]

@PointClass base(Targetname) iconsprite("editor/ai_goal_standoff.vmt") = ai_goal_standoff : "AI Goal Standoff"
[
	actor(target_name_or_class) : "Actor(s) to affect"
//	goal(string) : "Target Entity (self by default) [NOT IMPLEMENTED]"

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	HintGroupChangeReaction(Choices) : "Reaction to tactical change" : 1 : "What to do if leader moves, threat is neutralized, hint group changes, etc" =
	[
		0 : "Move when ready (default AI)"
		1 : "Move when seek cover"
		2 : "Move immediately"
	]

	Aggressiveness(Choices) : "Aggressiveness" : 2 =
	[
		0 : "Very low"
		1 : "Low"
		2 : "Medium"
		3 : "High"
		4 : "Very High"
		// Custom agression disabled
		// 		100 : "Custom"
	]

	PlayerBattleline(choices) : "Player battleline" : 1 : "Player defines a battle line, applies to allies only" =
	[
		0 : "No"
		1 : "Yes"
	]

	StayAtCover(choices) : "Stay at cover location" : 0 : "When have suitable cover, don't change it (disables advancing to battle line)" =
	[
		0 : "No"
		1 : "Yes"
	]

	AbandonIfEnemyHides(choices) : "Abandon if enemies hide" : 0 : "If no enemy detected recently, stop the standoff" =
	[
		0 : "No"
		1 : "Yes"
	]

	// Custom aggression
//	CustomCoverOnReload(choices) : "Custom: Take cover to reload" : 1 =
//	[
//		0 : "No"
//		1 : "Yes"
//	]
//	CustomMinTimeShots(float) : "Custom: Min time wait to shoot"	  : 2 : "Minimum duration of time after a burst of shooting before trying again"
//	CustomMaxTimeShots(float) : "Custom: Max time wait to shoot"	  : 4 : "Minimum duration of time after a burst of shooting before trying again"
//	CustomMinShots(integer) : "Custom: Min shots in a burst"	  : 1
//	CustomMaxShots(integer) : "Custom: Max shots in a burst"	  : 4
//	CustomOddsCover(integer) : "Custom: Odds cover on damage"	  : 25 : "If damaged, the chances react by taking immediate cover"

	// Inputs
	input Activate( void ) : "Begin contesting position"
	input Deactivate( void ) : "Cease contesting position"
	input SetAggressiveness(integer) : "Set aggressiveness"
]

@PointClass base(Targetname, Parentname, Angles) sphere(policeradius) iconsprite("editor/ai_goal_police.vmt") = ai_goal_police : "AI Goal Police"
[
	spawnflags(Flags) = 
	[
		2 : "Knock-out target past crossing plane" : 0
		4 : "Do not leave post" : 0
	]

	policeradius(float) : "Radius" : 512 : "Radius to police"
	policetarget(string) : "Target" : "" : "Target to police"

	// Inputs
	input EnableKnockOut(void) : "Tells the goal to make the active policing NPC knock out its target"
	input DisableKnockOut(void) : "Stop the active policing NPC from trying to knock out its target"

	// Outputs
	output OnFirstWarning(void) : "Fires the first time a policing cop warns a target"
	output OnSecondWarning(void) : "Fires the second time a policing cop warns a target"
	output OnLastWarning(void) : "Fires when a policing cop warns a target for the last time"
	output OnSupressingTarget(void) : "Fires when a policing cop starts to suppress (ie. beat) a target"
	output OnKnockOut(void) : "Fires when a target has been knocked out"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/assault_rally.vmt") line(255 255 255, targetname, assaultpoint) = assault_rallypoint : 
	"(Assault) rally point"
[
	assaultpoint(target_destination)  : "Assault Point" : "" : "Location to move to as assault begins"
	assaultdelay(float) : "Assault Delay" : 0 : "How long to wait after cue is given before assault begins."
	rallysequence(string) : "Rally Sequence" : "" : "Override the NPC's wait activity by entering a sequence name."
	priority(integer) : "Priority" : 1 : "Higher priority rally points get selected first."

	forcecrouch(choices) : "Force Crouch" : 0 : "NPCs using this assault point are forced into crouching while holding it." =
	[
		0 : "No"
		1 : "Yes"
	]

	urgent(choices) : "Urgent" : 0 : "If true, NPCs will consider movement to this rally point as Urgent Navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnArrival(void) : "Fires when the NPC reaches this rally point"
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/assault_point.vmt") line(255 255 255, targetname, nextassaultpoint) = assault_assaultpoint : 
	"(Assault) assault point"
[
	assaultgroup(string)  : "Assault Hint Group" : "" : "NPC's movements are constrained to this hint group once assault has begun"
	nextassaultpoint(target_destination) : "Next assault point (optional)"
	assaulttimeout(float) : "Assault time out" : "3.0" : "This point is cleared when no enemies are seen for this long (seconds)"
	clearoncontact(choices) : "Clear on contact with enemies" : 0 : "If you come in contact with enemies while approaching the assault point, clear our assault point" =
	[
		0 : "No"
		1 : "Yes"
	]
	allowdiversion(choices) : "Allow diversion" : 0 : "If you come in contact with enemies while approaching the assault point, divert to kill them. Resume the assault once contact is lost." =
	[
		0 : "No"
		1 : "Yes"
	]

	allowdiversionradius(float) : "Diversion Proximity" : 0 : "If Allow Diversion is set, NPC will only divert from assault to attack an enemy that is within this distance of the assault point. 0 = No limit."

	nevertimeout(choices) : "Never Timeout" : 0 : "If set, the assault never ends for NPCs assaulting this point. Useful for forcing NPCs back to a point." =
	[
		0 : "No"
		1 : "Yes"
	]

	strict(choices) : "Strict?" : 0 =
	[
		0 : "No, NPC may move from point to attack"
		1 : "Yes, NPC may not move to attack"
	]

	spawnflags(Flags) = 
	[
		1 : "Clear this point upon arrival, UNCONDITIONALLY" : 0
	]

	forcecrouch(choices) : "Force Crouch" : 0 : "NPCs using this assault point are forced into crouching while holding it." =
	[
		0 : "No"
		1 : "Yes"
	]

	urgent(choices) : "Urgent" : 0 : "If true, NPCs will consider movement to this assault point as Urgent Navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	assaulttolerance(choices) : "Attack Tolerance" : 36 : "How far this NPC may move from the assault point to try to attack an enemy." =
	[
		36 : "Tight (3ft)"
		72 : "Medium (6ft)"
		120 : "Large (10ft)"
	]


	// Inputs
	input SetClearOnContact(integer) : "Set the clear on contact flag. NPCs who spot enemies while running to the assault point, or while waiting at it, will immediately Clear it."
	input SetAllowDiversion(integer) : "Set the allow diversion flag. NPCs who spot enemies whil running to the assault point, or while waiting on it, will divert away (leave Assault mode) to deal with the enemies. Upon losing enemies, they'll go back to Assault mode, and return to this assault point."
	input SetForceClear(integer) : "Set the Force Clear flag. NPCs who are currently running to the assault point will Clear it immediately. NPCs who acquire it in the future will Clear it automatically."

	// Outputs
	output OnArrival(void) : "Fires when the NPC reaches this assault point"
	output OnAssaultClear(void) : "Fires when this assault point is cleared of enemies"
]

@PointClass base(Targetname) iconsprite("editor/ai_goal_assault.vmt") = ai_goal_assault : 
	"AI Goal Assault"
[
	actor(target_name_or_class) : "Actor(s) to affect" : "" : "NPC's that should perform this assault"
	rallypoint(target_destination) : "Rally Point Set" : "" : "Root name of rally points for this assault. Use an asterisk '*' after the root name to match all with the same root."

	SearchType(choices) : "Search Type" : 0 : "How to search for the entities using the targetname." = 
	[
		0 : "Entity Name"
		1 : "Classname"
	] 

	StartActive(choices) : "Start Active" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	AssaultCue(choices) : "Assault Cue" : 1 =
	[
		1 : "Entity System Input"
		2 : "Gunfire"
		3 : "Don't wait for a cue."
	]

	RallySelectMethod(choices) : "Rally Point Selection Method" : 0 = 
	[
		0 : "Priority, Distance (default)"
		1 : "Random"
	]


	// Inputs
	input Activate( void ) : "Begin the assault behavior"
	input Deactivate( void ) : "Cease the assault behavior"
	input BeginAssault( void ) : "Begin assault phase"
]

@PointClass base(BaseActBusy) iconsprite("editor/ai_goal_actbusy.vmt") = ai_goal_actbusy : "AI Goal Act Busy"
[
	seeentity(target_name_or_class) : "Sight Entity" : "" : "The Sight Entity (if you provide one) is an entity that will leave the current ActBusy if the Actor playing the ActBusy loses sight of it for the amount of time specified in 'Sight Entity Timeout'. THIS MAY ONLY BE A TARGET NAME. NO CLASSNAMES."

	seeentitytimeout(string) : "Sight Entity Timeout" : "1" : "If you provide a Sight Entity, the Actor will leave the current ActBusy if the Actor has lost sight of Sight Entity for this many seconds."

	sightmethod(choices) : "Sight Enemy Method" : 0 : "The method to use to determine whether the Sight enemy is visible." = 
	[
		0 : "Default. LOS -and- Viewcone"
		1 : "LOS Only. Disregard Viewcone"
	]


	type(choices) : "Actbusy Type" : 0 =
	[
		0 : "Default (Standard)"
		1 : "Combat"
	]

	safezone(target_destination) : "Combat Safe Zone" : "" : "Only for combat actbusy. Lets you specify a volume which is the 'safe zone'. The Combat ActBusy will cancel if any enemies are seen in the safe zone."


	allowteleport(choices) : "Allow actor to teleport?" : 0 =
	[
		0 : "No"
		1 : "Yes (Only for Combat Actbusy)"
	]

	output OnNPCLostSeeEntity(void) : "Fired when the NPC loses sight of the see entity (if one is specified)."
	output OnNPCSeeEnemy(void)  : "Fired when this NPC leaves his actbusy because of sighting an enemy."
]

@PointClass base(BaseActBusy) iconsprite("editor/ai_goal_actbusy_queue.vmt") = ai_goal_actbusy_queue : "AI Goal Act Busy Queue"
[
	node_exit(target_destination) : "Exit Node" : "" : "The name of the node the first NPC in the queue should move to when he leaves the head of the queue."
	node01(target_destination) : "Node 1" : "" : "The name of the first actbusy hint node in the queue."
	node02(target_destination) : "Node 2" : "" : "The name of the second actbusy hint node in the queue."
	node03(target_destination) : "Node 3" : "" : "The name of the third actbusy hint node in the queue."
	node04(target_destination) : "Node 4" : "" : "The name of the fourth actbusy hint node in the queue."
	node05(target_destination) : "Node 5" : "" : "The name of the fifth actbusy hint node in the queue."
	node06(target_destination) : "Node 6" : "" : "The name of the sixth actbusy hint node in the queue."
	node07(target_destination) : "Node 7" : "" : "The name of the seventh actbusy hint node in the queue."
	node08(target_destination) : "Node 8" : "" : "The name of the eighth actbusy hint node in the queue."
	node09(target_destination) : "Node 9" : "" : "The name of the ninth actbusy hint node in the queue."
	node10(target_destination) : "Node 10" : "" : "The name of the tenth actbusy hint node in the queue."
	node11(target_destination) : "Node 11" : "" : "The name of the eleventh actbusy hint node in the queue."
	node12(target_destination) : "Node 12" : "" : "The name of the twelfth actbusy hint node in the queue."
	node13(target_destination) : "Node 13" : "" : "The name of the thirteenth actbusy hint node in the queue."
	node14(target_destination) : "Node 14" : "" : "The name of the fourteenth actbusy hint node in the queue."
	node15(target_destination) : "Node 15" : "" : "The name of the fifteenth actbusy hint node in the queue."
	node16(target_destination) : "Node 16" : "" : "The name of the sixteenth actbusy hint node in the queue."
	node17(target_destination) : "Node 17" : "" : "The name of the seventeenth actbusy hint node in the queue."
	node18(target_destination) : "Node 18" : "" : "The name of the eighteenth actbusy hint node in the queue."
	node19(target_destination) : "Node 19" : "" : "The name of the nineteenth actbusy hint node in the queue."
	node20(target_destination) : "Node 20" : "" : "The name of the twentieth actbusy hint node in the queue."
	 
	mustreachfront(choices) : "Must Reach Front" : 0 : "If true, NPCs much reach the front node in the queue before they're allowed to leave the queue." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input PlayerStartedBlocking(float) : "Tell the queue manager that the player has started blocking a spot in the queue."
	input PlayerStoppedBlocking(float) : "Tell the queue manager that the player has stopped blocking a spot in the queue."
	input MoveQueueUp(void) : "Force the queue to move up, sending the front-most NPC out of the queue."

	// Outputs
	output OnQueueMoved(float) : "Fired when the queue moves. Outputs the number of NPCs left in the queue."
	output OnNPCStartedLeavingQueue(string) : "Fired when the NPC at the head of the queue starts to leave. The activator is the NPC, and the string is the name of the NPC."
	output OnNPCLeftQueue(string) : "Fired when the NPC at the head of the queue leaves. The activator is the NPC, and the string is the name of the NPC."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = ai_changetarget : "Change Target"
[
	target(target_destination) : "Target entity" : : "Name of entity whose target will be changed."
	m_iszNewTarget(string) : "New Target"

	// Inputs
	input Kill( void ) : "Removes this entity from the world"
	input Activate( void ) : "Changes the entities target"
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = ai_npc_eventresponsesystem : "An entity that allows you to generate events for nearby friendly NPCs to respond to."
[
	input TriggerResponseEvent(string) : "Fire an NPC Response Event. The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
	input ForceTriggerResponseEvent(string) : "Fire an NPC Response Event, and force the first available NPC to speak the response (breaking them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
	input ForceTriggerResponseEventNoCancel(string) : "Fire an NPC Response Event, and force the first available NPC to speak the response (but don't break them out of any scene they're in). The parameter should match the response rules concept that any nearby friendly NPCs will try to speak."
]
@PointClass base(Targetname) sphere(Radius)  size(-8 -8 -8, 8 8 8) = ai_changehintgroup : "Change Hint Group"
[
	SearchType(choices) : "Search Type" : 0 : "How to search for the entities to change." = 
	[
		0 : "Entity Name"
		1 : "Classname"
		2 : "Old Hint Group"
	] 
	SearchName(string) : "Name to search for"
	NewHintGroup(string) : "New Hint Group"
	Radius(string) : "Search Radius" : "0.0" : "Radius to search (0 for all of map)"
	hintlimiting(choices) : "Hint Limit Nav" : 0 : "Limits NPC to using specified hint group for navigation requests, does not limit local navigation." =
	[
		0 : "No"
		1 : "Yes"
	]

	input Kill( void ) : "Removes this entity from the world"
	input Activate( void ) : "Change the Hint Group"
]



@PointClass base(Targetname) iconsprite("editor/ai_script_conditions.vmt") = ai_script_conditions : "AI Script Conditions"
[
	Actor(target_destination) : "Actor" : : "NPC Target"
	
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	MinimumState(choices) : "Minimum state" : 1 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]

	MaximumState(choices) : "Maximum state" : 3 =
	[
		1 : "Idle"
		2 : "Alert"
		3 : "Combat"
	]
	
	ScriptStatus(choices) : "Actor is running a script?" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
		
	RequiredTime(float) : "Required Time"	  : 0 : "Duration of time that all the conditions must be true"
	MinTimeout(float) : "Minimum time out"  : 0 : "Minimum time before OnConditionsTimeout is fired. 0 = never expire."
	MaxTimeout(float) : "Maximum time out"  : 0 : "Maximum time before OnConditionsTimeout is fired. 0 = ignore (If you don't specify a Maximum timeout, conditions will time out at exactly Minimum Time Out. If you DO specify a Maximum time out, timeout will occur randomly between Minimum and Maximum time out values.)"
	
	ActorSeePlayer(choices) : "Actor Sees Player" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	PlayerActorProximity(float) : "Player distance"  : 0 : "The distance the player must/must not be to the actor. Negative values for NOT, 0 for ignore."
	PlayerActorFOV(float) : "Player FOV for Actor " : 360 : "Specify angle of view cone in degrees. Negative value = NOT"
	PlayerActorFOVTrueCone(choices ) : "Play FOV to Actor is a true view cone" : 0 : "Player's view cone is evaluated as a true cone, not pie slice " = 
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]

	PlayerActorLOS(choices) : "Player has LOS to Actor" : 2 : "Checks that the player has clear Line of Sight to the Actor" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]


	target(target_destination) : "Target (Optional)" : : "Optional entity to include in conditions"
	ActorSeeTarget(choices)  : "Actor Sees Target" : 2 =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorTargetProximity(float) : "Target distance"  : 0 : "The distance the actor must/must not be to the Target. Negative values for NOT, 0 for ignore."
	PlayerTargetProximity(float) : "Player distance from Target"  : 0 : "The distance the player must/must not be to the Target. Negative values for NOT, 0 for ignore."
	PlayerTargetFOV(float) : "Player FOV for Target" : 360 : "Specify angle of view cone in degrees. Negative value = NOT"
	PlayerTargetFOVTrueCone(choices ) : "Play FOV to Target is a true view cone" : 0 : "Player's view cone is evaluated as a true cone, not pie slice " = 
	[
		0 : "No - Tall pie slice"
		1 : "Yes - True view cone"
	]

	PlayerTargetLOS(choices) : "Player has LOS to Target" : 2 : "Checks that the player has clear Line of Sight to the Target" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]
	
	PlayerBlockingActor(choices) : "Player blocking Actor" : 2 : "Checks that the player is blocking the Actor's path" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorInPVS(choices)	: "Actor in Player's PVS" : 2 : "Checks that the actor is in the player's PVS" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	ActorInVehicle(choices)	: "Actor in a vehicle" : 2 : "Checks the actor's state in a vehicle" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	PlayerInVehicle(choices)	: "Player in a vehicle" : 2 : "Checks the player's state in a vehicle" =
	[
		0 : "No"
		1 : "Yes"
		2 : "Don't care"
	]

	spawnflags(Flags) = 
	[
		1 : "Fire outputs with the Actor as Activator"	: 0
	]

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output OnConditionsSatisfied(void) : "Fires when AI conditions satisfied"
	output OnConditionsTimeout(void)   : "Fires when AI conditions timed out"
	output NoValidActor(void) : "Fires if/when there are no matching actors in the map."
]

@PointClass base(BaseScripted, Angles, DXLevelChoice) studio("models/editor/scriptedsequence.mdl") sphere(m_flRadius) = scripted_sequence :
	"Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or can "+
	"be told to play the script wherever they currently are. "+
	"Multiple scripted sequences of the same name will frame-synchronize in the action animation once all the actors have moved to position. "+
	"This allows tight interaction between actors (one actor grabbing another, hitting them, etc.) The flow is as follows:\n\n"+
	"1) Move to position using the specified movement animation. If 'Move to Position' is set to NONE, skip to step 2.\n"+
	"2) If forced to wait for another actor to move to position, play the pre-action idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n"+
	"3) Fire the OnBeginSequence output.\n"+
	"4) Play the action animation. If no action animation is specified, skip to step 5.\n"+
	"5) Play the post-action idle animation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle until the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n"+
	"6) Fire the OnEndSequence output.\n"+
	"7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\n"+
	"The MoveToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is received.\n\n"+
	"If the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag."
[
	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 0
		8 : "Leave Corpse" : 0
		16 : "Start on Spawn" : 0
		32: "No Interruptions" : 0
		64: "Override AI" : 0
		128: "Don't Teleport NPC On End" : 0
		256: "Loop in Post Idle" : 0
		512: "Priority Script" : 0
		4096: "Allow actor death" : 0
	]

	
	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
]


@PointClass base(Targetname) sphere(m_flRadius) color(255 0 255) iconsprite("editor/aiscripted_schedule") = aiscripted_schedule :
	"Issues a command to an NPC without taking the NPC out of its AI. This does not seize control of the NPC as " +
	"a scripted_sequence does" 
[
	m_iszEntity(target_destination) : "Target NPC" : : "The name or classname of an NPC to use."
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	graball(choices)  : "All in radius" : 0: "Whether to grab all matching NPCs in the specified radius, instead of just one"  =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 1
		1024 : "Search Cyclically" : 0
		2048 : "Don't Complain" : 0
	]

	forcestate(choices) : "AI state to set" : 0 =
	[
		0 : "<None>"
		1 : "Set state to IDLE"
		2 : "Set state to ALERT"
		3 : "Set state to COMBAT"
	]
		
	schedule(choices) : "Schedule to run" : 1 =
	[
		0 : "<None>"
		1 : "Walk to Goal Entity"
		2 : "Run to Goal Entity"
		3 : "Set enemy to Goal Entity"
		4 : "Walk Goal Path"
		5 : "Run Goal Path"
		6 : "Set enemy to Goal Entity AND Run to Goal Entity"
	]
	
	interruptability(choices) : "Interruptability" : 0 =
	[
		0 : "General"
		1 : "Damage or Death"
		2 : "Death"
	]

	goalent(target_destination) : "Goal entity" : : "Provides the name of a schedule-specific goal entity (see 'Schedule to run')"

	// Inputs
	input StartSchedule(void) : "Starts the scripted schedule. This will first locate an NPC that " +
		"matches the given target, then tell the NPC to run the specified schedule."
]

@PointClass base(Targetname) = ai_citizen_response_system :
	"If placed in the level, will manage citizens responses to player's actions."
[
	// Inputs
	input ResponseVitalNPC(void) : "Fire the VitalNPC Died response."
]

//-------------------------------------------------------------------------
//
// Solid Entities
//
//-------------------------------------------------------------------------

@SolidClass base(EnableDisable, Parentname, Origin, Global) = func_healthcharger: "Wall health recharger" 
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	// Outputs
	output OutRemainingHealth(float) : "Remaining Health."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

@SolidClass base(Targetname, Parentname, Origin) = func_recharge: "Battery recharger" 
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	spawnflags(flags) =
	[
		8192  : "Citadel recharger" : 0
	]

	// Inputs
	input Recharge(void) : "Recharge to full"
	input SetCharge(void) : "This sets the remaining charge in the charger to whatever value you specify"

	// Outputs
	output OutRemainingCharge(float) : "Remaining Charge."
	output OnHalfEmpty(void) : "Half-Empty"
	output OnEmpty(void) : "Empty"
	output OnFull(void) : "Recharged to full."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

@SolidClass base(Parentname, Targetname, Global) = func_vehicleclip: "Vehicle Clip" 
[
	input Kill( void ) : "Removes this entity from the world"
	input Enable( void ) : "Enable collisions with vehicles"
	input Disable( void ) : "Disable collisions with vehicles"
]

@SolidClass base(func_movelinear) = func_lookdoor : "A door that moves either when looked by a targeted object or when " +
	"a target object comes near the door.  Behavior can be either based on viewing direction or proximity " +
	"alone, or on a combination of both.  If inverted the doors behavior will be the opposite." 
[
	spawnflags(flags) =
	[
		8192  : "LookDoor Threshold" : 0
		16384 : "LookDoor Invert" : 0
		32768 : "LookDoor From Open" : 0
	]

	ProximityDistance(string) : "Proximity Distance" : "0.0"  : "If non-zero, proximity range over which door will move"
	ProximityOffset(string) : "Proximity Offset" : "0.0" : "Offset from the target object"
	FieldOfView(string) : "FieldOfView" : "0.0"  : "If non-zero, field of view over which door will move"

	// Input
	input InvertOn(void) : "InvertOn - when set behavior of door is inverted."
	input InvertOff(void) : "InvertOff - when set behavior of door is normal."
]

@SolidClass base(Trigger) = trigger_waterydeath: 
	"A trigger volume that spawns leeches around entities inside it, and does damage to them until they die. "+
	"Used to prevent players entering deep water."
[
]

//-------------------------------------------------------------------------
//
// Point Entities
//
//-------------------------------------------------------------------------

@PointClass base(EnvGlobal) iconsprite("editor/env_global") = env_global : 
	"An entity to control a game-specific global states."
[
	globalstate(choices) : "Global State to Set" =
	[
		"gordon_precriminal" : "Gordon pre-criminal" 
		"antlion_allied" : "Antlions are player allies" 
//		"player_stealth" : "Player in APC is disguised as combine" 
		"suit_no_sprint" : "Suit sprint function not yet enabled" 
		"super_phys_gun" : "Super phys gun is enabled" 
		"friendly_encounter" : "Friendly encounter sequence (lower weapons, etc.)"
//		"citizens_passive" : "Citizens are *not* player allies (cannot be commanded)"
		"gordon_invulnerable" : "Gordon is invulnerable"
		"no_seagulls_on_jeep" : "Don't spawn seagulls on the jeep"
		"ep2_alyx_injured" : "Episode 2: Alyx injured"
		"ep_alyx_darknessmode" : "Episodic: Alyx darkness mode"
		"hunters_to_run_over" : "Ep2 Counter: Hunters to run over before they dodge"
	]
]

// dvs: FIXME: put this back once we have an episodic FGD
//@SolidClass base(BaseTank) = func_tank : "Brush Gun Turret" 
//[
//	bullet(choices) : "Bullets" : 0 = 
//	[
//		0: "None"
//		1: "Pistol"
//		2: "SMG1"
//		3: "AR2"
//		4: "Laser"
//	]
//
//	spawnflags(flags) =
//	[
//		8192: "Ignore range when making viewcone checks" : 0
//		256 : "Aiming Assistance (Player Only)" : 0
//	]
//]


// dvs: FIXME: move into an episodic FGD
@SolidClass base(BaseTank) = func_tank : "Brush Gun Turret" 
[
	ammotype(choices) : "Ammo type" : "" = 
	[
		"" : "None"
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"AR2" : "AR2"
		"CombineHeavyCannon" : "Combine Heavy Cannon"
	]

	spawnflags(flags) =
	[
		8192: "Ignore range when making viewcone checks" : 0
		256 : "Aiming Assistance (Player Only)" : 0
	]
]


@SolidClass base(BaseTank) = func_tankpulselaser : "Brush Pulse Laser" 
[
	PulseSpeed(float) : "Pulse Speed" : 1000 : "How fast does pulse travel"
	PulseColor(color255) : "Pulse Color" : "255 0 0" : "Color of the pulse"
	PulseWidth(float) : "Pulse Width" : "20" : "Width of the pulse"
	PulseLife(float) : "Pulse Life" : 2 : "(Seconds)  How long the pulse lasts"
	PulseLag(float) : "Pulse Lag" : "0.05" : "(Seconds)  How far behind is pulse tail"
	PulseFireSound(sound)   : "Pulse Fire Sound" : "" : "Sound played when pulse fires"
]


@SolidClass base(BaseTank) = func_tanklaser : "Brush Laser Turret" 
[
	laserentity(target_destination) : "env_laser Entity"
]


@SolidClass base(BaseTank) = func_tankrocket : "Brush Rocket Turret"
[
	rocketspeed(float) : "Projectile speed" : 800 : "Speed the rocket will travel at."
]

@SolidClass base(BaseTank) = func_tankairboatgun : "Airboat Gun Turret"
[
	airboat_gun_model(target_destination) : "Name of a prop_dynamic which is the airboat gun model"
]

@SolidClass base(BaseTank) = func_tankapcrocket : "APC Rocket Turret"
[
	rocketspeed(float) : "Projectile speed" : 800 : "Speed the rocket will travel at."
	burstcount(integer) : "Burst shot count" : 10 : "Number of missiles to shoot in a burst"

	input DeathVolley(void) : "Fire a burst of rockets cause we're dying."
]


@SolidClass base(BaseTank) = func_tankmortar : "Brush Mortar Turret" 
[
	iMagnitude(Integer) : "Explosion Magnitude" : 100
	firedelay(string) : "Shell travel time" : 2 : "How long after the turret fires before the shell impacts"
	firestartsound(sound) : "Firing start sound" : "" : "Sound of the mortar firing"
	fireendsound(sound) : "Firing end sound" : "" 
	incomingsound(sound) : "Incoming Shell Sound" : "" : "Sound of the shell falling on the target"
	warningtime(float) : "Incoming warning time" : "1" : "How long before the shell impacts to play the warning sound"
	firevariance(float) : "Fire time variance" : "0" : "How much variability to add to fire rate (time +-)"

	input FireAtWill(void) : "Allow tank to fire next shot as soon as ready."
]

@SolidClass base(BaseTank) = func_tankphyscannister : "PhysCannister Turret"
[
	barrel_volume(target_destination) : "Barrel Volume" : "" : "Name of a trigger the specifies the volume in which cannisters must be placed."
]

@SolidClass base(BaseTank) = func_tank_combine_cannon : "Combine sentry cannon"
[
	ammotype(choices) : "Ammo type" : "" = 
	[
		"" : "None"
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"AR2" : "AR2"
		"CombineHeavyCannon" : "Combine Heavy Cannon"
	]

	input DisableHarrass(void) : "Disable the cannon tracking an unseen player" 
	input EnableHarrass(void) : "Allow the cannon to track and pester a player who is hiding (DEFAULT)"

	output OnShotAtPlayer(void) : "Fired everytime the cannon shoots at the player"
]

//-------------------------------------------------------------------------
//
// Items
//
//-------------------------------------------------------------------------

@PointClass base(HLItem) studio("models/items/healthkit.mdl") = item_dynamic_resupply : "A dynamic item. When the player enters the PVS of this entity, " +
    "it will determine the item most needed by the player, spawn one of those items, and remove itself. To determine which item the player most needs, it " +
    "calculates which of the Desired Health/Armor/Ammo ratios the player is farthest from.\n\nIf the player is above all the desired levels, then no item " +
    "will be spawned, unless this item_dynamic_resupply was created by an item_item_crate. In that case, a random piece of ammo used by a weapon, that " +
    "the player has, will be spawned. If the 'Fallback to Health Vial' spawnflag is set, a health vial will be spawned instead of the ammo.\n\nBy default, " +
    "the item_dynamic_resupply uses the values inside the Master resupply, instead of using it's own values. This makes it easy to tweak the desired " +
    "loadout of many resupplies. The BecomeMaster input allows you to switch Masters dynamically as the level progresses."
[
	spawnflags(Flags) =
	[
		1 : "Use Master's values" : 1
		2 : "Is Master" : 0
		8 : "Fallback to Health Vial" : 0
		16 : "Alternate master" : 0
	]

	DesiredHealth(float) : "Desired Health Ratio" : "1" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max health."
	DesiredArmor(float) : "Desired Armor Ratio" : "0.3" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max armor."
	DesiredAmmoPistol(float) : "Desired Pistol Ammo Ratio" : "0.5" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoSMG1(float) : "Desired SMG1 Ammo Ratio" : "0.5" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoSMG1_Grenade(float) : "Desired SMG1 Grenade Ammo Ratio" : "0.1" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoAR2(float) : "Desired AR2 Ammo Ratio" : "0.4" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoBuckshot(float) : "Desired Shotgun Ammo Ratio" : "0.5" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoRPG_Round(float) : "Desired RPG Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoGrenade(float) : "Desired Grenade Ammo Ratio" : "0.1" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmo357(float) : "Desired 357 Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoCrossbow(float) : "Desired Crossbow Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."
	DesiredAmmoAR2_AltFire(float) : "Desired AR2 Alt-fire Ammo Ratio" : "0" : "A ratio from 0 to 1. Attempt to fill the player up to this percentage of his max ammo carrying capacity."

	// Inputs
	input CalculateType(void) : "Force the dynamic resupply to calculate which item it should spawn."
	input BecomeMaster(void) : "Make this resupply the master resupply. All other resupplies set to Use Master's Values will now use this resupply's values."
]

@PointClass base(HLItem) studio("models/items/boxsrounds.mdl")= item_ammo_pistol : "Box of Pistol ammo" []
@PointClass base(HLItem) studio("models/items/boxsrounds.mdl")= item_ammo_pistol_large : "Large Box of Pistol ammo" []
@PointClass base(HLItem) studio("models/items/BoxMRounds.mdl")= item_ammo_smg1 : "Box of SMG1 ammo" []
@PointClass base(HLItem) studio("models/items/BoxMRounds.mdl")= item_ammo_smg1_large : "Large Box of SMG1 ammo" []
@PointClass base(HLItem) studio("models/items/combine_rifle_cartridge01.mdl")= item_ammo_ar2 : "Box of AR2 ammo" []
@PointClass base(HLItem) studio("models/items/combine_rifle_cartridge01.mdl")= item_ammo_ar2_large : "Large Box of AR2 ammo" []
@PointClass base(HLItem) studio("models/items/357ammo.mdl")= item_ammo_357 : "Box of 357 ammo" []
@PointClass base(HLItem) studio("models/items/357ammobox.mdl")= item_ammo_357_large : "Large Box of 357 ammo" []
@PointClass base(HLItem) studio("models/items/CrossbowRounds.mdl")= item_ammo_crossbow : "Box of Crossbow ammo" []
@PointClass base(HLItem) studio("models/items/BoxBuckshot.mdl")= item_box_buckshot : "Box Buckshot" []
@PointClass base(HLItem) studio("models/weapons/w_missile_closed.mdl")= item_rpg_round : "RPG Round" []
@PointClass base(HLItem) studio("models/items/AR2_Grenade.mdl")= item_ammo_smg1_grenade : "SMG1 Grenade" []
//@PointClass base(HLItem) studio("models/items/battery.mdl") = item_battery : "HEV battery" []
@PointClass base(HLItem) studio("models/items/battery.mdl") = item_battery : "HEV battery"
[
	powerup_model(choices) : "Model" : "" : "Change the model to something other than the default model. Not shown in Hammer." =
	[
		"" : "Default"
		"models/w_battery.mdl" : "Hl1 Battery"
	]
]
@PointClass base(HLItem) studio("models/items/healthkit.mdl") = item_healthkit : "Small Health Kit" []
@PointClass base(HLItem) studio("models/healthvial.mdl") = item_healthvial : "Personal Health Kit" []
@PointClass base(HLItem) studio("models/items/combine_rifle_ammo01.mdl") = item_ammo_ar2_altfire : "AR2 Alt-fire Round" []
@PointClass base(Item) studio("models/w_9mmclip.mdl") = ammo_9mmclip : "9mm Pistol Ammo" []
@PointClass base(Item) studio("models/w_9mmclip.mdl") = ammo_glockclip : "9mm Pistol Ammo" []
@PointClass base(Item) studio("models/w_9mmARclip.mdl")= ammo_9mmAR : "9mm Assault Rifle Ammo" []
@PointClass base(Item) studio("models/w_chainammo.mdl") = ammo_9mmbox : "box of 200 9mm shells" []
@PointClass base(Item) studio("models/w_ARgrenade.mdl") = ammo_ARgrenades : "Assault Grenades" []
@PointClass base(Item) studio("models/w_shotbox.mdl") = ammo_buckshot : "Shotgun Ammo" []
@PointClass base(Item) studio("models/w_357ammobox.mdl") = ammo_357 : "357 Ammo" []
@PointClass base(Item) studio("models/w_rpgammo.mdl") = ammo_rpgclip : "RPG Ammo" []
@PointClass base(Item) studio("models/w_gaussammo.mdl") = ammo_gaussclip : "Gauss Gun Ammo" []
@PointClass base(Item) studio("models/w_crossbow_clip.mdl") = ammo_crossbow : "Crossbow Ammo" []
@PointClass base(Item) studio("models/w_longjump.mdl") = item_longjump : "Long Jump Item" []
@PointClass base(HLItem) studio("models/items/hevsuit.mdl") = item_suit : "HEV Suit" 
[
	spawnflags(Flags) =
	[
		1 : "Short Logon" : 0
	]
]

@PointClass base(Targetname, Angles, BaseFadeProp) studio("models/items/ammocrate_rockets.mdl") = item_ammo_crate : "Ammo Crate"
[
	AmmoType(choices) : "Ammo Type" : 0 =
	[
		0 : "Pistol"
		1 : "SMG1"
		2 : "AR2"
		3 : "RPG Rounds"
		4 : "Buckshot"
		5 : "Grenades"
		6 : "357"
		7 : "XBowBolt"
		8 : "AR2 Alt-Fire Round"
		9 : "SMG Alt-Fire grenade"
	]

	// Inputs
	input Kill(void) : "Remove the ammo crate"
	output OnUsed(void) : "Fires when +used by the player."
]

@PointClass base(BasePropPhysics, Targetname, Angles, DamageFilter, BaseFadeProp) studio("models/items/item_item_crate.mdl") = item_item_crate : "Item Crate"
[
	CrateType(choices) : "Crate Contains" : 0 =
	[
		0 : "Contains specified item"
	]


	CrateAppearance(choices) : "Crate Appearance" : 0 =
	[
		0 : "Default Appearance"
		1 : "Radar Beacon Crate"
	]

	ItemClass(pointentityclass) : "Item Type" : "item_dynamic_resupply" : "Class name of the entity to spawn when the crate is broken"
	ItemCount(integer) : "Item Count" : 1 : "Number of items to emit upon breakage"
	SpecificResupply(target_destination) : "Specific resupply" : "" : "If item type is item_dynamic_resupply, specify a specific one to use instead of the master"

	// Inputs
	input Kill(void) : "Remove the item crate"
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	
	// Outputs
	output OnBreak(void) : "Fires when broken."
	output OnHealthChanged(float) : "Fires when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."

	output OnCacheInteraction(void) : "This output fires when the player proves they have 'found' this crate. Fires on: Picked up by +USE, Picked up by Physcannon, Punted by Physcannon, Broken."
]

@PointClass base(Targetname, Angles, BaseFadeProp) studio( "models/props_combine/health_charger001.mdl" ) = item_healthcharger : "Health Charger"
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	// Outputs
	output OutRemainingHealth(float) : "Remaining Health."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

@PointClass base(Targetname, Angles, BaseFadeProp) studio( "models/props_combine/suit_charger001.mdl" ) = item_suitcharger : "Battery recharger"
[
	// dmdelay(integer) : "Deathmatch recharge delay" : 0
	_minlight(string) : "Minimum light level"

	spawnflags(flags) =
	[
		8192  : "Citadel recharger" : 0
		16384 : "Kleiner's recharger" : 0
	]

	// Inputs
	input Recharge(void) : "Recharge to full"

	// Outputs
	output OutRemainingCharge(float) : "Remaining Charge."
	output OnHalfEmpty(void) : "Half-Empty"
	output OnEmpty(void) : "Empty"
	output OnFull(void) : "Recharged to full."
	output OnPlayerUse(void) : "Fired when the player +USEs the charger."
]

//-------------------------------------------------------------------------
//
// Weapons
//
//-------------------------------------------------------------------------
@PointClass base(Weapon) studio("models/weapons/w_crowbar.mdl") = weapon_crowbar : "Crowbar" []
@PointClass base(Weapon) studio("models/weapons/w_stunbaton.mdl") = weapon_stunstick : "StunStick" []
@PointClass base(Weapon) studio("models/weapons/w_pistol.mdl") = weapon_pistol : "Pistol" []
@PointClass base(Weapon) studio("models/weapons/w_irifle.mdl") = weapon_ar2 : "Assault Rifle 2" []
@PointClass base(Weapon) studio("models/weapons/w_rocket_launcher.mdl") = weapon_rpg : "Missile Launcher" []
@PointClass base(Weapon) studio("models/weapons/w_smg1.mdl") = weapon_smg1 : "SMG1" []
@PointClass base(Weapon) studio("models/weapons/w_357.mdl") = weapon_357 : "357" []
@PointClass base(Weapon) studio("models/weapons/w_crossbow.mdl") = weapon_crossbow : "Crossbow" []
@PointClass base(Weapon) studio("models/weapons/w_shotgun.mdl") = weapon_shotgun : "Shotgun" []
@PointClass base(Weapon) studio("models/weapons/w_grenade.mdl") = weapon_frag : "Frag Grenade" []
@PointClass base(Weapon) studio("models/weapons/w_physics.mdl") = weapon_physcannon : "Physics Cannon" []
@PointClass base(Weapon) studio("models/weapons/w_bugbait.mdl") = weapon_bugbait: "Bug bait" []
@PointClass base(Weapon) studio("models/weapons/W_Alyx_Gun.mdl") = weapon_alyxgun: "Alyx Gun" []
@PointClass base(Weapon) studio("models/weapons/W_annabelle.mdl") = weapon_annabelle: "Annabelle (Grigori)" []
@PointClass base(Weapon) studio("models/w_crowbar.mdl") = weapon_crowbar_hl1 : "Crowbar" []
@PointClass base(Weapon) studio("models/w_9mmAR.mdl") = weapon_mp5 : "9mm Assault Rifle" []
@PointClass base(Weapon) studio("models/w_9mmhandgun.mdl") = weapon_glock : "9mm Handgun" []
@PointClass base(Weapon) studio("models/w_357.mdl") = weapon_357_hl1 : "357 Handgun" []
@PointClass base(Weapon) studio("models/w_shotgun.mdl") = weapon_shotgun_hl1 : "Shotgun" []
@PointClass base(Weapon) studio("models/w_rpg.mdl") = weapon_rpg_hl1 : "RPG" []
@PointClass base(Weapon) studio("models/w_gauss.mdl") = weapon_gauss : "Gauss Gun" []
@PointClass base(Weapon) studio("models/w_crossbow.mdl") = weapon_crossbow_hl1 : "Crossbow" 
[
	sequence(choices) : "Placement" : 0 =
	[
		0 : "Normal (flat)"
		1 : "Realistic (tilted)"
	]
]
@PointClass base(Weapon) studio("models/w_egon.mdl") = weapon_egon : "Egon Gun" []
@PointClass base(Weapon) studio("models/w_tripmine.mdl") = weapon_tripmine : "Tripmine Ammo" []
@PointClass base(Weapon) studio("models/w_satchel.mdl") = weapon_satchel : "Satchel Charge Ammo" []
@PointClass base(Weapon) studio("models/w_grenade.mdl") = weapon_handgrenade : "Handgrenade Ammo" []
@PointClass base(Weapon) studio("models/w_SQKNEST.mdl") = weapon_snark : "Squeak Grenade" []
@PointClass base(Weapon) studio("models/w_hgun.mdl") = weapon_hornetgun : "Hornet Gun" []
@PointClass studio("models/weaponbox.mdl") =  weaponbox : "Weapon/Ammo Container" []

@PointClass base(Weapon) = world_items : "World Items" 
[
	type(choices) :"types" : 42 =
	[
		42: "Antidote"
		43: "Security Card"
		44: "Battery"
		45: "Suit"
	]
]


@SolidClass base(Trigger) = trigger_rpgfire :
	"A volumetric trigger that triggers whenever an RPG is fired within it."
[
	// Outputs
	output OnTrigger(void) : "Fires while the trigger is activated"
]

@SolidClass base(Trigger) = trigger_vphysics_motion :
	"A volumetric trigger that affects the motion of vphysics objects that touch it."
[
	spawnflags(Flags) =
	[
		4096 : "Can move (through hierarchical attachment)" : 0
	]

	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	
	SetGravityScale(float) : "Scale gravity of objects in the field." : "1.0"
	input SetGravityScale(float) : "Scale gravity of objects in the field."

	SetAdditionalAirDensity(float) : "Additional air density for drag" : "0"
	input SetAdditionalAirDensity(float) : "Additional air density for drag"

	SetVelocityLimit(float) : "Max velocity in field (0 disables)" : "0.0"
	input SetVelocityLimit(float) : "Max velocity in field."

	SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second when it exceeds the velocity limit (0 disables)" : "0.0"
	input SetVelocityLimitDelta(float) : "Max amount to reduce velocity per second"

	input SetVelocityLimitTime(string) : "Accepts two arguments: the first is the new velocity limit, the second is the time it takes to ramp to that value"

	SetVelocityScale(float) : "Velocity scale/drag" : "1.0"
	input SetVelocityScale(float) : "Velocity scale/drag"

	SetAngVelocityLimit(float) : "Max angular velocity in field (degrees/s, 0 disables)" : "0.0"
	input SetAngVelocityLimit(float) : "Max angular velocity in field."

	SetAngVelocityScale(float) : "Angular Velocity scale/drag" : "1.0"
	input SetAngVelocityScale(float) : "Angular Velocity scale/drag"

	SetLinearForce(float) : "Linear force (0 disables)" : "0.0"
	input SetLinearForce(float) : "Linear force (0 disables)"

	SetLinearForceAngles(angle) : "Direction of linear force (Pitch Yaw Roll (Y Z X))" : "0 0 0"
//	input SetLinearForceAngles(angle) : "Direction of linear force (Pitch Yaw Roll (Y Z X))"

	ParticleTrailMaterial(string) : "Particle Trail Material" : : "Name of a material to use for the particle trail, no name means no particle trail"
	ParticleTrailLifetime(float) : "Particle Trail Lifetime" : 4 : "Lifetime of the particles to emit"
	ParticleTrailStartSize(float) : "Particle Trail Starting Sprite Size" : 2 : "Starting size of the sprite to emit"
	ParticleTrailEndSize(float) : "Particle Trail Ending Sprite Size" : 3 : "Ending size of the sprite to emit"

	// Inputs
	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
	input	Toggle(void) : "Toggle enable/disable."
]

@PointClass base(Targetname) size( 16 16 16) sphere() color( 255 255 0 ) = point_bugbait : "Bugbait sensor point"
[
	Enabled(choices) : "Start Enabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) =
	[
		1: "Do not call antlions to position" : 0
		2: "Don't activate on thrown bugbait splashes" : 0
		4: "Don't activate on squeezed bugbait" : 0
	]

	radius(integer) : "Sensor Radius" : 512

	// Inputs
	input	Enable(void) : "Enable the sensor."
	input	Disable(void): "Disable the sensor."
	input	Toggle(void) : "Toggle the sensor."

	// Outputs
	output OnBaited(void) : "Fires when bugbait lands within a radius of the sensor"
]

@PointClass base(Weapon) = weapon_brickbat : "Brickbat"
[
	BrickbatType(choices) : "BrickbatType" : "Rock" =
	[
		0 : "Rock"
		1 : "Beer Bottle"
		2 : "Headcrab"
		3 : "Cremator Head"
	]
]


@PointClass base(Targetname, Angles) size(16 16 16) line(255 255 255, targetname, target) color(247 181 82) = path_corner : "Generic path point"
[
	spawnflags(Flags) =
	[
		1: "Wait for retrigger" : 0
		2: "Teleport to THIS path_corner" : 0
	]
	target(target_destination) : "Next stop target"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0

	// Inputs 
	input SetNextPathCorner(string) : "Sets next pathcorner"

	// Outputs
	output OnPass(void) : "Fires when a path follower passes this point"
]

@PointClass base(Targetname) size(16 16 16) color(255 0 0) = path_corner_crash : "Helicopter Crash Path"
[
	target(target_destination) : "Next stop target"
]


//-------------------------------------------------------------------------
//
// Player effects
//
//-------------------------------------------------------------------------

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_loadsaved : "Load Auto-Saved game" 
[
	duration(string) : "Fade Duration (seconds)" : "2"
	holdtime(string) : "Hold Fade (seconds)" : "0"
	renderamt(integer) : "Fade Alpha" : 255
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"
	loadtime(string) : "Reload delay" : "0"

	// Inputs
	input Reload(void) : "Ends this game and reloads"
]


@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_weaponstrip : "Strips player's weapons"
[
	// Inputs
	input Strip(void) : "Strip player's weapons"
	input StripWeaponsAndSuit(void) : "Strip player's weapons and his suit"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = player_speedmod: "Speeds up or slows down player velocity over time (slow mo/fast forward)"
[
	spawnflags(Flags) =
	[
		1: "Suppress weapons" : 0
		2: "Suppress HUD" : 0
		4: "Suppress jump" : 0
		8: "Suppress duck" : 0
		16: "Suppress use" : 0
		32: "Suppress sprint" : 0
		64: "Suppress attack" : 0
		128: "Suppress zoom" : 0
	]

	// Inputs
	input ModifySpeed(float) : "Modifies player speed by X ammount."
]



//-------------------------------------------------------------------------
//
// Logic Entities
//
//-------------------------------------------------------------------------
@PointClass color(0 0 255) base(Targetname) iconsprite("editor/choreo_scene.vmt") = logic_choreographed_scene :
	"Manages a choreographed scene of one or more actors."

[
	// Keys
	SceneFile(scene) : "Scene file"

	// Links
	target1(target_destination) : "Target 1"
	target2(target_destination) : "Target 2"
	target3(target_destination) : "Target 3"
	target4(target_destination) : "Target 4"
	target5(target_destination) : "Target 5"
	target6(target_destination) : "Target 6"
	target7(target_destination) : "Target 7"
	target8(target_destination) : "Target 8"

	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this scene needs is already talking when this scene is told to start." =
	[
		0: "Start immediately"
		1: "Wait for actor to finish"
		2: "Interrupt at next interrupt event"
		3: "Cancel at next interrupt event"
	]

	// Inputs
	input Start(void) : "Starts playback of the scene file"
	input Pause(void) : "Pauses playback of the scene file"
	input Resume(void) : "Resumes playback of the scene if it has been paused"
	input Cancel(void) : "Cancels playback of the scene"
	input CancelAtNextInterrupt(void) : "Cancels playback of the scene at the next interrupt event in the scene."
	input PitchShift(float) : "Multiplies the the pitch"

	input InterjectResponse(string) : "Finds an actor who can respond to the specified concept string while the scene continues playing"

	input StopWaitingForActor(void) : "Stop waiting on an actor to stop talking."

	// Outputs
	output OnStart(void) : "The scene has started"
	output OnCompletion(void) : "The scene has completed"
	output OnCanceled(void) : "The scene has been canceled"
	output OnTrigger1(void) : "Scene trigger 1"
	output OnTrigger2(void) : "Scene trigger 2"
	output OnTrigger3(void) : "Scene trigger 3"
	output OnTrigger4(void) : "Scene trigger 4"
	output OnTrigger5(void) : "Scene trigger 5"
	output OnTrigger6(void) : "Scene trigger 6"
	output OnTrigger7(void) : "Scene trigger 7"
	output OnTrigger8(void) : "Scene trigger 8"
	output OnTrigger9(void) : "Scene trigger 9"
	output OnTrigger10(void) : "Scene trigger 10"
	output OnTrigger11(void) : "Scene trigger 11"
	output OnTrigger12(void) : "Scene trigger 12"
	output OnTrigger13(void) : "Scene trigger 13"
	output OnTrigger14(void) : "Scene trigger 14"
	output OnTrigger15(void) : "Scene trigger 15"
	output OnTrigger16(void) : "Scene trigger 16"

	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
]

@PointClass base(Targetname) iconsprite("editor-fc/logic_merchant_relay") = logic_merchant_relay : "Usefull for entity based merchants."
[

    StartDisabled(choices) : "Start Disabled?" : 0 =
    [
        0 : "No"
        1 : "Yes"
    ]

    IsShared(choices) : "Is Shared?" : 0 : "Can all players chip in to buy this?" =
    [
        0 : "No"
        1 : "Yes"
    ]

    AnnounceCashNeeded(choices) : "Announce Cash Needed?" : 1 : "Tell the players how much cash they still need to purchase?" =
    [
        0 : "No"
        1 : "Yes"
    ]

    purchasesound(sound) : "Purchase Sound" : "" : "Name of the GameSound entry for the sound to play on purchase. Also supports direct .wav filenames."
    CostOf(integer) : "Cost of Purchase" : 5
	CostType(choices) : "CostType" : 0 : "Type of currency to use" =
	[
		0 : "Currency"
		1 : "Frags"
	]
    MaxPointsTake(integer) : "Max Points to take ( Shared Only )" : 0 : "How many points should be taken from the player when they input purchase? 0 Means as much as needed."
    PurchaseName(string) : "Name of Purchase" : "A New Car!" : "Name of the purchase, which will appear in relay messages from this entity."

    // Inputs
    input SetPurchaseCost(integer) : "Sets the cost of the purchase."
    input SetPurchaseName(string) : "Sets the name of the purchase."
    input Purchase(void) : "Purchases item, or puts points towards a purchase if shared."
    input Enable(void) : "Enables this entity."
    input Disable(void) : "Disables this entity from use."

    // Outputs
    output OnPurchased(void) : "Fired when purchase is successful. Usefull for spawning your custom purchase."
    output OnNotEnoughCash(void) : "Fired when the non-shared item is too expensive for the player."
    output OnCashReduced(void) : "Fired when the shared items price has lowered from chip-ins."
    output OnDisabled(void) : "Fired when purchase input has been given, but the relay is disabled."
]

@PointClass color(0 0 255) base(Targetname) iconsprite("editor/choreo_manager.vmt") = logic_scene_list_manager :
	"Manages a list of logic_choreographed_scene entities. Store choreo scenes in them in order that they will be played by other inputs. Whenever a scene plays, the manager will remove all scenes before that one in the list. The name of another logic_scene_list_manager can be entered in a slot instead of an invididual scene, which will cause all scenes in that manager to be removed when a later scene in this list is played."
[
	scene0(target_destination) : "Scene 1" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene1(target_destination) : "Scene 2" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene2(target_destination) : "Scene 3" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene3(target_destination) : "Scene 4" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene4(target_destination) : "Scene 5" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene5(target_destination) : "Scene 6" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene6(target_destination) : "Scene 7" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene7(target_destination) : "Scene 8" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene8(target_destination) : "Scene 9" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene9(target_destination) : "Scene 10" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene10(target_destination) : "Scene 11" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene11(target_destination) : "Scene 12" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene12(target_destination) : "Scene 13" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene13(target_destination) : "Scene 14" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene14(target_destination) : "Scene 15" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."
	scene15(target_destination) : "Scene 16" : "" : "The name of a logic_choreographed_scene, or logic_scene_list_manager."

	// Inputs
	input Shutdown(void) : "Remove the manager and all scenes referenced by it (and all scenes referenced by logic_scene_list_manager's embedded in this one)."
]

@PointClass base(Targetname, Parentname) sphere(volume) iconsprite("editor/ai_sound.vmt") = ai_sound :
	"This entity makes sounds or smells that can be sensed by NPCs, butnot by the player. This can be used " +
	"to cause reactions in nearby NPCs.\n\n" +
	"Sound Types\n" +
	"  Combat: Will cause most NPCs to become alert\n" +
	"  World: Will cause most NPCs to become alert\n" +
	"  Danger: Will cause most NPCs to move away from the position of the sound\n" +
	"  Bullet Impact: \n" +
	"  Carcass: \n" +
	"  Meat: \n" +
	"  Garbage: \n" +
	"  Thumper: causes antlions to run away briefly\n" +
	"  Readiness: (Low, Medium, High) Causes player companions that can hear this sound to change readiness\n"
[
	//input InsertSound(Integer) : "THIS IS NOW OBSOLETE. Use InsertAISound"
	input EmitAISound(void) : "Make the sound."

	volume(integer) : "Volume" : 120 : "How far away this sound can be heard. This is a radius."
	duration(float) : "Duration" : "0.5" : "How long the sound persists each time you insert it."

	soundtype(choices) : "Sound Type" : 0 : "The type of sound or smell will determine the reaction of NPCs that sense it." =
	[
		0: "Select one"
		1: "Combat"
		2: "World"
		//4: "Player (Don't use)"
		8: "Danger"
		16: "Bullet Impact"
		32: "Carcass"
		64: "Meat"
		128: "Garbage"
		256: "Thumper"
		4096: "Move Away - Most NPCs will clear the radius of this sound when heard."
		16384 : "Readiness - Low"
		32768 : "Readiness - Medium"
		65536 : "Readiness - High"
	]

	soundcontext(choices) : "Additional sound context (optional)" : 0 : "Optional settings specifying such things as who can or cannot hear the sound." =
	[
		0 : "Select one"
		8388608 : "Only Combine hear"
		67108864 : "Combine cannot hear"
	]

	locationproxy(target_destination) : "Location Proxy" : "" : "The name of an entity to use as a proxy to determine the location at which to make the sound. If you specify an entity here, the sound will be made at that entity's location (!player included)" 
]


@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) = env_rotorwash : "Rotorwash Effect"
[
	spawnflags(Flags) =
	[
		1 : "Ignore solid" : 0
	]

	input DoEffect(Void) : "Make a rotor puff"
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) studio("models/props_combine/combine_mine01.mdl") = combine_mine : "Combine Land Mine"
[
	bounce(choices) : "Bounce" : 1 : "Whether the mine should bounce up in the air before exploding." =
	[
		0: "No"
		1: "Yes"
	]

	LockSilently(choices) : "Lock Silently" : 1 : "If yes, mine plays no sound when clamps close" =
	[
		0: "No"
		1: "Yes"
	]

	StartDisarmed(choices) : "Start Disarmed" : 0 : "If yes, mine begins dormant." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	Modification(choices): "Citizen modified" : 0 : "'Normal' is default Combine behavior. 'Cavern' detonates earlier in its jump, and has a different default skin." = 
	[
		0 : "Normal"
		1 : "Cavern"
	]

	// Inputs
	input Disarm(void) : "Disarm this mine (open hooks and shut off) if not placed by player."

	// Outputs
	output OnPulledUp(void) : "Fires when this mine is uprooted with physgun"
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname) = env_ar2explosion :
	"AR2 explosion visual effect. Big, volume-filling brown cloud. Does not cause damage or emit sound."
[
	input Explode(Void) : "Make the explosion effect."
	material(material) : "Particle Material" : "particle/particle_noisesphere" : "The material to use for each particle in the explosion."
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname) = env_starfield : "Starfield effect" 
[
	input TurnOn(void) : "Turn on"
	input TurnOff(void) : "Turn off"
	input SetDensity(float) : "Set the density of the starfield. It's a multiplier, so 1 is the default."
]

@PointClass size( -4 -4 -4, 4 4 4 ) base(Targetname, Parentname, Angles) = env_flare : "Flare"
[
	scale(float) : "Scale" : 1
	duration(float) : "Duration" : 30
	
	spawnflags(Flags) =
	[
		1 : "No DLight" : 0
		2 : "No Smoke" : 0
		4 : "Infinite" : 0
		8 : "Start off" : 0
	]

	input Start(float) : "Starts the flare burning. The flare will burn for the specified number of seconds (0 = infinite)."
	input Die(float) : "Causes the flare to fade out over the specified number of seconds, and then die (0 = die instantly)."
	input Launch(float) : "Launch the flare forward with the specified speed."
]


@PointClass base(Targetname, Parentname, Angles) = env_muzzleflash : "Muzzle Flash" 
[
	parentattachment(string) : "Parent Attachment" : "" : "The name of an attachment on the parent to hierarchically attach to."
	scale(float) : "Scale" : "1" : "Size of the muzzle flash."
	
	input Fire(void) : "Fires the effect once."
]


@PointClass base(Targetname, Parentname) size(-4 -4 -4, 4 4 4) color(0 180 0) = env_terrainmorph : 
	"Morphs terrain by pulling vertices along a normal.\n\n" +
	"Place this entity the desired distance from a terrain surface and set ANGLES " +
	"to the normal along which you want to pull the surface's vertices. If you set the INSTANT spawnflag, " +
	"the morph will take place instantly instead of over time.\n"
[
	startradius( integer ) : "Start Radius" : 500 : "Radius of the effect when morphing begins. Only this value is used" +
													"if the effect is flagged to occur instantly."
	goalradius( integer ) : "Goal Radius" : 100 : "Radius of the effect at the end of morphing. The radius of this effect will change from "+
												  "Start Radius to Goal Radius over the duration of this effect. This value is ignored if the effect is flagged to occur instantly."

	duration( integer ) : "Duration" : 3 : "The morph will take place over this period of time (seconds). Ignored if flagged to occur instantly"

	fraction( integer ) : "Displacement Fraction" : 1 : "If set to 1, the terrain surface will be pulled exactly to this entity's position." +
														" If set to 0.5, the surface will be pulled exactly half way to this entity's position. " +
														"If set to 2, the surface will be pulled to an imaginary point twice as far away as this entity. " +
														"(Any Displacement Fraction greater than 1.0 will result in clipping. The surface cannot be pulled beyond " +
														"This entity's position and any vertices attemping will clip to this entity's position. You may use this feature to create mesas.)"

	// Inputs
	input BeginMorph(void) : "Begin Morph"

	spawnflags(flags) =
	[
		1: "Instant" : 0 
	]
]

@PointClass base(Targetname, EnableDisable) = logic_achievement :
	"Sends an achievement system related event from the map to the achievement system."
[
	//keyvalues
	
	AchievementEvent(choices) : "Achievement Event" : 0 : "Named event is sent to the achievement system when this entity receives a 'FireEvent' input." =
	[
		"ACHIEVEMENT_EVENT_HL2_HIT_CANCOP_WITHCAN"				: "[HL2] Hit the trashcan cop with the can."
		"ACHIEVEMENT_EVENT_HL2_PUT_CANINTRASH"					: "[HL2] Put the can in the trash."
		"ACHIEVEMENT_EVENT_HL2_ESCAPE_APARTMENTRAID"			: "[HL2] Escape the apartment block raid."
		"ACHIEVEMENT_EVENT_HL2_BREAK_MINITELEPORTER"			: "[HL2] Break the mini-teleporter in Kleiner's lab."
		"ACHIEVEMENT_EVENT_HL2_GET_CROWBAR"						: "[HL2] Get the crowbar."
		"ACHIEVEMENT_EVENT_HL2_GET_AIRBOAT"						: "[HL2] Get the Airboat"
		"ACHIEVEMENT_EVENT_HL2_GET_AIRBOATGUN"					: "[HL2] Get the airboat's mounted gun."
		"ACHIEVEMENT_EVENT_HL2_FIND_VORTIGAUNTCAVE"				: "[HL2] Discover the hidden singing vortigaunt cave in chapter Water Hazard."
		"ACHIEVEMENT_EVENT_HL2_KILL_CHOPPER"					: "[HL2] Destroy the hunter-chopper in Half-Life 2."
		"ACHIEVEMENT_EVENT_HL2_FIND_HEVFACEPLATE"				: "[HL2] Find the HEV Suit Charger faceplate in Eli's scrapyard."
		"ACHIEVEMENT_EVENT_HL2_GET_GRAVITYGUN"					: "[HL2] Get the Gravity Gun in Black Mesa East"
		"ACHIEVEMENT_EVENT_HL2_MAKEABASKET"						: "[HL2] Make a basket in Eli's scrapyard."
		"ACHIEVEMENT_EVENT_HL2_BEAT_RAVENHOLM_NOWEAPONS_START"	: "[HL2] Beat Ravenholm Gravgun only. (Start)."
		"ACHIEVEMENT_EVENT_HL2_BEAT_RAVENHOLM_NOWEAPONS_END"	: "[HL2] Beat Ravenholm Gravgun only. (End)."
		"ACHIEVEMENT_EVENT_HL2_BEAT_CEMETERY"					: "[HL2] Escort Gregori safely through the church cemetery."
		"ACHIEVEMENT_EVENT_HL2_KILL_ENEMIES_WITHCRANE"			: "[HL2] Kill 3 enemies using the crane."
		"ACHIEVEMENT_EVENT_HL2_PIN_SOLDIER_TOBILLBOARD"			: "[HL2] Pin the soldier to the billboard with the crossbow in chapter Highway 17."
		"ACHIEVEMENT_EVENT_HL2_KILL_ODESSAGUNSHIP"				: "[HL2] Defend Little Odessa from the gunship attack."
		"ACHIEVEMENT_EVENT_HL2_BEAT_DONTTOUCHSAND"				: "[HL2] Cross the antlion beach in chapter Sandtraps without touching the sand."
		"ACHIEVEMENT_EVENT_HL2_ENTER_NOVAPROSPEKT"				: "[HL2] Get inside Nova Prospekt"
		"ACHIEVEMENT_EVENT_HL2_BEAT_TURRETSTANDOFF2"			: "[HL2] Survive the second turret standoff in the prison."
		"ACHIEVEMENT_EVENT_HL2_FOLLOWFREEMAN"					: "[HL2] Gain command of a squad of rebels in the uprising"
		"ACHIEVEMENT_EVENT_HL2_BEAT_TOXICTUNNEL"				: "[HL2] Get through the toxic tunnel under City 17 in Half-Life 2."
		"ACHIEVEMENT_EVENT_HL2_BEAT_PLAZASTANDOFF"				: "[HL2] Survive the Generator Plaza standoff in chapter Anticitizen One."
		"ACHIEVEMENT_EVENT_HL2_KILL_ALLC1709SNIPERS"				: "[HL2] Kill all of the snipers in City 17."
		"ACHIEVEMENT_EVENT_HL2_BEAT_SUPRESSIONDEVICE"			: "[HL2] Shut down the supression device by disabling its generators."
		"ACHIEVEMENT_EVENT_HL2_BEAT_C1713STRIDERSTANDOFF"			: "[HL2] Survive the rooftop strider battle in the ruins of City 17."
		"ACHIEVEMENT_EVENT_HL2_BEAT_GAME"						: "[HL2] Destroy the Citadel's reactor core (Beat Game)."

		"ACHIEVEMENT_EVENT_HL2_GMAN_KLEINERSLAB"				: "[HL2] G-Man: trainstation_05 on Kleiner's Monitor"
		"ACHIEVEMENT_EVENT_HL2_GMAN_TRAINCAR"					: "[HL2] G-Man: canals_01 on TV in vort train car"
		"ACHIEVEMENT_EVENT_HL2_GMAN_REDBARN"					: "[HL2] G-Man: canals_06 at the red barn"
		"ACHIEVEMENT_EVENT_HL2_GMAN_OUTDOORMONITOR"				: "[HL2] G-Man: canals_06 on giant outdoor monitor"
		"ACHIEVEMENT_EVENT_HL2_GMAN_CATWALK"					: "[HL2] G-Man: canals_12 on catwalk"
		"ACHIEVEMENT_EVENT_HL2_GMAN_DAM"					: "[HL2] G-Man: canals_13 to the left of the dam"
		"ACHIEVEMENT_EVENT_HL2_GMAN_TRAINTRACKS"				: "[HL2] G-Man: town_05 at the end of the tracks"
		"ACHIEVEMENT_EVENT_HL2_GMAN_ODESSA"					: "[HL2] G-Man: coast_03 odessa meeting"
		"ACHIEVEMENT_EVENT_HL2_GMAN_PRISONMONITOR"				: "[HL2] G-Man: prison_02 control room monitor"
		"ACHIEVEMENT_EVENT_HL2_GMAN_FOYERTV"					: "[HL2] G-Man: c17_02 on TV in the destroyed foyer"
		
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_KLEINERSLAB"			: "[HL2] Lamda: Secret entrance to Kleiner's lab in trainstation_05"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALSSTATION"		: "[HL2] Lamda: canals_01 building by tracks"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_VENTCRAWL"			: "[HL2] Lamda: canals_01 vent crawl"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALSTUNNEL"			: "[HL2] Lamda: canals_01a tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SEWERGRATE"			: "[HL2] Lamda: canals_02 below grate in sewer corridor"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STEAMPIPE"			: "[HL2] Lamda: canals_03 under steam pipe"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CURVEDROOM"			: "[HL2] Lamda: canals_05 on second level of curved room"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SHANTYTOWN"			: "[HL2] Lamda: canals_05 before shanty town"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_TUNNELLADDER"			: "[HL2] Lamda: canals_06 on overhead metal walkway in tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_REDBARN"			: "[HL2] Lamda: canals_06 at the red barn"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_FLOATINGRAMP"			: "DON'T USE ME [HL2] Lamda: canals_06 outside the pipe at floating ramp puzzle"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_ZOMBIEAMBUSH"			: "[HL2] Lamda: canals_06 outside exploded tanker (zombie ambush)"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BELOWAPCS"			: "[HL2] Lamda: canals_07 in the wall below apcs"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COUNTERWEIGHT"		: "[HL2] Lamda: canals_08 in counterweighted basket"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAILWAYBRIDGE"		: "[HL2] Lamda: canals_08 behind railway bridge piling"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_TUNNELPLATFORMS"		: "[HL2] Lamda: canals_09 on wooden platforms in tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BANKEDCANAL"			: "[HL2] Lamda: canals_10 up banked side of canals passage"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CANALWALL"			: "[HL2] Lamda: canals_10 in wall opening after canals passage"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CHANNELSPLIT"			: "[HL2] Lamda: canals_12 right side of split channel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_BMEDOCK"				: "[HL2] Lamda: eli_01 Black Mesa East dock"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GENERATORS"			: "[HL2] Lamda: town_01 through ductwork behind generators"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CARCRUSHERARENA"		: "[HL2] Lamda: town_01 behind fence in car-crusher arena"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAVENHOLMATTIC"		: "[HL2] Lamda: town_01a in attic opposite map exit"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_MINETUNNELEXIT"		: "[HL2] Lamda: town_05 tunnel exit from ravenholm mine"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COASTSHACK"			: "[HL2] Lamda: coast_01 shack after the buggy jump"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONSHACK"			: "[HL2] Lamda: coast_03 poison headcrab shack"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GUNSHIPVAN"			: "[HL2] Lamda: coast_04 broken down van after the gunship"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SUICIDECITIZEN"		: "[HL2] Lamda: coast_05 suicide citizen's gas tank cache"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_RAILROADSHACK"		: "[HL2] Lamda: coast_07 fenced off area outside of town"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_COASTABOVEBATTERY"		: "[HL2] Lamda: coast_09 above the bathroom in the battery puzzle building"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SANDSHACK"			: "[HL2] Lamda: coast_11 elevated shack after the board bridge"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_GMANCACHE"			: "[HL2] Lamda: prison_02 in the boarded up area of the gman sighting"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_CELLCACHE"			: "[HL2] Lamda: prison_03 in the prison cell"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONLAUNDRY"		: "[HL2] Lamda: prison_05 in the laundry utility room"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SODAMACHINE"			: "[HL2] Lamda: prison_06 on top of the soda machine"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARDOGWALL"		: "[HL2] Lamda: c17_02 next to first Combine wall"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARSHACK"		: "[HL2] Lambda: c17_04 inside shack before metrocop holdout"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_STREETWARFENCE"		: "[HL2] Lamda: c17_05 behind fence before end of map"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_FREEWAYTUNNEL"		: "[HL2] Lamda: c17_06a at start of freeway tunnel"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_DRAWBRIDGE"			: "[HL2] Lamda: c17_06b before second drawbridge"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_PLAZAFENCE"			: "[HL2] Lamda: c17_06b behind fence before end of map"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_SEWERSCATWALKS"		: "[HL2] Lamda: c17_08 lowest catwalk at sewer entrance"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_POISONZOMBIEALCOVE"	: "[HL2] Lamda: c17_08 wall cubby next to poison zombie"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_PIPEHOPTUNNEL"		: "[HL2] Lamda: c17_08 end of pipe hop tunnel by poison zombie"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_EXITCATWALK"		: "[HL2] Lamda: c17_08 side of building next to hallway leading to level exit"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_ENDOFC1712B"			: "[HL2] Lamda: c17_12b at map exit"
		"ACHIEVEMENT_EVENT_HL2_LAMDACACHE_WHITEVAN"				: "[HL2] Lamda: c17_13 white van in underground garage"
		


		"ACHIEVEMENT_EVENT_EP1_BEAT_MAINELEVATOR"						: "[EP1] Reach the bottom of the main elevator shaft."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_START"						: "[EP1] Contain the citadel core. (start)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_END"						: "[EP1] Contain the citadel core. (end)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE"						: "[EP1] Contain the citadel core."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITADELCORE_NOSTALKERKILLS"					: "[EP1] Contain the citadel core with no stalker kills"
		"ACHIEVEMENT_EVENT_EP1_BEAT_GARAGEELEVATORSTANDOFF"					: "[EP1] Survive long enough to get on the elevator in the parking garage."
		"ACHIEVEMENT_EVENT_EP1_BEAT_HOSPITALATTICGUNSHIP"					: "[EP1] Destroy the gunship in the hospital attic."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITIZENESCORT_NOCITIZENDEATHS_START"	: "[EP1] Don't let any citizens die when escorting them to the escape train (start)."
		"ACHIEVEMENT_EVENT_EP1_BEAT_CITIZENESCORT_NOCITIZENDEATHS_END"		: "[EP1] Don't let any citizens die when escorting them to the escape train (end)."
		"ACHIEVEMENT_EVENT_EP1_BEAT_GAME_NOHEALTHPICKUPS_START"				: "[EP1] Beat EP1 without picking up any health. (start)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_GAME_NOHEALTHPICKUPS_END"				: "[EP1] Beat EP1 without picking up any health. (end)"

		"ACHIEVEMENT_EVENT_EP1_START_GAME"						: "[EP1] Began EP1 (for tracking One Free Bullet)"
		"ACHIEVEMENT_EVENT_EP1_BEAT_GAME"						: "[EP1] Beat EP1 (for tracking One Free Bullet)"



		"ACHIEVEMENT_EVENT_EP2_BEAT_ANTLIONINVASION"				: "[EP2] Hold off the antlion invasion inside the mine shaft"
		"ACHIEVEMENT_EVENT_EP2_BEAT_ANTLIONGUARDS"					: "[EP2] Defeat both antlion guards outside the White Forest"
		"ACHIEVEMENT_EVENT_EP2_BEAT_HUNTERAMBUSH"					: "[EP2] Survive the Hunter ambush at the radio tower."

		"ACHIEVEMENT_EVENT_EP2_KILL_CHOPPER_NOMISSES_START"					: "[EP2] Start of the chopper arena battle."
		"ACHIEVEMENT_EVENT_EP2_KILL_CHOPPER_NOMISSES_END"					: "[EP2] End of the chopper arena battle."

		"ACHIEVEMENT_EVENT_EP2_KILL_COMBINECANNON"					: "[EP2] Destroy the Combine Cannon in the junkyard."
		"ACHIEVEMENT_EVENT_EP2_BEAT_RACEWITHDOG"					: "[EP2] Beat DOG in the race to the White Forest."
		"ACHIEVEMENT_EVENT_EP2_BEAT_ROCKETCACHEPUZZLE"				: "[EP2] Unlock the Rocket Launcher lambda cache in chapter Under The Radar."
		"ACHIEVEMENT_EVENT_EP2_BEAT_WHITEFORESTINN"					: "[EP2] Survive the invasion at White Forest Inn"
		"ACHIEVEMENT_EVENT_EP2_PUT_ITEMINROCKET"					: "[EP2] Send <some object from chapter 1> into space."
		"ACHIEVEMENT_EVENT_EP2_BEAT_MISSILESILO2"					: "[EP2] Secure the launch doors on missile silo 2."
		"ACHIEVEMENT_EVENT_EP2_BEAT_GAME" 						: "[EP2] Save the missile silo from the Combine offensive."
		"ACHIEVEMENT_EVENT_EP2_BEAT_OUTLAND12_NOBUILDINGSDESTROYED" : "[EP2] Save the missile silo without losing any buildings."

		"ACHIEVEMENT_EVENT_EP2_FIND_RADAR_CACHE"					: "[EP2] Found a radar cache in chapter Under The Radar."

		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_VAN"		: "[EP2] Radar Cache: 09 first van cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_RPG"		: "[EP2] Radar Cache: 09 rpg cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_SHACK"			: "[EP2] Radar Cache: 09 shack floor board cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_CAVE"			: "[EP2] Radar Cache: 10 cave cache"
		"ACHIEVEMENT_EVENT_EP2_RADARCACHE_HANGING"		: "[EP2] Radar Cache: 10 hanging crate cache"
		
				
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_01"		: "[EP2] Web Cache: ep2_outland_01a underwater cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_02"		: "[EP2] Web Cache: ep2_outland_03 grim pinata cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_03"		: "[EP2] Web Cache: ep2_outland_03 first arena exit tunnel wall cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_04"		: "[EP2] Web Cache: ep2_outland_03 second arena exit tunnel ceiling cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_05"		: "[EP2] Web Cache: ep2_outland_03 zombine grenade trap cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_06"		: "[EP2] Web Cache: ep2_outland_04 gear cave entry wall cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_07"		: "[EP2] Web Cache: ep2_outland_04 gear cave rockfall ceiling cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_08"		: "[EP2] Web Cache: ep2_outland_04 gear cave barnacle ceiling cache"
		"ACHIEVEMENT_EVENT_EP2_WEBCACHE_09"		: "[EP2] Web Cache: ep2_outland_04 gear cave poison crab wall cache"

		"ACHIEVEMENT_EVENT_PORTAL_GET_PORTALGUNS"					: "[PORTAL] Acquire the fully powered Aperture Science Handheld Portal Device."
		"ACHIEVEMENT_EVENT_PORTAL_KILL_COMPANIONCUBE"					: "[PORTAL] Do whatever it takes to survive."
		"ACHIEVEMENT_EVENT_PORTAL_ESCAPE_TESTCHAMBERS"					: "[PORTAL] Make the correct party escort submission position decision."
		"ACHIEVEMENT_EVENT_PORTAL_BEAT_GAME"					: "[PORTAL] Complete Portal."
	]

	// Inputs
	input Toggle(void) : "Toggle the relay between enabled and disabled."
	input FireEvent(void) : "Tells the achievement system the specifed event has occured."
	
	// Outputs
	output OnFired(void) : "When the event fires, this fires."
]


//-------------------------------------------------------------------------
//
// Camera/monitor entities
//
//-------------------------------------------------------------------------
@PointClass base(Parentname, Angles) studioprop("models/editor/camera.mdl") = point_camera : "Camera"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0 
	]

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	FOV(float) : "FOV" : 90 : "Field of view in degrees"
//	resolution(float) : "resolution" : 256 : "width/height of the render target for the camera"
	UseScreenAspectRatio(choices) : "Screen Aspect Ratio" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogEnable(choices) : "Fog Enable" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]	
	fogColor(color255) : "Fog Color" : "0 0 0"
	fogStart(float) : "Fog Start" : 2048 : "The near fog plane."
	fogEnd(float) : "Fog End" : 4096 : "The far fog/clipping plane."
	fogMaxDensity(float) : "Fog Max Density [0..1]" : 1 : "The maximum fog density. 0=no fog, 1=full fog."

	// Inputs
	input ChangeFOV(string) : "Changes camera's FOV over time"
	input SetOnAndTurnOthersOff(void) : "Turn the camera on, and turn all other cameras off."
	input SetOn(void) : "Turn the camera on."
	input SetOff(void) : "Turn the camera off."
]

@SolidClass base(func_brush) = func_monitor :
	"A monitor that renders the view from a given point_camera entity."
[
	target(target_destination) : "Camera name"
	
	// Inputs
	input Toggle(void) : "Toggle - If on, turn off, if off, turn on."
	input Enable(void) : "Enable."
	input Disable(void) : "Disable."
	input SetCamera(string) : "Sets the camera to use for this monitor. Takes the name of a point_camera entity in the map."
]

@SolidClass base(func_brush) = func_bulletshield :
	"A shield that stops only bullets."
[

]


//-------------------------------------------------------------------------
//
// Vehicles.
//
//-------------------------------------------------------------------------
@PointClass base(BaseVehicle) studioprop() = prop_vehicle :
	"Studiomodel vehicle that can be driven via inputs."
[
	// Inputs
	input Steer(float) : "Steer the vehicle +/-1"
	input Throttle(float) : "Throttle +/-1"

	spawnflags(flags) =
	[
		1 : "Always Think (Run physics every frame)" : 0
	]
]


@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_driveable :
	"Generic driveable studiomodel vehicle."
[
]

@PointClass base(Targetname, Angles) studio() = point_apc_controller : "APC Controller"
[
	spawnflags(flags) =
	[
		1 : "Active" : 0
	]

	yawrate(string) : "Yaw rate" : "30"
	yawtolerance(string) : "Yaw tolerance" : "15"
	pitchrate(string) : "Pitch rate" : "0"
	pitchtolerance(string) : "Pitch tolerance" : "20"
	rotatestartsound(sound) : "Rotate Start Sound" : ""
	rotatesound(sound) : "Rotate Loop Sound" : ""
	rotatestopsound(sound) : "Rotate Stop Sound" : ""
	minRange(string) : "Minmum target range" : "0"
	maxRange(string) : "Maximum target range" : "0"
	targetentityname(string) : "Name of entity I should follow/attack" : ""

	// Inputs
	input Activate(void) : "Turn the APC rockets on"
	input Deactivate(void) : "Turn the APC rockets off (go dormant)"

	// Outputs
	output OnFireAtTarget(void) : "Fires when a valid target is found and the APC should shoot rockets"
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_apc :
	"APC with mounted guns, can only be driven by a vehicle driver or a npc_apcdriver."
[
	missilehint(target_destination) : "Missile Hint Target" : "" : "Name of one or more info_apc_missile_hint entities to use to determine what to hit."
	
    //Inputs
    input FireMissileAt(target_destination) : "A target to fire a missile at"
	input Destroy(void) : "Causes the APC to blow up."

    // Outputs
	output OnFiredMissile(void) : "Fired when the APC shoots a missile."
	output OnDeath(void) : "Fired when the APC is killed."
	output OnDamaged(void) : "Fired when the APC is damaged."
	output OnDamagedByPlayer(void) : "Fired when the APC is damaged by the player."
]

@SolidClass base(Targetname, Origin, Angles, EnableDisable) = info_apc_missile_hint :
	"Something that helps APC missiles guide. If the missile can hit the associated target entity"+
	"between the time it takes the current enemy to enter + leave the hint, then the missile will guide to the entity."
[
	target(target_destination) : "Target Entity" : "" : "The entity that the missile will guide towards if the conditions are met."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_jeep :
	"Driveable studiomodel jeep."
[
	input StartRemoveTauCannon(void) : "Start the tau removal sequence."
	input FinishRemoveTauCannon(void) : "Finish the tau removal sequence."
	
	// FIXME: These will move into episodic
	input LockEntrance( void ) : "Stops NPC's from entering the vehicle until unlocked."
	input UnlockEntrance( void ) : "Allows NPC's to enter the vehicle."
	input LockExit( void ) : "Stops NPC's from exiting the vehicle until unlocked."
	input UnlockExit( void ) : "Allows NPC's to exit the vehicle."
	input EnableRadar( void ) : "Turn on the Jalopy radar"
	input DisableRadar( void ) : "Turn off the Jalopy radar"
	input EnableRadarDetectEnemies( void ) : "Enable Jalopy radar to detect Striders and Hunters"
	input AddBusterToCargo( void ) : "Put a striderbuster in the cargo trigger"
	input SetCargoHopperVisibility ( bool ) : "Set the strider buster hopper thingy to be visible, or invisible."

	input DisablePhysGun(void) : "Disable physgun interactions with the jeep."
	input EnablePhysGun(void) : "Enable physgun interactions with the jeep (default)."

	input CreateLinkController(void) : "Automatically builds and attaches a link controller to the car, which cuts the node connections under the car while the car is standing still."
	input DestroyLinkController(void) : "Destroys the link controller created by CreateLinkController."
	
	input EnableGun(bool) : "Enables or disables the gun and associated crosshair."

	EnableGun(choices) : "Has Gun" : 0 : "Whether the airboat's gun is enabled or disabled." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	CargoVisible(choices): "Hopper Visible" : 0 : "Is the striderbuster cargo hopper visible?" =
	[
		0 : "No"
		1 : "Yes"
	]

	spawnflags(Flags) = 
	[
		1 : "HUD Locator Precache" : 0
	]
	
	spawnwithextraseat(choices) : "Spawn With Legacy Seat" : 0 : "Enables spawning with an attached seat that you can't fire from." =
	[
		0 : "No"
		1 : "Yes"
	]

	
	// FIXME: These are going to change!
	output OnCompanionEnteredVehicle(void) : "Companion has entered the vehicle."
	output OnCompanionExitedVehicle(void) : "Companion has exited the vehicle."
	output OnHostileEnteredVehicle(void) : "Hostile has entered the vehicle."
	output OnHostileExitedVehicle(void) : "Hostile has exited the vehicle."
]

@PointClass base(BaseDriveableVehicle) studioprop() = vehicle_viewcontroller : 
	"Vehicle hack to control player view"
[
	input ForcePlayerIn(string) : "Force the player into the vehicle. The animation to use can be specified in the parameter. Without a parameter, the player just teleports."
	input ForcePlayerOut(void) : "Force the player out of the vehicle."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_airboat :
	"Driveable studiomodel airboat."
[
	model(studio) : "World model" : "models/airboat.mdl"
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/airboat.txt"
	EnableGun(choices) : "Has Gun" : 0 : "Whether the airboat's gun is enabled or disabled." =
	[
		0 : "No"
		1 : "Yes"
	]
	spawnwithextraseat(choices) : "Spawn With Legacy Seat" : 0 : "Enables spawning with an attached seat that you can't fire from." =
	[
		0 : "No"
		1 : "Yes"
	]
	input EnableGun(bool) : "Enables or disables the airboat gun and associated crosshair."
	input InputStartRotorWashForces(void) : "The airboat will start to be blown around by the helicopter rotor wash."
	input InputStopRotorWashForces(void) : "The airboat will no longer be blown around by the helicopter rotor wash."
]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_cannon :
	"Driveable studiomodel cannon."
[

]

@PointClass base(BaseDriveableVehicle) studioprop() = prop_vehicle_crane :
	"Driveable studiomodel crane."
[
	magnetname(target_destination) : "Magnet entity" : ""

	input ForcePlayerIn(void) : "Force the player to get into the crane. Only works in singleplayer."
]

@PointClass base(BaseDriveableVehicle, Parentname) studioprop() = prop_vehicle_prisoner_pod :
	"Combine prisoner pod that the player can ride in."
[
	model(studio) : "World model" : "models/vehicles/prisoner_pod.mdl"
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/prisoner_pod.txt"
	
	input Open(void) : "Plays the pod's open animation and unlocks the pod for entry or exit."
	input Close(void) : "Plays the pod's close animation and locks the pod for entry or exit."
	input EnterVehicle(void) : "Forces the activator (or player) into the pod."
	input EnterVehicleImmediate(void) : "Forces the activator (or player) into the pod without enter/exit animations."
	input ExitVehicle(void) : "Boots the prisoner out of the pod."
	
	output OnOpen(void) : "Fired when the pod is open enough to enter."
	output OnClose(void) : "Fired when the pod too closed to enter."
]


@PointClass base(Targetname) = speaker : "Announcement Speaker"
[
	preset(choices) :"Announcement Presets" : 0 =
	[
		0: "None"
		1: "C1A0 Announcer"
		2: "C1A1 Announcer"
		3: "C1A2 Announcer"
		4: "C1A3 Announcer"
		5: "C1A4 Announcer"  
		6: "C2A1 Announcer"
		7: "C2A2 Announcer"
		// 8: "C2A3 Announcer"
		9: "C2A4 Announcer"
		// 10: "C2A5 Announcer"
		11: "C3A1 Announcer"
		12: "C3A2 Announcer"
	]
	message(string) : "Sentence Group Name"
	health(integer) : "Volume (10 = loudest)" : 5
	spawnflags(flags) =
	[
		1: "Start Silent" : 0
	]
]

@PointClass base(Targetname) = target_cdaudio : "CD Audio Target"
[
	health(choices) : "Track #" : -1 =
	[
		-1 : "Stop"
		1 : "Track 1"
		2 : "Track 2"
		3 : "Track 3"
		4 : "Track 4"
		5 : "Track 5"
		6 : "Track 6"
		7 : "Track 7"
		8 : "Track 8"
		9 : "Track 9"
		10 : "Track 10"
		11 : "Track 11"
		12 : "Track 12"
		13 : "Track 13"
		14 : "Track 14"
		15 : "Track 15"
		16 : "Track 16"
		17 : "Track 17"
		18 : "Track 18"
		19 : "Track 19"
		20 : "Track 20"
		21 : "Track 21"
		22 : "Track 22"
		23 : "Track 23"
		24 : "Track 24"
		25 : "Track 25"
		26 : "Track 26"
		27 : "Track 27"
		28 : "Track 28"
		29 : "Track 29"
		30 : "Track 30"
	]
	radius(string) : "Player Radius"
]

@PointClass = trigger_auto : "AutoTrigger"
[
	spawnflags(Flags) =
	[
		1 : "Remove On fire" : 1
	]
	globalstate(string) : "Global State to Read"
	triggerstate(choices) : "Trigger State" : 0 = 
	[
		0 : "Off"
		1 : "On"
		2 : "Toggle"
	]
]

@SolidClass base(Targetname) = trigger_autosave : "AutoSave Trigger"
[
	master(string) : "Master" 
]

@SolidClass base(Targetname) = trigger_cdaudio : "Trigger CD Audio"
[
	health(choices) : "Track #" : -1 =
	[
		-1 : "Stop"
		1 : "Track 1"
		2 : "Track 2"
		3 : "Track 3"
		4 : "Track 4"
		5 : "Track 5"
		6 : "Track 6"
		7 : "Track 7"
		8 : "Track 8"
		9 : "Track 9"
		10 : "Track 10"
		11 : "Track 11"
		12 : "Track 12"
		13 : "Track 13"
		14 : "Track 14"
		15 : "Track 15"
		16 : "Track 16"
		17 : "Track 17"
		18 : "Track 18"
		19 : "Track 19"
		20 : "Track 20"
		21 : "Track 21"
		22 : "Track 22"
		23 : "Track 23"
		24 : "Track 24"
		25 : "Track 25"
		26 : "Track 26"
		27 : "Track 27"
		28 : "Track 28"
		29 : "Track 29"
		30 : "Track 30"
	]
]

@SolidClass base(Trigger, Targetname) = trigger_counter : "Trigger counter" 
[
	spawnflags(flags) = 
	[ 
		1 : "No Message" : 0 
	]
	master(string) : "Master" 
	count(integer) : "Count before activation" : 2
]

@SolidClass base(Targetname) = trigger_endsection : "EndSection Trigger"
[
	section(string) : "Section"
	spawnflags(flags) =
	[
		1: "USE Only" : 0
	]
]

@SolidClass base(Trigger) = trigger_gravity : "Trigger Gravity"
[
	gravity(integer) : "Gravity (0-1)" : 1
]

@PointClass base(Targetname) iconsprite("editor/trigger_relay.vmt") = trigger_relay : "Trigger Relay"
[
	spawnflags(flags) =
	[
		1: "Remove On fire" : 0
	]
	triggerstate(choices) : "Trigger State" : 0 = 
	[
		0: "Off"
		1: "On"
		2: "Toggle"
	]
]

//-------------------------------------------------------------------------
// Script entities
//-------------------------------------------------------------------------

@PointClass base(Angles,Targetname,Parentname) = script_tauremoval : "Script: Custom entity used to handle the tau removal sequence in coast. (unused)"
[
	vortigaunt(target_destination) : "Vortigaunt to use"

	// Inputs
	input StartScript(void) : "Start the script."
	input RemoveTau(void) : "Start removing the Tau cannon now."
]

@PointClass base(Targetname) = script_intro : "Script: Custom entity used to handle the intro sequence."
[
	// Inputs
	input Activate(void) : "Take control of the player's view and start blending the two scenes."
	input Deactivate(void) : "Stop controlling the view."
	input SetCameraViewEntity(string) : "Set the viewpoint to blend with the player's viewpoint."
	input SetBlendMode(integer) : "Set the blending mode to use."
	input SetFOV(integer) : "Set the fov for the second camera."
	input SetNextFOV(integer) : "Set the FOV to blend to over time. Follow this with a SetFOVBlendTime input to start the fov blend."
	input SetFOVBlendTime(float) : "Set the amount of time it should take to blend to the next fov target, and start blending."
	input SetNextBlendMode(integer) : "Set the blending mode to blend to over time. Follow this with a SetNextBlendTime input to start the mode blend."
	input SetNextBlendTime(float) : "Set the amount of time it should take to blend to the next mode, and start blending."
	input FadeTo(string) : "Fade to a specific alpha amount of an amount of time. Parameters: <alpha> <duration>"
	input SetFadeColor(string) : "Set the fade color. Parameters: <Red> <Green> <Blue>"

	alternatefovchange(choices) : "Match env_zoom's FOV transition" : 0 : "Whether the script should match env_zoom's FOV transition." =
	[
		0 : "No"
		1 : "Yes"
	]
]

//-------------------------------------------------------------------------
//
// Special effects
//
//-------------------------------------------------------------------------

@PointClass base(Angles,Targetname,Parentname) = env_citadel_energy_core : "Special effect for the energy cores in citadel."
[
	spawnflags(Flags) = 
	[
		1 : "No small particles" : 0
		2 : "Start on" : 0
	]

	scale(float) : "Scale" : 1 : "Scale of the effect.  1 is the default size, 2 is twice that, etc."

	// Inputs
	input StartCharge(float) : "Start charging the core over specified number of seconds."
	input StartDischarge(void) : "Start discharging the core over specified number of seconds."
	input Stop(float) : "Stops the effect at any point."
]

@PointClass base(Angles,Targetname,Parentname) size(-4 -4 -4, 4 4 4) color(0 0 255) line( 0 0 255, targetname, EndTargetName) = env_alyxemp : "Special effect for the Alyx's EMP device."
[
	Type(choices) : "EMP Type" : 0 =
	[
		0 : "Small"
		1 : "Large"
	]	

	EndTargetName(target_destination) : "Target Entity" : "" : "Entity to use as a target endpoint."

	// Inputs
	input StartCharge(float) : "Start charging the effect over specified number of seconds."
	input StartDischarge(void) : "Start discharging the effect over specified number of seconds."
	input Stop(float) : "Stops the effect at any point."
	input SetTargetEnt(string) : "Sets the target entity for the effect."
]


@PointClass = test_sidelist : "Test entity for Ken!"
[
	sides(sidelist) : "Sides"
]


//-------------------------------------------------------------------------
// Countdown timer for the teleporter at the end of the game
//-------------------------------------------------------------------------

@PointClass base(Targetname) iconsprite("editor/info_target.vmt")  = info_teleporter_countdown : "Countdown timer for the teleporter. The status of the teleporter will appear on vgui_screen entities whose panel is 'teleport_countdown_screen'." 
[
	// Inputs
	input StartCountdown(float) : "Starts the teleporter countdown. Requires an argument which is the number of seconds for the countdown."
	input StopCountdown(void) : "Stops the countdown permanently"
	input Disable(void) : "Pauses the countdown due to a temporary malfunction. A warning sign will appear on the linked vgui screens."
	input Enable(void) : "Restarts the countdown since the malfunction is finished."
]


@PointClass base(BaseDriveableVehicle, Parentname) studioprop() = prop_vehicle_choreo_generic :
	"Generic Choreo vehicle used for magical events."
[
	model(studio) : "World model" : "models/vehicles/prisoner_pod.mdl"
	vehiclescript(string) : "Vehicle Script File" : "scripts/vehicles/choreo_vehicle.txt"
	
	input Open(void) : "Plays the vehicle's open animation and unlocks the vehicle for entry or exit."
	input Close(void) : "Plays the vehicle's close animation and locks the vehicle for entry or exit."
	input EnterVehicle(void) : "Forces the activator (or player) into the vehicle."
	input EnterVehicleImmediate(void) : "Forces the activator (or player) into the vehicle without enter/exit animations."
	input ExitVehicle(void) : "Boots the prisoner out of the vehicle."
	input Viewlock(bool) : "Set true to prevent Gordon from looking around *at all*. Set false to let him look within limits."
	input SetAnimation(string) : "Force the prop to play an animation. The parameter should be the name of the animation."
	
	output OnOpen(void) : "Fired when the vehicle is open enough to enter."
	output OnClose(void) : "Fired when the vehicle too closed to enter."

	ignoremoveparent(choices) : "Ignore Move Parent on Exit" : 0 : "Should the player ignore this vehicle's move parent went performing exit checks." =
	[
		0 : "No"
		1 : "Yes"
	]

	ignoreplayer(choices) : "Ignore Player collision" : 0 : "The player wont collide against this vehicle when moving around." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@FilterClass base(BaseFilter) iconsprite("editor/filter_class.vmt") = filter_combineball_type :
	"A filter that filters by combine ball type."
[
	balltype(choices) : "Ball Type" : 1 =
	[
		0 : "Not Thrown (in combine ball field, etc)"
		2 : "Thrown/Launched by the player's physcannon"
		3 : "Launched by point_combine_ball_launcher"
	]	
]

@PointClass base(Targetname) = env_entity_dissolver: "Entity Dissolver"
[
	input Dissolve(string) : "Dissolve target, if no target is passed it'll use the target specified in the target field."
	target(target_destination) : "Target to Dissolve" : "" : "Targetname of the entity you want to dissolve."

	magnitude(integer) : "Magnitude" : 250 : "How strongly to push away from the center."


	dissolvetype(choices) : "Dissolve Type" : "Energy" =
	[
		0 : "Energy"
		1 : "Heavy electrical"
		2 : "Light electrical"
		3 : "Core Effect"
	]
]

@PointClass base(Angles) iconsprite("editor-puddy/env_particles")  = env_detail_controller : "An entity that lets you control the fade distances for detail props."
[
	fademindist(float) : "Start Fade Dist/Pixels" : 400 : "Distance at which the prop starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 1200 : "Maximum distance at which the prop is visible."
]

@PointClass base(Targetname, Angles) studio("models/props_combine/coreball.mdl") = prop_coreball: "Core Ball" 
[
	input SetScaleX(vector) : "Scales the coreball in one Axis. Params: <New Size> <Time>"
	input SetScaleY(vector) : "Scales the coreball in one Axis. Params: <New Size> <Time>"
	input SetScaleZ(vector) : "Scales the coreball in one Axis. Params: <New Size> <Time>"
]

@PointClass base(Targetname, Studiomodel, Angles, RenderFields) studioprop() = prop_scalable : "Scalable Prop" 
[
	input SetScaleX(vector) : "Scales the prop in one Axis. Params: <New Size> <Time>"
	input SetScaleY(vector) : "Scales the prop in one Axis. Params: <New Size> <Time>"
	input SetScaleZ(vector) : "Scales the prop in one Axis. Params: <New Size> <Time>"
]

@PointClass base(Targetname, EnableDisable, TeamNum, Studiomodel) iconsprite("editor-puddy/info_passtime_ball_spawn") = info_passtime_ball_spawn : "Just marks a ball spawnpoint. Won't be used if disabled."
[
	output OnSpawnBall(void) : "A ball just spawned here. Might be useful when using randomly selected spawn points."
]

@PointClass base(Targetname) iconsprite("editor-puddy/passtime_logic") = passtime_logic : "Passtime Logic"
[
	num_sections(integer) : "Number of sections" : 0 : ""
	ball_spawn_countdown(integer) : "Ball spawn countdown duration in seconds" : 15 : ""
	max_pass_range(float) : "Max Pass Range" : 0 : "0 means unlimited."

	input SpawnBall(void) : "With a countdown, pick a random enabled info_passtime_ball_spawn and spawn a ball there."
	input SetSection(string) : "Parameter must be three values - [section number] [name of first track_path] [name of last track_path]"
	input TimeUp(void) : "Input this from a round timer or something to indicate the game timer ended with no winner."
	input SpeedBoostUsed(void) : "For stats tracking."
	input JumpPadUsed(void) : "For stats tracking."
	input statica(void) : "???"
	input staticb(void) : "???"
	input staticc(void) : "???"
	input RoomTriggerOnTouch(void) : "???"

	output OnBallFree(void) : "The ball is free - someone was holding it, and now they aren't."
	output OnBallGetBlu(void) : "The ball was free and someone picked it up."
	output OnBallGetRed(void) : "The ball was free and someone picked it up."
	output OnBallGetAny(void) : "The ball was free and someone picked it up."
	output OnBallRemoved(void) : "The ball was removed by game rules and you should respawn it. (e.g. fell out of the world (func_passtime_goal with -1 points))."
	output OnScoreBlu(void) : "BLU scored."
	output OnScoreRed(void) : "RED scored."
	output OnScoreAny(void) : ""
	output OnBallPowerUp(void) : "Experimental"
	output OnBallPowerDown(void) : "Experimental"
]

@PointClass base(Targetname, Angles) sphere(radius) sphere(inner_radius) = point_push: "Point Push"
[
	spawnflags(Flags) = 
	[
		1 : "Test LOS before pushing" : 0
		2 : "Use angles for push direction" : 0
		4 : "No falloff (constant push at any distance)" : 0
		8 : "Push players" : 1
		16 : "Push physics" : 1
	]
	
	enabled(choices) : "Start Enabled"	: 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	magnitude(float) : "Magnitude" : 100 : "How strongly to push away from the center."
	radius(float) : "Radius" : 128 : "Radius to affect items in."
	inner_radius(float) : "Inner radius" : "0" : "If not zero, the LOS is calculated from a point intersecting this sphere."
	
	input Enable(void) : "Enable the push."
	input Disable(void): "Disable the push."
]

@NPCClass base(Targetname, Angles, BaseFadeProp, Global) studio("models/antlion_grub.mdl") sphere(fademindist) sphere(fademaxdist) = npc_antlion_grub :
	"Antlion grub"
[
	spawnflags(Flags) = 
	[
		1 : "Do not automatically attach to surface" : 0
	]

	input Squash( void ) : "Squash the grub!"

	output OnAgitated( void ) : "Fired when the grub is stepped on or damaged."
	output OnDeath( void ) : "Fired when the grub is killed."
	output OnDeathByPlayer( void ) : "Fired when the grub is killed (only by the player)."
]


@PointClass base(BasePropPhysics) studioprop() sphere(fademindist) sphere(fademaxdist) studio("models/magnusson_device.mdl") = weapon_striderbuster :
	"Strider Buster"
[
	spawnflags(Flags) = 
	[
		8388608 : "Don't use game_weapon_manager" : 0
	]
	
	dud(choices) : "Dud Bomb" : 0 : "This striderbuster is not armed (to be used for training)." =
	[
		0 : "No"
		1 : "Yes"
	]

	output OnAttachToStrider(void) : "Fired when the striderbuster successfully attaches to a strider."
	output OnDetonate(void) : "Fired when the striderbuster detonates."
	output OnShatter(void) : "Fired when the striderbuster shatters without detonating."
	output OnShotDown(void) : "Fired when the striderbuster shatters after being shot down by Hunters"
]

@PointClass base(Targetname, Parentname) sphere(radius) = point_flesh_effect_target : "Flesh Effect Target"
[
	radius(float) : "Radius" : 8 : "Radius of the effect when active"

	input SetRadius(vector) : "Sets a new radius and time to interpolate to it(as a vector <Size> <Time in Seconds>)."
]

//-------------------------------------------------------------------------
//
// random again.
//
//-------------------------------------------------------------------------

@PointClass  iconsprite("editor-puddy/func_instance_parms") = func_instance_parms : 
	"Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties " +
	"of this entity.  It will auto-populate it with the variables and allow you to indicate the variable type."
[
	parm1(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm2(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm3(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm4(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm5(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm6(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm7(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm8(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm9(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
	parm10(instance_parm) : "Parm" : : "This is a parameter.  It goes in the form of $variable type."
]

@PointClass base(Targetname) iconsprite("editor-puddy/env_screenoverlay") = env_screenoverlay: 
	"An entity that can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects like drunkenness, or teleporter afterimages, etc."
[
	OverlayName1(string) : "Overlay Name 1" : "" : "Name of the first overlay material to display."
	OverlayTime1(float) : "Overlay Duration 1" : "1.0" : "Amount of time that the first overlay should be displayed for, after which it will begin showing the second overlay."
	OverlayName2(string) : "Overlay Name 2" : "" : "Name of the second overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime2(float) : "Overlay Duration 2" : "1.0" : "Amount of time that the second overlay should be displayed for, after which it will begin showing the third overlay."
	OverlayName3(string) : "Overlay Name 3" : "" : "Name of the third overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime3(float) : "Overlay Duration 3" : "1.0" : "Amount of time that the third overlay should be displayed for, after which it will begin showing the fourth overlay."
	OverlayName4(string) : "Overlay Name 4" : "" : "Name of the fourth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime4(float) : "Overlay Duration 4" : "1.0" : "Amount of time that the fourth overlay should be displayed for, after which it will begin showing the fifth overlay."
	OverlayName5(string) : "Overlay Name 5" : "" : "Name of the fifth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime5(float) : "Overlay Duration 5" : "1.0" : "Amount of time that the fifth overlay should be displayed for, after which it will begin showing the sixth overlay."
	OverlayName6(string) : "Overlay Name 6" : "" : "Name of the sixth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime6(float) : "Overlay Duration 6" : "1.0" : "Amount of time that the sixth overlay should be displayed for, after which it will begin showing the seventh overlay."
	OverlayName7(string) : "Overlay Name 7" : "" : "Name of the seventh overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime7(float) : "Overlay Duration 7" : "1.0" : "Amount of time that the seventh overlay should be displayed for, after which it will begin showing the eighth overlay."
	OverlayName8(string) : "Overlay Name 8" : "" : "Name of the eighth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime8(float) : "Overlay Duration 8" : "1.0" : "Amount of time that the eighth overlay should be displayed for, after which it will begin showing the ninth overlay."
	OverlayName9(string) : "Overlay Name 9" : "" : "Name of the ninth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime9(float) : "Overlay Duration 9" : "1.0" : "Amount of time that the ninth overlay should be displayed for, after which it will begin showing the tenth overlay."
	OverlayName10(string) : "Overlay Name 10" : "" : "Name of the tenth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done."
	OverlayTime10(float) : "Overlay Duration 10" : "1.0" : "Amount of time that the tenth overlay should be displayed for, after which this entity will stop displaying overlays."

	// Inputs
	input	StartOverlays(void) : "Start displaying the first overlay."
	input	StopOverlays(void) : "Stop displaying any overlays."
	input	SwitchOverlay(float) : "Switch to displaying a specific overlay. Pass in the desired overlay number in the parameter."
]

@PointClass base(Targetname, Angles) iconsprite("editor-puddy/env_sun") color(255 0 0) = env_sun : 
	"An entity to draw a sun effect in the sky."
[
	target(target_destination) : "Viewer entity" : : "Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the env_sun entity."
	
	use_angles(choices) : "UseAngles" : 0 : "The old way to orient env_sun is to point it at a target. The new way is to specify the angles. If you use the new way, set this property to YES." = 
	[
		0 : "No"
		1 : "Yes"
	]

	pitch(integer) : "Pitch" : 0

	rendercolor(color255) : "Sun Color (R G B)" : "100 80 80"
	overlaycolor(color255) : "Overlay Color (R G B)" : "0 0 0" : "A value of 0 0 0 will act the old way."
	
	size(integer) : "Size" : 16
	overlaysize(integer) : "Overlay Size" : -1 : "A value of -1 means the overlay will act the old way."
	
	material(sprite) : "Material Name" : "sprites/light_glow02_add_noz" : "Material of the inner glow."
	overlaymaterial(sprite) : "Overlay Material Name" : "sprites/light_glow02_add_noz" : "Material of the overlay glow."

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."

	// Inputs
	input TurnOn(void) : "Enable sun rendering."
	input TurnOff(void) : "Disable sun rendering."
	input SetColor(color255) : "Change the sun's color. Format: <Red 0-255> <Green 0-255> <Blue 0-255>"
]

@PointClass base(Targetname) iconsprite("editor-puddy/point_template") = point_template : 
	"Turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times. "
[
	spawnflags(flags) =
	[
		1 : "Don't remove template entities" : 0
		2 : "Preserve entity names (Don't do name fixup)" : 1
	]

	Template01(target_destination) : "Template 1"
	Template02(target_destination) : "Template 2"
	Template03(target_destination) : "Template 3"
	Template04(target_destination) : "Template 4"
	Template05(target_destination) : "Template 5"
	Template06(target_destination) : "Template 6"
	Template07(target_destination) : "Template 7"
	Template08(target_destination) : "Template 8"
	Template09(target_destination) : "Template 9"
	Template10(target_destination) : "Template 10"
	Template11(target_destination) : "Template 11"
	Template12(target_destination) : "Template 12"
	Template13(target_destination) : "Template 13"
	Template14(target_destination) : "Template 14"
	Template15(target_destination) : "Template 15"
	Template16(target_destination) : "Template 16"

	// Inputs
	input ForceSpawn(void) : "Spawn an instance of the template at the original position."

	// Outputs
	output OnEntitySpawned(void) : "Fired after spawning an instance of this template."
]

@PointClass base(Targetname, Angles,Parentname) sphere(radius) sphere(inner_radius) = point_push: "Point Push"
[
	spawnflags(Flags) = 
	[
		1 : "Test LOS before pushing" : 0
		2 : "Use angles for push direction" : 0
		4 : "No falloff (constant push at any distance)" : 0
		8 : "Push players" : 1
		16 : "Push physics" : 1
	]
	
	enabled(choices) : "Start Enabled"	: 1 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	magnitude(float) : "Magnitude" : 100 : "How strongly to push away from the center. if set -100 it will pull the player to center"
	radius(float) : "Radius" : 128 : "Radius to affect items in."
	inner_radius(float) : "Inner radius" : "0" : "If not zero, the LOS is calculated from a point intersecting this sphere."
	
	input Enable(void) : "Enable the push."
	input Disable(void): "Disable the push."
]

@PointClass base(Targetname,DamageTypeP) sphere(DamageRadius) iconsprite("editor-puddy/point_hurt") = point_hurt :
	"An entity that does damage to all entities in a radius around itself, with a specified delay." +
	"If 'Target Entity' is specified, the damage is only done to that entity."
[
	DamageTarget(string) : "Target Entity" : "" : "If specified, only this entity will take damage. Otherwise, all entities within the Radius will take damage."
	
	DamageRadius(float) : "Radius" : 256 : "All entities within this radius of this entity will take damage. If a 'Target Entity' is specified, only that entity will take damage."
	Damage(integer) : "Damage" : 5 : "Damage done to all affected entities each time this entity fires."
	DamageDelay(float) : "Delay" : 1 : "Delay between refires, in seconds."

	input Hurt(void) : "Force a single fire, damaging either the Target Entity or all entities within the radius."
	input TurnOn(void) : "Enable this entity. It will start damaging entities everytime it fires, and refire based upon the specified Delay."
	input TurnOff(void) : "Disable this entity. It will stop damaging entities."
	input Toggle(void) : "Toggle this entity between On/Off state."
]

@PointClass base(Targetname, Angles) iconsprite("editor-puddy/path_corner") = path_corner : "Generic path point"
[
	spawnflags(Flags) =
	[
		1: "Wait for retrigger" : 0
		2: "Teleport to THIS path_corner" : 0
	]
	target(target_destination) : "Next stop target"
	wait(integer) : "Wait here (secs)" : 0
	speed(integer) : "New Train Speed" : 0
	yaw_speed(integer) : "New Train rot. Speed" : 0

	// Inputs 
	input SetNextPathCorner(string) : "Sets next pathcorner"

	// Outputs
	output OnPass(void) : "Fires when a path follower passes this point"
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/cone_helper.mdl") cylinder(255 255 255, targetname, target, radius, targetname, targetname, radius) color(255 192 0) = path_track : 
	"An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path."
[
	spawnflags(Flags) =
	[
		1:  "Disabled" : 0
		2:  "Fire once" : 0
		4:  "Branch Reverse" : 0
		8:  "Disable train" : 0
		16: "Teleport to THIS path track" : 0
		32: "Part of an uphill path" : 0
		64: "Part of a downhill path" : 0
	]
	
	target(target_destination) : "Next Stop Target" : : "The next path_track in the path."
	altpath(target_destination) : "Branch Path" : : "An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active."
	speed(float) : "New Train Speed" : 0 : "When the train reaches this path_track, it will set its speed to this speed. "+
		"This speed must be a positive value that is less than the train's max speed. A value of 0 will cause no change in the train's speed."
	radius(float) : "Path radius" : 0 : "Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node."

	orientationtype(choices) : "Orientation Type" : 1 : "The way that the path follower faces as it moves through this path track." =
	[
		0 : "No change"
		1 : "Face direction of motion"
		2 : "Face this path_track's angles"
	]

	// Inputs
	input ToggleAlternatePath(void) : "Cause the track to toggle to/from its alternate path."
	input EnableAlternatePath(void) : "Enable the alternate path of the track."
	input DisableAlternatePath(void) : "Disable the alternate path of the track."

	input TogglePath(void) : "Cause the track to toggle on/off/"
	input EnablePath(void) : "Enable the track."
	input DisablePath(void) : "Disable the track."

	// Outputs
	output OnPass(void) : "Fired when any entity following this path passes this path_track node."
	output OnTeleport(void)  : "Fired when any entity following this path teleports directly to this path_track node."
]

@PointClass base(Targetname) iconsprite("editor-puddy/point_clientcommand") = point_clientcommand : 
	"An entity that issues commands to the client console, as if it was typed in by the player (if activator is a player, or the local player in single player)."
[
	// Inputs
	input Command(string) : "Command to execute."
]

@PointClass base(Targetname) iconsprite("editor-puddy/point_servercommand") = point_servercommand : 
	"An entity that issues commands to the server console."
[
	// Inputs
	input Command(string) : "Command to execute."
]

@PointClass base(Targetname) size(-8 -8 -8, 8 8 8) = point_broadcastclientcommand : 
	"An entity that issues commands to each valid client's console, as if it was typed in by that player locally."
[
	// Inputs
	input Command(string) : "Command to execute."
]

@PointClass base(BasePropPhysics, RenderFields) studioprop() sphere(radius) = prop_sphere : "Creates a perfect sphere."
[
	radius(float) : "Radius" : 12 : ""
]

@PointClass base(prop_physics) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_physics_respawnable :
	"This class is the same as prop_physics, except it respawns after it breaks"
[
	RespawnTime(float) : "Respawn Time" : 60 : "Ammount in seconds this prop will respawn after it breaks."
]

@PointClass base(Targetname, Parentname) size(-4 -4 -4, 4 4 4) = env_splash : 
	"Can be used to create either a spash effect or a stream of falling or spurting liquid." +
	"Will create a splash decal on the collided surface the same color as the liquid"
[
	spawnrate(float) : "SpawnRate"  : "10" : "How many particles some out"
	startcolor(color255) : "StartColor" : "100 100 100" : "Color of particles when the are emitted"
	endcolor(color255) : "EndColor" : "240 110 0" : "Color that particles approach"
	speed(float) : "Speed" : 3 : "Averate speed of an emitted particles"
	speedrange(float) : "SpeedRange" : 1 : "Speed range of an emitted particles"
	widthmin(float) : "WidthMin" : 2 : "Width of smallest particle emitted"
	widthmax(float) : "WidthMax" : 8 : "Width of largest particle emitted"
	noise(float) : "Noise" : "0.1" : "Amount of directional noise in stream"
	lifetime(float) : "Lifetime" : 5 : "Lifetime of particles (in secs)"
	numdecals(integer) : "Num Decals" : 1 : "Number of decals used (keep small)"
	startactive(choices) : "Start On" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input SetSpawnRate(float) : "Sets how many particles come out"
	input SetSpeed(float) : "Sets speed of emitted particle"
	input SetNoise(float) : "Sets noise of emitted particle (0-1)"
	input SetLifetime(float) : "Sets lifetime of emitted particles (in seconds)"
	input TurnOn(void) : "Turns particles on"
	input TurnOff(void) : "Turns particles off"
]

@PointClass base(Targetname, Parentname, RenderFields,DXLevelChoice) size(-2 -2 -2, 2 2 2) sprite() color(20 140 20) = env_glow : 
	"An entity that controls the drawing of a sprite in the world." 
[
	framerate(string) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/glow01.spr" : "Material of the sprite to be drawn."
	scale(string) : "Scale" : "" : "Scale multiplier of the sprite."
	spawnflags(flags) =
	[
		1: "Start on" : 0
		2: "Play Once" : 0
	]

	GlowProxySize(float) : "Size of Glow Proxy Geometry." : "2.0" : "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered."

	HDRColorScale(float) : "HDR color scale." : "1.0" : "float value to multiply sprite color by when running in HDR mode."
	
	// Inputs
	input ColorRedValue(float) : "Sets the red color channel's value (0 - 255)."
	input ColorGreenValue(float) : "Sets the green color channel's value (0 - 255)."
	input ColorBlueValue(float) : "Sets the blue color channel's value (0 - 255)."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
	input HideSprite(void) : "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
	input ShowSprite(void) : "Show the sprite."
	input ToggleSprite(void) : "Toggle the sprite between hidden and shown."
]

@PointClass base(Angles, Targetname) iconsprite("editor-puddy/light_env.vmt") = light_environment : 
	"Sets the color and angle of the light from the sun and sky."
[
	_light(color255) : "Brightness" : "255 255 255 200"
	_ambient(color255) : "Ambient" : "255 255 255 20"
	_lightHDR(color255) : "BrightnessHDR" : "-1 -1 -1 1"
	_lightscaleHDR(float) : "BrightnessScaleHDR" : "1" : "Amount to scale the light by when compiling for HDR."
	_ambientHDR(color255) : "AmbientHDR" : "-1 -1 -1 1"
	_AmbientScaleHDR(float) : "AmbientScaleHDR" : "1" : "Amount to scale the ambient light by when compiling for hdr."
	style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
		12 : "Underwater light mutation"
	]
	pattern(string) : "Custom Appearance" : "" : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	pitch(integer) : "Pitch" : 0 : "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down."
	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	SunSpreadAngle(float) : "SunSpreadAngle" : 0 : "The angular extent of the sun for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value."
	// Inputs
	input TurnOn(void) : "Turn the light on."
	input TurnOff(void) : "The the light off."
	input Toggle(void) : "Toggle the light's current state."
	input SetPattern(string) : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	input FadeToPattern(string) : "Fades from first value in old pattern, to first value in the new given pattern. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
]

@PointClass base(Targetname, DXLevelChoice, Angles) iconsprite("editor/fog_controller.vmt") color(255 255 255) = env_fog_controller : 
	"An entity that controls the fog and view distance in the map."
[
	// Inputs
	input SetStartDist(float) : "Set the fog start distance."
	input SetEndDist(float) : "Set the fog end distance."
	input TurnOn(void) : "Turn the fog on."
	input TurnOff(void) : "Turn the fog off."
	input SetColor(color255) : "Set the primary fog color."
	input SetColorSecondary(color255) : "Set the secondary fog color."
	input SetFarZ(integer): "Set the far clip plane distance."
	input SetAngles(string) : "Set the angles to use for the secondary fog direction."
 	input SetColorLerpTo(color255) : "Set the primary fog color."
	input SetColorSecondaryLerpTo(color255) : "Set the secondary fog color."
	input SetStartDistLerpTo(float) : "Set the fog start distance."
	input SetEndDistLerpTo(float) : "Set the fog end distance."
	input StartFogTransition(void) : "Start fog transition."
 	// Starting fog parameters for the level. These are selectable per LOD.	
	fogenable(choices) : "Fog Enable" : 0 = 
	[
		0 : "No"
		1 : "Yes"
	]
	fogblend(choices) : "Fog Blend" : 0 = 
	[
		0 : "No"
		1 : "Yes"
	]
	use_angles(choices) : "Use Angles for Fog Dir" : 0 = 
	[
		0 : "No"
		1 : "Yes"
	]
 	fogcolor(color255) : "Primary Fog Color" : "255 255 255"
	fogcolor2(color255) : "Secondary Fog Color" : "255 255 255"
	fogdir(string) : "Primary Fog Direction" : "1 0 0"
	fogstart(string) : "Fog Start" : "500.0"
	fogend(string) : "Fog End" : "2000.0"
	fogmaxdensity(float) : "Fog Max Density [0..1]" : "1"
 	foglerptime(float) : "Interpolate time" : "0"
	
	farz(string) : "Far Z Clip Plane" : "-1"
	
	spawnflags(flags) =
	[
		1 : "Master (Has priority if multiple env_fog_controllers exist)" : 0
	]
]

@SolidClass base( Targetname, EnableDisable ) = fog_volume : "An entity to control the fog in the map."
[
	FogName(target_destination) : "Fog Name" : : "The name of the fog entity associated with this volume."
	ColorCorrectionName(target_destination) : "ColorCorrection Name" : : "The name of the color_correction entity associated with this volume."
]

@PointClass base(Targetname, EnableDisable) sphere(minfalloff) sphere(maxfalloff) iconsprite("editor/color_correction.vmt") = color_correction : 
	"An entity to control the color correction in the map."
[
	minfalloff(float) : "Lookup Falloff Start Distance" : "0.0"   : "This is the distance to the start of the falloff region (-1 = everywhere)"
	maxfalloff(float) : "Lookup Falloff End Distance"   : "200.0" : "This is the distance to the end of the falloff region (-1 = everywhere)"
	maxweight(float)  : "Maximum Weight"				: "1.0"   : "This is the maximum weight for this lookup"
	filename(string)  : "Lookup Table Filename"			: ""	  : "This is the lookup table filename"
	fadeInDuration(float)   : "Lookup Fade In Duration"		: "0.0"	  : "Duration of fade in on when enabled."
	fadeOutDuration(float)   : "Lookup Fade out Duration"		: "0.0"	  : "Dration of fade out on when disabled."
	
	spawnflags(flags) =
	[
		1 : "Master" : 0
		2 : "Client-side simulation" : 0
	]
		// Inputs
	input SetFadeInDuration(float) : "Sets the 'fadeInDuration' variable, used to fade cc lookup usage when entity is enabled."
	input SetFadeOutDuration(float) : "Sets the 'fadeOutDuration' variable, used to fade cc lookup usage when entity is disabled."
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_lighting.vmt") = info_lighting_relative
[
	LightingLandmark(target_destination) : "Lighting Landmark" :  : "Entity at which the reference origin is contained. " +
									" If empty, the info_lighting_relative's origin will" +
									" be used."
]

//-------------------------------------------------------------------------
// Color correction volume control
//-------------------------------------------------------------------------
 @SolidClass base(Targetname, EnableDisable ) = color_correction_volume : 
	"An entity to control the color correction in the map."
[
	fadeDuration(float) : "Lookup Fade Duration"  : "10.0" : "This is the duration for the lookup to fade in/out on extry/exit"
	maxweight(float)    : "Maximum Weight"		  : "1.0"  : "This is the maximum weight for this lookup"
	filename(string)    : "Lookup Table Filename" : ""     : "This is the lookup table filename"
]

@NPCClass base(BaseNPC) studio("models/icky.mdl") = monster_ichthyosaur : "Ichthyosaur"
[
]

@SolidClass base(Breakable, RenderFields) = func_pushable : "Pushable object"
[
	size(choices) : "Hull Size" : 0 =
	[
		0: "Point size"
		1: "Player size"
		2: "Big Size"
		3: "Player duck"
	]
	spawnflags(flags) =
	[
		128: "Breakable" : 0
	]
	friction(integer) : "Friction (0-400)" : 50
	buoyancy(integer) : "Buoyancy" : 20
	_minlight(string) : "Minimum light level"
]

@SolidClass = func_ladder : 
	"Ladder. Players will be able to freely move along this brush, as if it was a ladder. If you are using a model prop " +
	"for the visual representation of the ladder in the map, apply the toolsinvisibleladder material to the " +
	"func_ladder brush."+
	"Ok, so, don't trust too blindly what this description says, ok? It's not all that... accurate."
[
]

@SolidClass base(Targetname,Origin) = func_mortar_field : "Mortar field"
[
	m_fControl(choices) : "Position" : 0 : "Random: will fire anywhere in bounds. "+
	"Above activator: will fire above or below entity activated the mortar. "+
	"X/Y Controller: position set by momentary_rot_buttons (tactical map)." =
	[
		0 : "Random"
		1 : "Above activator"
		2 : "X/Y Controller"
	]
	m_flSpread(integer) : "Spread" : 0 : "Spread of fire"
	m_iCount(integer) : "Count" : 1 : "Count of mortar shells"
	m_iszXController(target_destination) : "X Controller" : "" : "momentary_rot_button controlling X location"
	m_iszYController(target_destination) : "Y Controller" : "" : "momentary_rot_button controlling Y location"
	input Trigger(void) : "Trigger"
]

@NPCClass base(BaseHeadcrab, Parentname) studio("models/hl1hcrab.mdl") = monster_headcrab : "Headcrab"
[
]

@NPCClass base(BaseNPC) studio("models/tentacle.mdl") = monster_tentacle : "Tentacle Arm"
[
	sweeparc(integer) : "Sweep Arc" : 130
	sound(Choices) : "Tap Sound" : -1 =
	[
		-1 : "None"
		0 : "Silo"
		1 : "Dirt"
		2 : "Water"
	]
]

@NPCClass base(BaseNPC) studio("models/hl1bar.mdl") = monster_barney : "Barney"
[
	UseSentence(String) : "Use Sentence"
	UnUseSentence(String) : "Un-Use Sentence"
]

@NPCClass base(BaseNPC) studio("models/Sentry.mdl") = monster_sentry : "Sentry Turret Gun"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]

@SolidClass base(Trigger) = func_friction
[
	modifier(float) : "Friction Percent" : 100 : "Set the friction to this percent of the regular friction"
]

@NPCClass base(BaseNPC) studio("models/islave.mdl") = monster_alien_slave : "Vortigaunt"
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
		64 : "IgnorePlayer" : 0
	]
]

@PointClass iconsprite("editor/multi_manager.vmt") base(Targetname) color(255 128 0) = multi_manager : "MultiTarget Manager" 
[
	spawnflags(Flags) = 
	[
		1 : "multithreaded" : 0
	]
	input Trigger(void) : "Trigger the manager."
	output OnTrigger(void) : "Fired when the manager is triggered."
]

@PointClass iconsprite("editor/multisource.vmt") base(Targetname) color(128 255 128) = multisource : "Multisource"
[
	target(target_destination) : "Target"
	globalstate(string) : "Global State Master"
]

@PointClass base(Targetname, RenderFields) size(-16 -16 -16, 16 16 16) color(100 100 0) = env_render : "Render Controls"
[
	target(target_destination) : "Target"
	spawnflags(flags) =
	[
		1: "No Renderfx" : 0
		2: "No Renderamt" : 0
		4: "No Rendermode" : 0
		8: "No Rendercolor" : 0
	]
	input Activate(void) : "Activate"
	input Use(void) : "Use"
]

@PointClass sprite() base(Targetname, RenderFields) size(-4 -4 -4, 4 4 4) color(30 100 0) = env_glow : "Light Glow/Haze"
[
	model(sprite) : "Sprite Name" : "sprites/glow01.spr"
	scale(integer) : "Scale" : 1
]

@PointClass iconsprite("editor/ambient_generic.vmt") = env_sound : "DSP Sound" 
[
	radius(integer) : "Radius" : 128
	roomtype(Choices) : "Room Type" : 0 =
	[
		0 : "Normal (off)"
		1 : "Generic"
		
		2 : "Metal Small"
		3 : "Metal Medium"
		4 : "Metal Large"
	
		5 : "Tunnel Small"
		6 : "Tunnel Medium"
		7 : "Tunnel Large"
	
		8 : "Chamber Small"
		9 : "Chamber Medium"
		10: "Chamber Large"

		11: "Bright Small"
		12: "Bright Medium"
		13: "Bright Large"

		14: "Water 1"
		15: "Water 2"
		16: "Water 3"

		17: "Concrete Small"
		18: "Concrete Medium"
		19: "Concrete Large"

		20: "Big 1"
		21: "Big 2"
		22: "Big 3"

		23: "Cavern Small"
		24: "Cavern Medium"
		25: "Cavern Large"

		26: "Weirdo 1"
		27: "Weirdo 2"
		28: "Weirdo 3"
	]
	output OnPlay(void) : "OnPlay"
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
	input ToggleEnabled(void) : "ToggleEnabled"
]

@PointClass base(Targetname) size(-16 -16 -16, 16 16 16) = env_funnel : "Large Portal Funnel" 
[
	spawnflags(flags) =
	[
		1: "Reverse" : 0
	]
]

@NPCClass base(BaseNPC) studio("models/houndeye.mdl") = monster_houndeye : "Houndeye" 
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]

@NPCClass base(BaseNPC) studio("models/scientist.mdl") = monster_scientist_dead : "Dead Scientist" 
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]

@NPCClass base(BaseNPC) studio("models/leech.mdl") = monster_leech : "Leech" []
@NPCClass base(BaseNPC) studio("models/hl1barnacle.mdl") = monster_barnacle : "Barnacle" []
@NPCClass base(BaseNPC) studio("models/apache.mdl" ) = monster_apache : "Apache"
[
	spawnflags(Flags) = 
	[
		8 : "NoWreckage"	: 0
		64 : "Start Inactive" : 0
	]
]

@NPCClass base(BaseNPC) studio("models/zombie.mdl") = monster_zombie : "Zombie" []

@NPCClass base(BaseNPC) studio("models/aflock.mdl") = monster_flyer_flock : "Flock of Flyers" 
[
	iFlockSize(Integer) : "Flock Size" : 8
	flFlockRadius(Integer) : "Flock Radius" : 128
]

@NPCClass base(BaseNPC) studio("models/agrunt.mdl") = monster_alien_grunt : "Alien Grunt" 
[
	netname(string) : "Squad Name"
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
]

@NPCClass base(BaseNPC) studio("models/big_mom.mdl") = monster_bigmomma : "Big Mamma" 
[
	netname(target_destination) : "First node" : ""
]

@NPCClass base(BaseNPC) studio("models/bullsquid.mdl") = monster_bullchicken : "BullChicken" []
@NPCClass base(BaseNPC) studio("models/baby_headcrab.mdl") = monster_babycrab : "Baby Headcrab" []
@NPCClass base(BaseNPC) studio("models/garg.mdl") = monster_gargantua : "Gargantua" []
@NPCClass base(BaseNPC) studio("models/hl1gman.mdl") = monster_gman : "G-Man" []
@NPCClass base(BaseNPC) studio("models/hassassin.mdl") = monster_human_assassin : "Human Assassin" []
@NPCClass base(BaseNPC) studio("models/hgrunt.mdl") = monster_human_grunt : "Human Grunt"
[
	spawnflags(Flags) =
	[
		32 : "SquadLeader" : 0
	]
	
	weapons(Choices) : "Weapons" : 1 =
	[
		1 : "9mmAR"
		3 : "9mmAR + HG"
		5 : "9mmAR + GL"
		8 : "Shotgun"
		10 : "Shotgun + HG"
	]
]
@PointClass base(Targetname,RenderFields,Angles) studio("models/hgrunt.mdl") = monster_hgrunt_dead : "Dead Human Grunt"
[
	sequence(integer) : "Sequence" : 44
	pose(Choices) : "Pose" : 0 =
	[
		0 : "On stomach"
		1 : "On side"
		2 : "Seated"
	]
	body(Choices) : "Body" : 0 =
	[
		0 : "Grunt with Gun"
		1 : "Commander with Gun"
		2 : "Grunt no Gun"
		3 : "Commander no Gun"
	]
]

@NPCClass base(BaseNPC) studio("models/miniturret.mdl") = monster_miniturret : "Mini Auto Turret"
[
	orientation(Choices) : "Orientation" : 0 =
	[
		0 : "Floor Mount"
		1 : "Ceiling Mount"
	]
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 0
		64 : "Start Inactive" : 0
	]
]

@NPCClass base(BaseNPC) studio("models/nihilanth.mdl") = monster_nihilanth : "Nihilanth"  []
@NPCClass base(BaseNPC) studio() = monster_furniture : "Monster Furniture" 
[
	model(studio) : "model"
]

@NPCClass base(BaseNPC) studio("models/roach.mdl") = monster_cockroach : "Cockroach" 
[
	model(choices) : "Model" : "" : "Change the model to something other than the default model. Not shown in Hammer." =
	[
		"" : "Default"
		"models/tf2_roach.mdl" : "TF2 styled cockroach"
	]
]
@PointClass base(Targetname, RenderFields, Angles) studio("models/light.mdl") = xen_plantlight : "Xen Plant Light" []
@PointClass base(Targetname, RenderFields, Angles) studio("models/hair.mdl") = xen_hair : "Xen Hair" 
[
	spawnflags(Flags) = 
	[
		1 : "Sync Movement" 	: 0
	]
]

@PointClass base(Targetname, RenderFields, Angles) studio("models/tree.mdl") = xen_tree : "Xen Tree" []
@PointClass base(Targetname, RenderFields, Angles) studio("models/fungus(small).mdl") = xen_spore_small : "Xen Spore (small)" []
@PointClass base(Targetname, RenderFields, Angles) studio("models/fungus.mdl") = xen_spore_medium : "Xen Spore (medium)" []
@PointClass base(Targetname, RenderFields, Angles) studio("models/fungus_large.mdl") = xen_spore_large : "Xen Spore (large)" []
@NPCClass base(BaseNPC) studio("models/scientist.mdl") = monster_scientist : "Scientist"
[
	body(integer) : "Body" : -1 : "-1 = Random\n0 = Glasses\n1 = Einstein\n2 = Luther\n3 = Slick"
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = monster_generic : "Generic Script NPC"
[
	spawnflags(Flags) = 
	[
		65536 : "Not solid" : 0
	]
	model(studio) : "Model"
	body(Integer) : "Body" : 0
]

@PointClass base(BaseNPC, Parentname, RenderFields, Shadow) studio() = generic_actor : "Generic Actor NPC"
[
	model(studio) : "Model"

	hull_name(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
]

@PointClass base(BaseNPC, RenderFields, Shadow) studio() = cycler_actor : "Actor Cycler"
[
	model(studio) : "Model"
	Sentence(string) : "Sentence Group" : ""

	input Alpha(integer) : "Set Alpha Value"
]

@PointClass base(Angles, BaseNPCMaker) iconsprite("editor/npc_maker.vmt") = monstermaker : "NPC Maker"
[
	target(string) : "Target On Release" 
	monstertype(string) : "Monster Type"
	netname(string) : "Childrens' Name"
	spawnflags(Flags) = 
	[
		1 : "Start ON" 	: 0
	// 	2 : "PVS On/Off" : 0  // not implemented
		4 : "Cyclic" : 0
		8 : "MonsterClip" : 0
	]

	// how many monsters the monstermaker can create (-1 = unlimited)
	monstercount(integer) : "Number of Monsters" : -1
	
	// if delay is -1, new monster will be made when last monster dies.
	// else, delay is how often (seconds) a new monster will be dookied out.
	delay(string) : "Frequency" : "5"

	// maximum number of live children allowed at one time. (New ones will not be made until one dies)
	// -1 no limit
	m_imaxlivechildren(integer) : "Max live children" : 5
]

//-------------------------------------------------------------------------
//
// Player Control Entities
//
//-------------------------------------------------------------------------

@BaseClass base(Targetname) size(-10 -10 -10, 10 10 10) color(255 0 255) = player_control
[
	// Inputs
	input Activate(void) : "Turns on"
	input Deactivate(void) : "Turns off"
	input SetThrust(string) : "Set Thrust"
	input SetSideThrust(string)  : "Set Side Thrust"
]

//-------------------------------------------------------------------------
//
// Scripted Events
//
//-------------------------------------------------------------------------

@PointClass sphere() iconsprite("editor/scripted_sentence.vmt") base(Targetname) = scripted_sentence : "Scripted Sentence"
[
	spawnflags(Flags) = 
	[
		1 : "Fire Once"  : 1
		2 : "Followers Only" : 0
		4 : "Interrupt Speech" : 1
		8 : "Concurrent" : 0
		16 : "Speak to Activator" : 1
	]

	sentence(string) : "Sentence Name" : ""
	entity(string) : "Speaker Type"
	delay(string) : "Additional Sentence Time" : "0"
	radius(integer) : "Search Radius" : 512
	refire(string) : "Delay Before Refire" : "3"
	listener(string) : "Listener Type"
	volume(string) : "Volume 0-10" : "10"
	attenuation(Choices) : "Sound Radius" : 0 =
	[
		0 : "Small Radius"
		1 : "Medium Radius"
		2 : "Large  Radius"
		3 : "Play Everywhere"
	]

	// Inputs
	input BeginSentence(void) : "Starts the scripted sentence."

	// Outputs
	output OnBeginSentence(void) : "Fires when the sentence begins"
	output OnEndSentence(void) : "Fires when the sentence ends"
]

@PointClass base(Targetname, Parentname) iconsprite("editor/info_target.vmt")  = scripted_target : "Scripted Target"
[
	StartDisabled(choices) : "Start Disabled" : 1 =
	[
		0 : "No"
		1 : "Yes"
	]

	m_iszEntity(npcclass) : "Target NPC"
	m_flRadius(integer) : "Search Radius (0=everywhere)" : 0 : "Radius to search within for an NPC to use. 0 searches everywhere."

	MoveSpeed(integer) : "Move Speed" : 5			// How quickly should target move between scripted targets
	PauseDuration(integer) : "Pause Duration" : 0		// How long should target pause at scripted target
	EffectDuration(integer) : "Effect Duration" : 2		// How long should any associated effect last

	target(target_destination) : "Next Target"		// Next scripted target

	// Inputs
	input Enable(void) : "Enable this entity"
	input Disable(void) : "Disable this entity"

	// Outputs
	output AtTarget(void) : "Fires when NPC reaches this target"
	output LeaveTarget(void) : "Fires when NPC leaves this target"
]

@SolidClass base(Targetname, Parentname, Origin, RenderFields, Global) = func_vehicle : "Drivable Vehicles" 
[
	spawnflags(flags) =
	[
		1 : "No Pitch (X-rot)" : 0
		2 : "No User Control" : 0
		8 : "Passable" : 0
	]
	target(target_destination) : "First Stop Target" : "" : "The name of the first path_track in the vehicle's path. The vehicle " +
		"will spawn at this path_track. It will also turn to face direction indicated by the 'Orientation Type' setting."
	sounds(choices) : "Sound" : "" =
	[
		"": "None"
		1: "Vehicle 1"
		2: "Vehicle 2"
		3: "Vehicle 3"
		4: "Vehicle 4"
		5: "Vehicle 6"
		6: "Vehicle 7"
	]
	length(integer) : "Length of the vehicle" : 256
	width(integer) : "Width of the vehicle" : 128
	height(integer) : "Height above track" : 4
//*
//*note: max speed is 2000 or things go wrong
//*
	startspeed(integer) : "Initial speed" : 0
	speed(integer) : "Speed (units per second)" : 64
	dmg(integer) : "Damage on Crush" : 0 : "The amount of damage this train does to entities that block it."
	volume(integer) : "Volume (10 = loudest)" : 10
	bank(string) : "Bank Angle on Turns" : "0"
	_minlight(string) : "Minimum Light Level" : : "The minimum level of ambient light that hits this brush."
]

@SolidClass base(Parentname,Global) = func_vehiclecontrols : "Vehicle Controls"
[
	target(target_destination) : "Vehicle Name" : : "The target Vehicle to control when the player uses these controls."
]

@PointClass base(Item)  studio("models/weapons/w_models/w_shotgun.mdl") = lfe_weapon_custom : "Custom Weapon" 
[
	itemid(integer) : "Item ID" : 1 : "ID of Weapon"
	itemclassname(string) : "Item Classname" : "" : "Classname of Weapon"

	skipbaseattribute(choices) : "Skip Base Attributes" : "0" : "" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	noweapondrop(choices) : "No Weapon Drop" : "0" : "Prevents dropping weapon in the slot that this would use." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	norotate(choices) : "Disable Rotating" : "0" : "" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	//respawntime(float) : "RespawnTime" : "0.0" : "RespawnTime after being picked up."

	at1(integer) : "Attributes 1" : 0 : "Index of The Attribute"
	at2(integer) : "Attributes 2" : 0 : "Index of The Attribute"
	at3(integer) : "Attributes 3" : 0 : "Index of The Attribute"
	at4(integer) : "Attributes 4" : 0 : "Index of The Attribute"
	at5(integer) : "Attributes 5" : 0 : "Index of The Attribute"
	at6(integer) : "Attributes 6" : 0 : "Index of The Attribute"
	at7(integer) : "Attributes 7" : 0 : "Index of The Attribute"
	at8(integer) : "Attributes 8" : 0 : "Index of The Attribute"
	at9(integer) : "Attributes 9" : 0 : "Index of The Attribute"
	at10(integer) : "Attributes 10" : 0 : "Index of The Attribute"
	at11(integer) : "Attributes 11" : 0 : "Index of The Attribute"
	at12(integer) : "Attributes 12" : 0 : "Index of The Attribute"
	at13(integer) : "Attributes 13" : 0 : "Index of The Attribute"
	at14(integer) : "Attributes 14" : 0 : "Index of The Attribute"
	at15(integer) : "Attributes 15" : 0 : "Index of The Attribute"
	at16(integer) : "Attributes 16" : 0 : "Index of The Attribute"

	atv1(float) : "Attributes Value 1" : "0" : "Value of The Attribute"
	atv2(float) : "Attributes Value 2" : "0" : "Value of The Attribute"
	atv3(float) : "Attributes Value 3" : "0" : "Value of The Attribute"
	atv4(float) : "Attributes Value 4" : "0" : "Value of The Attribute"
	atv5(float) : "Attributes Value 5" : "0" : "Value of The Attribute"
	atv6(float) : "Attributes Value 6" : "0" : "Value of The Attribute"
	atv7(float) : "Attributes Value 7" : "0" : "Value of The Attribute"
	atv8(float) : "Attributes Value 8" : "0" : "Value of The Attribute"
	atv9(float) : "Attributes Value 9" : "0" : "Value of The Attribute"
	atv10(float) : "Attributes Value 10" : "0" : "Value of The Attribute"
	atv11(float) : "Attributes Value 11" : "0" : "Value of The Attribute"
	atv12(float) : "Attributes Value 12" : "0" : "Value of The Attribute"
	atv13(float) : "Attributes Value 13" : "0" : "Value of The Attribute"
	atv14(float) : "Attributes Value 14" : "0" : "Value of The Attribute"
	atv15(float) : "Attributes Value 15" : "0" : "Value of The Attribute"
	atv16(float) : "Attributes Value 16" : "0" : "Value of The Attribute"
]

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_weapon_progress.vmt") = lfce_weapon_progress : 
"'Weapon progression' disables the automatic "+
"giveaway of weapons on the beginning of a 'round'. "+
"Players have to earn weapons by picking them up in the map. "+
"This entity can also be used for automatically giving "+
"a Gravity Gun at the beggining of a round. This is isolated "+
"from the main weapon progression system. "
[
	wpnprogress(choices) : "Current progression" : 2 : "Defines this map's weapon progression." =
	[
		0 : "Unarmed"
		1 : "Melee"
		2 : "All weapons (default)"
		3 : "Melee and secondary"
	]
	
	physcannon_progress(choices) : "Give the Gravity Gun on round start?" : 0 : "Gives the Gravity Gun to all players on the beginning of a round." =
	[
		0 : "No"
		1 : "Regular Physcannon"
		2 : "Mega"
	]
	
	portalgun_progress(choices) : "Give the Portal Gun on spawn" : 0 : "Gives the Portal gun on spawn." =
	[
		0 : "No"
		1 : "Blue Portal Only"
		2 : "Both Portals"
	]
	
	progression_paused(choices) : "Progression Paused" : 0 : "Pause progression at the current stage." =
	[
		0 : "Enable progression"
		1 : "Pause progression"
	]
	
	input SetWeaponProgress(integer) : "Sets weapon progress."
	input SetPhyscannonProgress(integer) : "Sets Physcannon progress."
	input SetProgressionPaused(integer) : "Prevent or allow weapon progression."
]

@PointClass base(Targetname) iconsprite("editor-lfe/lfe_weapon_progress.vmt") = lfe_team_weapon_manager : ""
[
	weaponid(choices) : "Item ID" : 9000 : "Item ID from items_game.txt" =
	[
		9000 : "Gravity Gun"
		9001 : "Super Gravity Gun"
	]

	spawnflags(Flags) =
	[
		1 : "Round start active" : 1
	]

	input GiveWeapons(void) : ""
	input RemoveWeapons(void) : ""
]

@NPCClass base(BaseNPC) studio("models/bullsquid_leak.mdl") = npc_bullsquid : "Beta Bullsquid"
[
]

@PointClass base(Targetname, Parentname, Angles) size(-2 -2 -2, 2 2 2) frustum(lightfov,nearz,farz,lightcolor,-1) = env_projectedtexture : 
	"Projected texture entity."
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
		2  : "Always Update (moving light)"	: 0
	]

	texturename(material)		: "Texture" : "effects/flashlight001" : "path/texture to be projected. Relative to main/materials/"
	target(target_destination)	: "target" : : "target"	
	lightfov(float)				: "FOV" : "90.0" : "FOV"
	nearz(float)				: "NearZ" : "4.0" : "Near Z for projected texture"
	farz(float)					: "FarZ" : "750.0" : "Far Z for projected texture"	
	quadraticatten(float)		: "Quadratic attenuation" : "0.0" : "Quadratic attenuation"
	linearatten(float)			: "Linear attenuation" : "100" : "Linear attenuation"
	constantatten(float)		: "Constant attenuation" : "0.0" : "Constant attenuation"
	shadowtatten(float)		: "Shadow attenuation" : "0.0" : "Shadow attenuation"
	
	enableshadows(Choices) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture." =
	[
		0 : "No"
		1 : "Yes"
	]
	shadowquality(Choices) : "Shadow Quality" : 1 : "Quality of shadows." =
	[
		0 : "Low"
		1 : "High"
	]
	lightonlytarget(Choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightworld(Choices) : "Light World" : 1 : "Control whether flashlight effects static world geometry." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightcolor(color255)		: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	colortransitiontime(float)	: "Color Transition Time" : "0.5" : "Amount of time it takes for a color change to occur."
	cameraspace(integer)		: "Camera Space" : 0 : "Angles are interpreted as being relative to camera."

	// Inputs
	input TurnOn(void)		: "Turn on the texture"
	input TurnOff(void)		: "Turn off the texture"
	input AlwaysUpdateOn(void)	: "Turn on per frame updating (for moving lights)"
	input AlwaysUpdateOff(void)	: "Turn off per frame updating (for moving lights)"
	input SetFOV(float)		: "Set FOV"
	input SpotlightTexture(string)		: "Set the spotlight texture"
	input EnableShadows(bool)		: "Set the if shadows are enabled"
	input LightColor(color255)		: "Change the light color/brightness"
	input SetNearZ(float) 	: "Sets the near Z distance."
	input SetFarZ(float) 	: "Sets the far Z distance."
]


@PointClass base(Targetname, Angles, TeamNum) studio("models/buildables/sapper_placement.mdl") = lfe_buildpoint : "Build Point" 
[
	AllowedObject(string) : "Allowed Building" : "obj_attachment_sapper" : "Allowed Building to be attach here."

	output OnObjectAttached(void) : "Fired when building attached."
]

@SolidClass base(Targetname, Parentname, Origin, EnableDisable) = trigger_coop :

	"Trigger that can count the number of players, either fractionally or as a specific number." +
	"Filters can be used with this entity, however only players can use the special features of this entity."
	
	// this does not use trigger baseclass because of spawnflags
[
	spawnflags(Flags) =
	[
		16384 : "Remove itself on OnPlayersIn" : 16384
	]
	
	CountType(choices) : "Count Type" : 1 : "How you want the trigger to count players." =
	[
		0 : "Specific Number"
		1 : "Percentage"
	]

	UseHud(choices) : "Use HUD" : 1 : "Use HUD to display the number of players?" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	Target(string) : "Sets the target entity to teleport players to when using TeleportPlayersNotTouching"

	PlayerValue(integer) : "Number of Players" : 50 : "The value this trigger will use to compare with.  Use value range of 0 - 100 for percentage."

	output OnPlayersIn(void) : "This gets fired if the required amount of players are touching this volume."
	output OnPlayersOut(void) : "This gets fired after the player count drops below the requirement."
	
	input Toggle(void) : "Toggles this trigger between enabled and disabled states."
	input TeleportPlayersNotTouching(void) : "Toggles this trigger between enabled and disabled states."
]

@PointClass base(Targetname, Angles) color(0 255 0) studio() = info_vehicle_spawn : "Vehicle Spawn Entity keeps a vehicle for every player, with options to relocate vehicles upon certain conditions."
[
	model(studio) : "Vehicle Model Name" : ""

	StartEnabled(choices) : "Start Enabled" : 1 : "Initial state of the vehicle spawn." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	StartGunEnabled(choices) : "Start with gun enabled" : 1 : "Vehicles will spawn with guns." =
	[
		0 : "No"
		1 : "Yes"
	]

	VehicleType(choices) : "Vehicle Type" : 1 : "Type of vehicle this spawn will use." =
	[
		1 : "Jeep"
		2 : "Airboat"
		3 : "Jalopy"
		4 : "Jeep again"
	]

	//RespawnVehicle(choices) : "Respawn Vehicle" : 0 : "Respawn vehicles if the players die." =
	//[
	//	0 : "No"
	//	1 : "Yes"
	//]

	VehicleScript(string) : "Vehicle Script" : "scripts/vehicles/jeep_test.txt" : "Vehicle Script File"
	VehicleSize(integer) : "Vehicle Spawn Size" : 192 : "Radius at which active vehicle must exit before spawning the next vehicle."

	input Enable(void) : "Enable the use of the vehicles."
	input Disable(void) : "Disable use of the vehicles."
	input EnableGun(void) : "Enables vehicles from this spawner to have mounted guns."
	input DisableGun(void) : "Disables vehicles from this spawner from having mounted guns."
	input ResetEmpty(void) : "Removes vehicles spawned by this spawner that have nobody in them."
	input ResetAll(void) : "Removed vehicles spawned by this spawner and kicks players out."

	output OnSpawnVehicle(void) : "Fired when a vehicle is spawned, the !activator will be the vehicle."
]

@PointClass base(Targetname, Parentname) = logic_mirror_movement :
	"An entity that can mirror entity movement to another entity."
[
	m_target(target_destination)            : "Target entity"          :  : "Target entity."
	m_strMirrorTarget(target_destination)   : "Mirror Target entity"   :  : "Mirror target entity."
	m_strRemoteTarget(target_destination)   : "Remote Target entity"   :  : "Remote target entity."
	m_strMirrorRelative(target_destination) : "Mirror Relative entity" :  : "Mirror relative entity."
	
	input SetMirrorTarget(string) : "Set the Mirror Target entity."
	input SetTarget(string) : "Set the Target entity."
	input SetRemoteTarget(string) : "Set the Remove Target entity."
	input SetMirrorRelative(string) : "Set the Mirror Relative entity."
]

@PointClass base(Targetname,Angles) iconsprite("editor/info_gamemode.vmt") = info_gamemode :
	"Game mode trigger."
[
	output OnCoOp(void) : "Fired when the map spawns in coop games."
	output OnBluCoOp(void) : "Fired when the map spawns in blu coop games."
	output OnVersus(void) : "Fired when the map spawns in versus games."
	output OnHorde(void) : "Fired when the map spawns in horde games."
	output OnFree(void) : "Fired when the map spawns in free mode."
	output OnInfection(void) : "Fired when the map spawns in infection mode."
	output OnDeathmatch(void) : "Fired when the map spawns in deathmatch mode."

	output OnCoOpPostIO(void) : "Fired after all entity IO generated by OnCoOp has finished."
	output OnBluCoOpPostIO(void) : "Fired after all entity IO generated by OnBluCoOp has finished."
	output OnVersusPostIO(void) : "Fired after all entity IO generated by OnVersus has finished."
	output OnHordePostIO(void) : "Fired after all entity IO generated by OnHorde has finished."
	output OnFreePostIO(void) : "Fired after all entity IO generated by OnFree has finished."
	output OnInfectionPostIO(void) : "Fired after all entity IO generated by OnInfection has finished."
	output OnDeathmatchPostIO(void) : "Fired after all entity IO generated by OnDeathmatch has finished."

	//output OnNavAnalyze(void) : "Fired when the map is loaded with -navanalyze on the command line."
]

@PointClass base(BaseNPC, Parentname, TalkNPC, PlayerCompanion ) studio() = npc_custom : "Generic And Custimizable NPC"
[
	spawnflags(Flags) =
	[
		65536 : "Follow player on spawn" : 0
		131072 : "Medic" : 0
		524288 : "Ammo Resupplier" : 0
		1048576 : "Not Commandable" : 0
		2097152 : "Don't use Speech Semaphore - OBSOLETE" : 0
		16777216 : "Use RenderBox in ActBusies" : 0
	]
	
	health(Integer) : "Health Of This NPC" : 100
	maxhealth(Integer) : "Max Health Of This NPC" : 100
	model(studio) : "NPC Model" : "models/humans/group01/male_01.mdl"
	class_name(string) : "Sets The Class Name Of This NPC"
	classify(string) : "Sets The Class Type Of This NPC"
	fieldofview(float) : "Field Of View" : 5 : "How Far Can See This NPC?"
	
	shouldpatrol(choices) : "Is This NPC Allowed To Patrol?" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	boss_npc(choices) : "Is This NPC a Boss?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	start_disabled(choices) : "Start Disabled?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	hullname(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
	
	bloodcolor(choices) : "Blood Color Type" : "Don't Bleed" =
	[
		"DONT_BLEED" : "Don't Bleed"
		"BLOOD_COLOR_RED" : "Red Blood"
		"BLOOD_COLOR_YELLOW" : "Yellow Blood"
		"BLOOD_COLOR_GREEN" : "Green Blood"
		"BLOOD_COLOR_MECH" : "Mech Sparks"
		"BLOOD_COLOR_ANTLION" : "Antilion Blood"
		"BLOOD_COLOR_ZOMBIE" : "Zombie Blood"
		"BLOOD_COLOR_ANTLION_WORKER" : "Antlion Worker Blood"
	]

	additionalequipment(choices) : "Weapons" : "0" =
	[
		"weapon_crowbar" : "Crowbar"
		"weapon_stunstick" : "StunStick"
		"weapon_pistol" : "Pistol"
		"weapon_ar2" : "Assault Rifle 2"
		"weapon_rpg" : "Missile Launcher"
		"weapon_smg1" : "SMG1"
		"weapon_357" : "357"
		"weapon_crossbow" : "Crossbow"
		"weapon_shotgun" : "Shotgun"
		"weapon_frag" : "Frag Grenade"
		"weapon_physcannon" : "Physics Cannon"
		"weapon_bugbait": "Bug bait"
		"weapon_alyxgun": "Alyx Gun"
		"weapon_annabelle": "Annabelle (Grigori)"
		"0"  : "Nothing"
	]

	ammosupply(choices) : "Ammo to Resupply (if spawnflag set)" : "SMG1" =
	[
		"Pistol" : "Pistol"
		"SMG1" : "SMG1"
		"SMG1_Grenade" : "SMG1 Grenade"
		"AR2" : "AR2"
		"Buckshot" : "Shotgun"
		"RPG_Round" : "RPG"
		"Grenade" : "Grenade"
		"XBowBolt" : "Crossbow Bolt"
	]

	ammoamount(integer) : "Amount of ammo to give" : 1

	expressiontype(choices) : "Expression Type" : "Random" =
	[
		0 : "Random"
		1 : "Scared"
		2 : "Normal"
		3 : "Angry"
	]

	ExpressionOverride(string) : "Facial expression override"

	notifynavfailblocked(choices) : "Fire output when Nav is blocked?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	neverleaveplayersquad(choices) : "Permanent squad member?" : 0 : "A permanent squad member cannot leave the player's squad unless killed or explicity removed by entity I/O. Only use this if you're sure you want to override the default AI." =
	[
		0 : "No. This is default behavior."
		1 : "Yes, stay in squad until death."
	]

	denycommandconcept(string) : "Deny command speech concept" : "" : "If you want your NPCs to squad with the player but not obey commands the player gives to move the squad, put a concept here and this NPC will speak the concept instead of obeying the order."

    //Inputs
	input RemoveFromPlayerSquad(void) : "Remove from player squad, instantly."
	input SetExpressionOverride(string) : "Set facial expression override"

	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input SetCommandable(void) : "Make a previously uncommandable NPC commandable"
	input SetMedicOn(void) : "Set the medic flag on. Will not change the model or skin of the NPC."
	input SetMedicOff(void) : "Set the medic flag off. Will not change the model or skin of the NPC."
	input SetAmmoResupplierOn(void) : "Set the ammo-resupplier flag on. Will not change the model or skin of the NPC."
	input SetAmmoResupplierOff(void) : "Set the ammo-resupplier flag off. Will not change the model or skin of the NPC."
	
	input Enable(void) : "Enable This NPC"
	input Disable(void) : "Disable This NPC"

	// Outputs
	output OnJoinedPlayerSquad(void) : "Fires when joins player squad"
	output OnLeftPlayerSquad(void) : "Fires when leaves player squad"
	output OnFollowOrder(void) : "Fires when ordered to follow player"
	output OnStationOrder(void) : "Fires when ordered to a location by player"
	output OnPlayerUse(void) : "Fires when a player +USEs the NPC"
	output OnNavFailBlocked(void) : "Fires when this NPC's movement fails because he/she is blocked."

	output OnKilled(void) : "Fired When This NPC Is Killed"
]

@PointClass base(BaseNPC, RappelNPC) studio() = npc_custom_combine : "Combine Version Of Custom NPC"
[
	health(Integer) : "Health Of This NPC" : 100
	maxhealth(Integer) : "Max Health Of This NPC" : 100
	model(studio) : "NPC Model" : "models/Combine_Soldier.mdl"
	class_name(string) : "Sets The Class Name Of This NPC"
	classify(string) : "Sets The Class Type Of This NPC"
	fieldofview(float) : "Field Of View" : 5 : "How Far Can See This NPC?"

	shouldpatrol(choices) : "Is This NPC Allowed To Patrol?" : "No" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	boss_npc(choices) : "Is This NPC a Boss?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	start_disabled(choices) : "Start Disabled?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	hullname(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
	
	bloodcolor(choices) : "Blood Color Type" : "Don't Bleed" =
	[
		"DONT_BLEED" : "Don't Bleed"
		"BLOOD_COLOR_RED" : "Red Blood"
		"BLOOD_COLOR_YELLOW" : "Yellow Blood"
		"BLOOD_COLOR_GREEN" : "Green Blood"
		"BLOOD_COLOR_MECH" : "Mech Sparks"
		"BLOOD_COLOR_ANTLION" : "Antilion Blood"
		"BLOOD_COLOR_ZOMBIE" : "Zombie Blood"
		"BLOOD_COLOR_ANTLION_WORKER" : "Antlion Worker Blood"
	]
	
	input Assault(string) : "Start an assault. Parameter passed in should be the name of the rally point."

	tacticalvariant(choices) : "Tactical Variant" : "0" =
	[
		"0" : "Normal Tactics"
		"1" : "Pressure the enemy (Keep advancing)"
		"2" : "Pressure until within 30ft, then normal"
	]
	
	usemarch(choices) : "Walk Easy" : "0" : "When true, will use a variety of more casual walking animations instead of the standard walk. For use in crowds. WARNING: this animation only has a north component. For use under very special circumstances only." =
	[
		"0" : "No"
		"2" : "Yes"
	]
	
	additionalequipment(choices) : "Weapons" : "weapon_smg1" =
	[
		"weapon_crowbar" : "Crowbar"
		"weapon_stunstick" : "StunStick"
		"weapon_pistol" : "Pistol"
		"weapon_ar2" : "Assault Rifle 2"
		"weapon_rpg" : "Missile Launcher"
		"weapon_smg1" : "SMG1"
		"weapon_357" : "357"
		"weapon_crossbow" : "Crossbow"
		"weapon_shotgun" : "Shotgun"
		"weapon_frag" : "Frag Grenade"
		"weapon_physcannon" : "Physics Cannon"
		"weapon_bugbait": "Bug bait"
		"weapon_alyxgun": "Alyx Gun"
		"weapon_annabelle": "Annabelle (Grigori)"
		"0"  : "Nothing"
	]

	spawnflags(Flags) = 
	[
		65536 :  "Start LookOff" : 0
		131072	: "Don't drop grenades" : 0
		262144  : "Don't drop ar2 alt fire (elite only) " : 0
	]

	NumGrenades(choices) : "Number of Grenades" : "5" =
	[
		"0" : "None"
		"1" : "1"
		"2" : "2"
		"3" : "3"
		"4" : "4"
		"5" : "5"
		"999999" : "Unlimited"
	]

	// Inputs
	input LookOn(void) : "Look normally"	
	input LookOff(void) : "Don't look for myself, use other squad member's eyes"
	input StartPatrolling(void) : "Patrol whenever I'm idle or alert."
	input StopPatrolling(void) : "Stop patrolling when I'm idle or alert."
	input ThrowGrenadeAtTarget(target_destination) : "Throw a grenade at the specified target."
	
	input Enable(void) : "Enable This NPC"
	input Disable(void) : "Disable This NPC"
	
	// Outputs
	output OnKilled(void) : "Fired When This NPC Is Killed"
]


@PointClass base(BaseNPC) studio() = npc_custom_zombie : "Zombified Version Of Custom NPC"
[
	health(Integer) : "Health Of This NPC" : 100
	maxhealth(Integer) : "Max Health Of This NPC" : 100
	model(studio) : "NPC Model" : "models/Zombie/Classic.mdl"
	class_name(string) : "Sets The Class Name Of This NPC"
	classify(string) : "Sets The Class Type Of This NPC"
	fieldofview(float) : "Field Of View" : 5 : "How Far Can See This NPC?"
	
	boss_npc(choices) : "Is This NPC a Boss?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	start_disabled(choices) : "Start Disabled?" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	hullname(choices) : "Hull type" : "Human" =
	[
		"HUMAN_HULL" : "Human"
		"WIDE_HUMAN_HULL" : "Wide"
		"TINY_HULL" : "Tiny"
		"MEDIUM_HULL" : "Medium"
		"LARGE_HULL" : "Large"
	]
	
	bloodcolor(choices) : "Blood Color Type" : "Don't Bleed" =
	[
		"DONT_BLEED" : "Don't Bleed"
		"BLOOD_COLOR_RED" : "Red Blood"
		"BLOOD_COLOR_YELLOW" : "Yellow Blood"
		"BLOOD_COLOR_GREEN" : "Green Blood"
		"BLOOD_COLOR_MECH" : "Mech Sparks"
		"BLOOD_COLOR_ANTLION" : "Antilion Blood"
		"BLOOD_COLOR_ZOMBIE" : "Zombie Blood"
		"BLOOD_COLOR_ANTLION_WORKER" : "Antlion Worker Blood"
	]

	// Inputs
	input Enable(void) : "Enable This NPC"
	input Disable(void) : "Disable This NPC"
	
	// Outputs
	output OnKilled(void) : "Fired When This NPC Is Killed"
]

@PointClass base(Targetname, Parentname, BaseNPC, Angles, EnableDisable, TeamNum) studio("models/bots/headless_hatman.mdl") = headless_hatman : "Horseless Headless Horsemann" []

@PointClass base(Targetname, Parentname, BaseNPC, Angles, EnableDisable, TeamNum) studio("models/bots/skeleton_sniper/skeleton_sniper.mdl") = tf_zombie : "Skeleton" []

@PointClass base(Targetname, Parentname, BaseNPC, Angles, EnableDisable, TeamNum) studio("models/zombie/merczombie.mdl") = npc_zombie_fc : "Zombie Merc" []

@PointClass base(Targetname, Parentname, BaseNPC, Angles, EnableDisable, TeamNum) studio("models/zombie/merczombie.mdl") = npc_infected_fc : "Infected Merc" []

@PointClass base(Targetname, Parentname, BaseNPC, Angles, EnableDisable, TeamNum) studio("models/Zombie/Classic.mdl") = npc_infected : 	"L4D1 Infected" []

@PointClass base(Targetname) studio("models/items/ammopack_medium.mdl") = tf_ammo_pack : "Dropped AmmoPack"
[
	model(studio) : "Model" : "" : "Change the model to something other than the default model." 
]

@PointClass base(Targetname, Angles) studio("models/bots/skeleton_sniper/skeleton_sniper.mdl") = tf_zombie_spawner : "Entity that spawns Skeleton."
[
	zombie_scale(float) : "Skeleton Scale" : 1 : "Scale the Skeleton"
	zombie_lifetime(float) : "Skeleton Life Time" : 0 : "Skeleton life time in seconds. 0 means skeletons will stay alive until they're dead."
	max_zombies(integer) : "Skeleton Count" : 1 : "Number of skeletons this point can have active in the world."
	infinite_zombies(choices)		: "Infinite Spawn"		: 0	: "If Yes, keep spawning skeletons to have skeleton count in the world. If no, only spawn skeletons up to skeleton count." =
	[
		0 : "NO"
		1 : "Yes"
	]
	zombie_type(choices)		: "Skeleton Type"		: 0	: "Type of skeleton." =
	[
		0 : "NORMAL"
		1 : "SKELETON KING"
	]

	// Inputs
	input Enable(void) : "Enable zombie spawn point."
	input Disable(void) : "Disable zombie spawn point."
	input SetMaxActiveZombies(integer) : "Max number of zombies"
]

@PointClass base(Targetname, Angles) studio("models/zombie/merczombie.mdl") = fc_zombie_spawner : "Entity that spawns the merc zombie whooo scary."
[
	zombie_scale(float) : "Merc Scale" : 1 : "Scale the merc"
	zombie_lifetime(float) : "Merc Life Time" : 0 : "Merc life time in seconds. 0 means zombies will stay alive until they're dead."
	max_zombies(integer) : "Merc Count" : 1 : "Number of underpaid undead men this point can have active in the world."
	infinite_zombies(choices)		: "Infinite Spawn"		: 0	: "If Yes, keep spawning the silly man." =
	[
		0 : "NO"
		1 : "Yes"
	]
	zombie_type(choices)		: "Zombie Type"		: 0	: "Type of Merc." =
	[
		0 : "NORMAL"
		1 : "TEST"
	]

	// Inputs
	input Enable(void) : "Enable zombie spawn point."
	input Disable(void) : "Disable zombie spawn point."
	input SetMaxActiveZombies(integer) : "Max number of zombies"
]

@PointClass base(Item) studio("models/items/currencypack_large.mdl") = item_currencypack_large : "Large Credits Pickup" []

@PointClass base(Item) studio("models/items/currencypack_medium.mdl") = item_currencypack_medium : "Medium Credits Pickup" []

@PointClass base(Item) studio("models/items/currencypack_small.mdl") = item_currencypack_small : "Small Credits Pickup" []

@PointClass base(Item) studio("models/items/currencypack_small.mdl") = item_currencypack_custom : "Custom Credits Pickup" []

@PointClass base(Targetname) iconsprite("editor/logic_relay.vmt") = logic_currencymanager :
	"An entity that is used to give currency to the activator or all players"
[
	input GiveCurrency(integer) : "Give this much currency to the activator."
	input GiveCurrencyToAll(integer) : "Give this much currency to all players."
]

@PointClass base(Targetname,Parentname) iconsprite("editor/bullseye.vmt") = halloween_zapper : 
	"Halloween Hell Zapper" 
[
	touch_trigger(target_destination) : "Custom Touch Trigger"
	ParticleEffect(string)	: "Particle Effect"	: ""	: "The particle effect to be played when we fired."
	ZapperType(choices) : "Zapper Type" : 0 : "Type of zapper." =
	[
		0 : "Zap on touch"
		1 : "Zap only on input"
	]

	input ZapTouching(void) : "Zap all touching players."
]

@SolidClass base(Trigger, Targetname, EnableDisable, Toggle) = trigger_player_respawn_override : "Respawn Override"
[
	RespawnTime(float) : "Respawn Time" : -1 : "The number of seconds before players that die inside the volume of this trigger can respawn.  Setting -1 will allow the game to decide."
	RespawnName(string) : "Respawn Entity Name" : "" : "The name of the player team spawn(s) to use when a player dies in this volume."

	// Inputs
	input SetRespawnTime(float) : "The number of seconds before players that die inside the volume of this trigger can respawn."
	input SetRespawnName(string) : "The name of the info_player_teamspawn to use when players die inside the volume of this trigger."
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
]

@PointClass base(Targetname, Studiomodel) = prop_soccer_ball : "Soccer Ball"
[
	trigger_name(string) : "Trigger Name" : "" : "The name of the trigger(s) to try and touch"
]

@BaseClass = MiniGame
[	
	// Inputs
	input ReturnFromMinigame(void) : "Force players to return from the current minigame."
	input TeleportToMinigame(integer) : "Teleport to a specific minigame."
	input TeleportToRandomMinigame(void) : "Teleport to a random minigame"
	input SetAdvantageTeam(string) : "Set which team has the advantage."
]

@PointClass base(Targetname,MiniGame) = tf_logic_minigames : "Minigame mode logic."
[
]

@PointClass base(Targetname) = tf_base_minigame : "Base minigame"
[
	RedSpawn(target_source) : "Red Spawn Name" : "" : "The name of the spawnpoints for RED for this minigame"
	BlueSpawn(target_source) : "Blue Spawn Name" : "" : "The name of the spawnpoints for BLUE for this minigame"
	InRandomPool(choices) : "Put in Random Pool" : 1 : "If Yes, allowed to be chosen when told to go to a random minigame" =
	[
		0 : "No"
		1 : "Yes"
	]
	MaxScore(integer) : "Max Score" : 5 : "When a team hits this score, the On<Team>HitMaxScore output will be fired"
	hud_res_file(string) : "HUD Res File" : "" : "Res file to use for this minigame"
	your_team_score_sound(string) : "Your Team Score Sound" : "" : "Sound file to play when your team scores a point"
	enemy_team_score_sound(string) : "Enemy Team Score Sound" : "" : "Sound file to play when the enemy team scores a point"
	ScoreType(choices) : "Scoring Type" : 0 : "What to use for scoring" =
	[
		0 : "Points"
		1 : "Players alive"
	]
	SuddenDeathTime(float) : "Sudden Death Time" : -1 : "Time til sudden death starts (-1 for sudden death)"

	// Inputs
	input ScoreTeamRed(integer) : "Give points to team RED"
	input ScoreTeamBlue(integer) : "Give points to team BLUE"
	input ReturnFromMinigame(void) : "Force players to return from the current minigame."
	input ChangeHudResFile(string) : "Change the HUD resource file."

	// Outputs
	output OnReturnFromMinigame(void) : "Sent when players return from this minigame."
	output OnTeleportToMinigame(void) : "Sent when players arrive in this minigame."
	output OnRedHitMaxScore(void) : "Sent RED hits the max score for this minigame."
	output OnBlueHitMaxScore(void) : "Sent BLUE hits the max score for this minigame."
	output OnAllRedDead(void) : "Sent when the entire RED team is dead."
	output OnAllBlueDead(void) : "Send when the entire BLUE team is dead."
	output OnSuddenDeathStart(void) : "Sent when sudden death starts."
]

@PointClass base(Targetname,tf_base_minigame) = tf_halloween_minigame : "Halloween 2014 Minigame"
[
	MinigameType(choices) : "Minigame Type" : 1 : "Which minigame is this" =
	[
		1 : "Halloween Collection"
		2 : "Halloween Platforms"
		3 : "Halloween Soccer"
	]

	input KartWinAnimationRed(void) : "Play win animation for all players in kart on team RED"
	input KartWinAnimationBlue(void) : "Play win animation for all players in kart on team BLUE"
	input KartLoseAnimationRed(void) : "Play lose animation for all players in kart on team RED"
	input KartLoseAnimationBlue(void) : "Play lose animation for all players in kart on team BLUE"

	input EnableSpawnBoss(string) : "Spawn Halloween boss HHH at specified target entity"
	input DisableSpawnBoss(void) : "Stop spawning Halloween boss"
]

@PointClass base(Targetname,tf_halloween_minigame) = tf_halloween_minigame_falling_platforms : "Halloween 2014 Falling Platform Minigame"
[
	input ChoosePlatform(void) : "Fire to get the next SAFE platform and the next platform that wont come back"

	output OutputSafePlatform(void) : "Sends the index of the SAFE platform."
	output OutputRemovePlatform(void) : "Sends the index of the platform that shouldn't come back."
]

@PointClass base(Targetname,Origin,Angles) studio("models/bots/merasmus/merasmas_misfortune_teller.mdl") = halloween_fortune_teller : "Halloween Fortune Teller trigger" 
[
	red_teleport(string) : "Red Teleport Entity" : "" :  "Where to teleport the red team"
	blue_teleport(string) : "Blue Teleport Entity" : "" : "Where to teleport the blue team"

	input EnableFortuneTelling( void) :"Enable fortune telling"
	input DisableFortuneTelling( void) :"Disable fortune telling"
	input StartFortuneTelling(void) : "Start fortune telling"
	input EndFortuneTelling(void) : "Stop the current fortune" 

	output OnFortuneWarning(void) : "Sent before a fortune will be told."
	output OnFortuneTold(void) : "Sent when a fortune is told."
	output OnFortuneCurse(void) : "Sent when a fortune curse all players"
	output OnFortuneEnd(void) : "Sent when a fortune is ended."
]

@PointClass base(Targetname,Origin,Angles) = tf_teleport_location : "Players teleport locations which will be delete on round start"
[
]

@PointClass base(Targetname) = point_event_proxy : "An entity that allows fires simple game events from map logic"
[
	EventName(string) : "Event Name" : : "Name of the event fired"
	ActivatorAsUserID(Choices) : "Activator as 'userid' field" : 1 : "Use the input activator as the userid field in the event fired" =
	[
		0 : "No"
		1 : "Yes"
	]
	
	input GenerateEvent(void) : "Generate the game event."
]

@PointClass base(Targetname) iconsprite("editor/info_game_event_proxy.vmt") = info_game_event_proxy
[
	event_name(string) : "Name of the event to generate"
	range(float) : "Range" : "50" : "How near the player must be to determine visibility. THIS IS IN FEET"

	spawnflags(flags) =
	[
		1: "Fire Automatically When First Seen" : 0
	]

	// Inputs
	input GenerateGameEvent(void) : "Generate my game event. (This entity is sent as the SUBJECT)"
]

@PointClass base(Targetname) = env_instructor_hint : "An entity that allows for creation and control of instructor lessons by map logic"
[
	hint_replace_key(string) : "Replace Key" : : "Unique name so that messages with the same key will replace each other."
	hint_target(target_destination) : "Target Entity" : : "The entity to show this hint on top of. The entity used must exist on the client, info_target_instructor_hint can be parented to server only entities for this purpose."
	hint_static(Choices) : "Positioning" : 0 : "Either show at the position of the Target Entity. Or show the hint directly on the hud at a fixed position." =
	[
		0 : "Follow the Target Entity"
		1 : "Show on the hud"
	]
	
	hint_allow_nodraw_target(Choices) : "Allow invisible target" : 1 : "Do we allow the hint to follow entites with nodraw set?" =
	[
		0 : "End immediately on nodraw"
		1 : "Yes"
	]
	
	hint_caption(string) : "Caption" : : "The text of your hint."
	hint_activator_caption(string) : "Activator Caption" : : "The text of your hint shown to only the activating player."
	hint_color(color255) : "Caption Color" : "255 255 255" : "The color of the caption text"
	hint_forcecaption(Choices) : "Force caption" : 0 : "Do we show the caption text even if the hint is occluded by a wall?" =
	[
		0 : "No"
		1 : "Show when occluded"
	]
	
	hint_icon_onscreen(Choices) : "Onscreen Icon" : "icon_tip" : "The icon to use when the hint is within the player's view." =
	[
		"icon_bulb" : "icon_bulb"
		"icon_caution" : "icon_caution"
		"icon_alert" : "icon_alert"
		"icon_alert_red" : "icon_alert_red"
		"icon_tip" : "icon_tip"
		"icon_skull" : "icon_skull"
		"icon_no" : "icon_no"
		"icon_run" : "icon_run"
		"icon_interact" : "icon_interact"
		"icon_button" : "icon_button"
		"icon_door" : "icon_door"
		"icon_arrow_plain" : "icon_arrow_plain"
		"icon_arrow_plain_white_dn" : "icon_arrow_plain_white_dn"
		"icon_arrow_plain_white_up" : "icon_arrow_plain_white_up"
		"icon_arrow_up" : "icon_arrow_up"
		"icon_arrow_right" : "icon_arrow_right"
		"icon_fire" : "icon_fire"
		"icon_present" : "icon_present"
		"use_binding" : "show key bindings"
	]
	
	hint_icon_offscreen(Choices) : "Offscreen Icon" : "icon_tip" : "The icon to use when the hint is outside the player's view." =
	[
		"icon_bulb" : "icon_bulb"
		"icon_caution" : "icon_caution"
		"icon_alert" : "icon_alert"
		"icon_alert_red" : "icon_alert_red"
		"icon_tip" : "icon_tip"
		"icon_skull" : "icon_skull"
		"icon_no" : "icon_no"
		"icon_run" : "icon_run"
		"icon_interact" : "icon_interact"
		"icon_button" : "icon_button"
		"icon_door" : "icon_door"
		"icon_arrow_plain" : "icon_arrow_plain"
		"icon_arrow_plain_white_dn" : "icon_arrow_plain_white_dn"
		"icon_arrow_plain_white_up" : "icon_arrow_plain_white_up"
		"icon_arrow_up" : "icon_arrow_up"
		"icon_arrow_right" : "icon_arrow_right"
		"icon_fire" : "icon_fire"
		"icon_present" : "icon_present"
	]
	
	hint_nooffscreen(Choices) : "Show offscreen" : 0 : "When the hint is offscreen, do we show an icon and arrow?" =
	[
		0 : "Show"
		1 : "Don't show"		
	]
	
	hint_binding(string) : "Bound Command" : : "If using 'show key bindings' for the onscreen icon, this field should be the command we want to show bindings for"
	hint_icon_offset(float) : "Icon Height Offset" : 0 : "A height offset from the target entity's origin to display the hint"
	hint_pulseoption(Choices) : "Size Pulsing" : 0 : "The icon size can pulsate" =
	[
		0 : "No Pulse"
		1 : "Slow Pulse"
		2 : "Fast Pulse"
		3 : "Urgent Pulse"
	]
	
	hint_alphaoption(Choices) : "Alpha Pulsing" : 0 : "The icon alpha can pulsate" =
	[
		0 : "No Pulse"
		1 : "Slow Pulse"
		2 : "Fast Pulse"
		3 : "Urgent Pulse"
	]
	
	hint_shakeoption(Choices) : "Shaking" : 0 : "The icon can shake" =
	[
		0 : "No Shaking"
		1 : "Narrow Shake"
		2 : "Wide Shake"
	]

	hint_local_player_only(boolean) : "Only Local Player" : "No" : "The hint will only be shown to the local player."
	
	hint_timeout(integer) : "Timeout" : 0 : "The automatic timeout for the hint. 0 will persist until stopped with EndHint."
	hint_range(float) : "Display Range" : 0 : "The visible range of the hint."	
	
	input ShowHint(string) : "Start showing the hint. If an entity name is passed as a parameter, the hint is shown only to that entity."	
	input EndHint(void) : "Stop showing the hint if it hasn't already timed out."
]

@PointClass base(Targetname,Parentname) = info_target_instructor_hint : "A generic target that gets replicated to the client for hud hint targeting"
[
]

@PointClass base(Origin,Targetname) sphere() = info_remarkable : "An object in the world such that characters seeing it will speak a TLK_REMARK concept"
[
	contextsubject(string) : "Subject context" : "" : "Text to put in the SUBJECT context of the TLK_REMARK fired upon sighting this object."
	radius(string) : "Mock Radius for Origin Placement" : "500" : "Allows you to set a mock radius to determine origin placement on info_remarkables based off their associated Remark radius"
]

@PointClass base(Targetname, EnableDisable) iconsprite("editor/logic_random_outputs.vmt") = logic_random_outputs :
	"A message forwarder. Fires up to eight separate outputs, each with a different chance of firing."
[
	spawnflags(flags) =
	[
		1: "Only trigger once" : 0
		2: "Allow fast retrigger" : 0
	]
	OnTriggerChance1(float) : "OnTrigger1 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger1 output firing when this entity is triggered."
	OnTriggerChance2(float) : "OnTrigger2 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger2 output firing when this entity is triggered."
	OnTriggerChance3(float) : "OnTrigger3 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger3 output firing when this entity is triggered."
	OnTriggerChance4(float) : "OnTrigger4 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger4 output firing when this entity is triggered."
	OnTriggerChance5(float) : "OnTrigger5 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger5 output firing when this entity is triggered."
	OnTriggerChance6(float) : "OnTrigger6 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger6 output firing when this entity is triggered."
	OnTriggerChance7(float) : "OnTrigger7 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger7 output firing when this entity is triggered."
	OnTriggerChance8(float) : "OnTrigger8 Chance" : "1.0" : "Chance (from 0 to 1) of the OnTrigger8 output firing when this entity is triggered."

	// Inputs
	input Trigger(void) : "Trigger this entity, causing its OnTrigger outputs to fire if it is enabled."
	input Toggle(void) : "Toggle this entity between enabled and disabled."
	input CancelPending(void) : "Cancel any events fired by this entity that are currently pending in the I/O event queue."
	
	// Outputs
	output OnSpawn(void) : "Fired when this entity is spawned. If this entity is set to only trigger once, it will "+
		"delete itself after firing this output."
	output OnTrigger1(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger2(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger3(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger4(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger5(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger6(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger7(void) : "This output has a chance to fire when the entity is triggered."
	output OnTrigger8(void) : "This output has a chance to fire when the entity is triggered."
]

@PointClass base(Targetname) = logic_playmovie : "Plays a movie and allows for various playback options"
[
	MovieFilename(string) : "Movie to play" : "" : "Filename of the movie to play"
	allowskip(integer) : "Allow User to Skip" : 0 : "Whether or not the user may skip the video with common keys"

	input PlayMovie(void) : "Play the movie."
	input PlayMovieForAllPlayers (void) : "Play the movie for all connected players."

	// Outputs
	output OnPlaybackFinished(void) : "Fired when the movie has completed playing back or was skipped by the user."
]

@PointClass base(Targetname, Angles, Parentname) studio("models/editor/axis_helper_thick.mdl") = vgui_movie_display : "Movie Display"
[
	displaytext(string) : "Display Text" : ""
	moviefilename(string) : "Movie Filename" : "media/"
	groupname(string) : "Group Name" : ""

	looping(integer) : "Loop Movie" : 0

	width(integer) : "Panel width" : 256 : "Width of the panel in units."
	height(integer) : "Panel height" : 128 : "Height of the panel in units."

	input Enable(void) : "Make movie visible."
	input Disable(void) : "Make movie invisible."

	input SetDisplayText(string) : "Sets the display text."
]

@SolidClass base(Targetname, Parentname, Origin, RenderFields) = func_elevator :
	"A brush entity that moves vertically."
[
	top(vecline) : "Top floor position"
	bottom(vecline) : "Bottom floor position"

	speed(integer) : "Speed" : 100 : "The speed that the elevator moves, in inches per second."
	acceleration(integer) : "Acceleration" : 100 : "The acceleration at which the elevator approaches its target speed, in inches per second per second."
	blockdamage(float) : "Block Damage" : 0 : "The amount of damage to do to any entity that blocks the elevator, per frame."
	startsound(sound) : "Sound played when the elevator starts moving."
	stopsound(sound) : "Sound played when the elevator stops moving."
	disablesound(sound) : "Sound played when the elevator is disabled."

	// Inputs
	input MoveToFloor(string) : "Start the elevator moving to the specified floor."
	input Disable(void) : "Stops the elevator and prevents it from moving again."

	// Outputs
	output OnReachedTop(string) : "Fired when the brush reaches the top."
	output OnReachedBottom(string) : "Fired when the brush reaches the bottom."
]

@PointClass base(Targetname, Parentname, Angles) iconsprite("editor/info_target.vmt") = info_elevator_floor : 
	"Elevator floor height target."
[
	// Outputs
	output OnReachedFloor(void) : "Fired when an elevator reaches this floor."
]

@PointClass base(Targetname) = skybox_swapper :
	"An entity to control the skybox texture in a map."
[
	SkyboxName(string) : "Skybox Material" : "sky_tf2_04" : "Skybox material name you want to change to."
	
	input Trigger(void) : "Change skybox texture."
]


@PointClass base(Targetname) = point_entity_finder :
	"An entity that will find an entity and pass it along as the !Caller with the OutEntity output.  Requires using !Caller as the parameter on the input."
[
	filtername(filterclass) : "Filter Name" : : "Filter to use to narrow set of findable entities. See filter_activator_name for more explanation."
	referencename(target_destination) : "Reference Entity" : "" : "Name of the entity to use when evaluating criteria.  For example, when using 'Nearest', this is the entity that distance will be measured from.  If left blank will use the point_entity_finder."

	Method(choices) : "Search Method" : "0" =
	[
		0 : "Nearest"
		1 : "Farthest"
		2 : "Random"
	]
	
	// Inputs
	input FindEntity(void) : "Find an entity that meets the specified criteria.  Will fire OutEntity if found and pass the entity as !Caller."

	// Outputs
	output OnFoundEntity(void) : "Fired when FindEntity is input and an entity was found. Passes the found entity as !Caller."
]

@PointClass base(Item)  studio("models/weapons/w_models/w_shotgun.mdl") = tf_weapon_spawner :
	"Shit Weapon spawner."
[
	model(studio) : "Model" : "" : "Overwrite the default model with a custom one."
	itemid(integer) : "Item ID" : 1 : "The weapon id (from items_game.txt) to use for the spawner."
	itemcost(integer) : "Price" : 0 : "The cost of the weapon, default if 0."

	output OnPurchaseSuccessful(void) : ""
	output OnPurchaseFailure(void) : ""
	output OnAmmoTaken(void) : ""
	output OnItemTaken(void) : ""
]